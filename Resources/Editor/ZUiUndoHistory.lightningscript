////////////////////////////////////////////////////////////////////////////////
//  Undo history view manager.
////////////////////////////////////////////////////////////////////////////////
class ZUiUndoHistory : LightningComponent
{
    // History row cogs are of this archetype.
  [Property] var ArchetypeEntry : Archetype = Archetype.HistoryEntry;
  
  /******************************************************************************/
  function Initialize(init : CogInitializer)
  {
      // If a new history view window has just been opened, then populate the undo
      // view with rows corresponding to the current undo history.
    var operationRange = Plasma.Editor.OperationQueue.Commands;
    foreach(var operation in operationRange) 
    {
      this.AddEntry(operation);
    }
    
    Plasma.Connect(Plasma.Editor.OperationQueue, Events.OperationQueued, this.OnOperationQueued);
    Plasma.Connect(Plasma.Editor.OperationQueue, Events.OperationUndo, this.OnOperationUndo);
    Plasma.Connect(this.Owner, Events.OperationRedone, this.OnOperationRedone);
  }
  
  /******************************************************************************/
  // Initialize a new history row.
  function AddEntry(operation : Operation)
  {
    var undoViewCog = this.Owner;
    
    var entryCog = this.Space.Create(this.ArchetypeEntry);
      
    var entry = entryCog.ZUiHistoryEntry;
    entry.IsUndone = false;
    entry.OperationData = operation;
    //entry.HistoryInfo.Name = operation.Name;
    entry.RowName.SpriteText.Text = operation.Name;
    
    entryCog.AttachToPreserveLocal(undoViewCog);
  }
  
  /******************************************************************************/
  // Create a new history row if an undoable operation has been made.
  function OnOperationQueued(event : OperationQueueEvent)
  {
    this.AddEntry(event.Operation);
  }
  
  /******************************************************************************/
  // When a row is undone, move it to the redo view.
  function OnOperationUndo(event : OperationQueueEvent)
  {
    if(!this.Owner.Children.IsNotEmpty)
      return;

    var front = this.Owner.ChildrenReversedArray.Current.ZUiHistoryEntry;
    if(front.OperationData == event.Operation)
      front.ChangeHistoryView(true, this.Owner.Parent.ZUiOperationHistory.RedoView.Cog, Events.OperationUndone);
  }
  
  /******************************************************************************/
  // When an operation is redone place it last in the list of rows in the undo view.
  function OnOperationRedone(event : ChangedHistoryView)
  {
    event.HistoryEntry.AttachToPreserveLocal(this.Owner);
  }
  
}
