DocumentationLibrary = 
{
	Array Classes = 
	[
		{
			string Name = "Action",
			string BaseClass = "",
			string Description = "Base action class.",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "Active",
					string Type = "Boolean",
					string Description = "The action is queued and not stared or running.",
				},
				{
					string Name = "Completed",
					string Type = "Boolean",
					string Description = "The action ran until it completed.",
				},
				{
					string Name = "Started",
					string Type = "Boolean",
					string Description = "Has the action started?",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Cancel",
					string Description = "Cancel the action and all child actions.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CancelOverride",
					string Description = "Allow inherited actions to perform custom logic.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Update",
					string Description = "",
					string ReturnType = "ActionState::Enum",
					string Parameters = "(Real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "SpriteSource",
			string BaseClass = "Resource",
			string Description = "",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "Fill",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "FrameCount",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "FrameRate",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "Looping",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "PixelsPerUnit",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "FrameSetup",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetOrigin",
					string Description = "",
					string ReturnType = "Vec2",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetSize",
					string Description = "",
					string ReturnType = "Vec2",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetUvRect",
					string Description = "Get the texture rect for the given frame.",
					string ReturnType = "UvRect",
					string Parameters = "(Integer currentFrame)",
					Array ParameterList = 
					[
						{
							string Name = "currentFrame",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Save",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(string filename)",
					Array ParameterList = 
					[
						{
							string Name = "filename",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetAtlas",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Atlas atlas)",
					Array ParameterList = 
					[
						{
							string Name = "atlas",
							string Type = "Atlas",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Mesh",
			string BaseClass = "Resource",
			string Description = "Mesh resource class. Contains hardware vertex buffer and index buffer.",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "Indices",
					string Type = "IndexBuffer",
					string Description = "",
				},
				{
					string Name = "PrimitiveType",
					string Type = "PrimitiveType",
					string Description = "",
				},
				{
					string Name = "Vertices",
					string Type = "VertexBuffer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "BuildTree",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DeleteRuntime",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Mesh mesh)",
					Array ParameterList = 
					[
						{
							string Name = "mesh",
							string Type = "Mesh",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetPrimitiveCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetSkeleton",
					string Description = "",
					string ReturnType = "u64",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetVerticesPerPrimitive",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Mesh::GetPrimitiveData",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(Integer primitiveIndex, VertexSemantic::Enum semantic, VertexElementType::Enum type, Integer count, T data)",
					Array ParameterList = 
					[
						{
							string Name = "primitiveIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "semantic",
							string Type = "VertexSemantic::Enum",
							string Description = "",
						},
						{
							string Name = "type",
							string Type = "VertexElementType::Enum",
							string Description = "",
						},
						{
							string Name = "count",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "data",
							string Type = "T",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "NewRuntime",
					string Description = "",
					string ReturnType = "Mesh",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TestFrustum",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(const Frustum frustum)",
					Array ParameterList = 
					[
						{
							string Name = "frustum",
							string Type = "const Frustum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TestRay",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(GraphicsRayCast raycast, Mat4 worldTransform)",
					Array ParameterList = 
					[
						{
							string Name = "raycast",
							string Type = "GraphicsRayCast",
							string Description = "",
						},
						{
							string Name = "worldTransform",
							string Type = "Mat4",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Upload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "SoundAttenuator",
			string BaseClass = "DataResource",
			string Description = "",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "LowPassCutoffFreq",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "LowPassDistance",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "MaxDistance",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "MinAttenuatedVolume",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "MinDistance",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "RolloffCurve",
					string Type = "SampleCurve",
					string Description = "If set then we use the sample curve for sound rolloff The sample curve is normalized and stretched to be between min and max distance.",
				},
				{
					string Name = "RolloffCurveType",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "UseLowPassFilter",
					string Type = "Boolean",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "GetAttenuationNode",
					string Description = "",
					string ReturnType = "Audio::AttenuatorNode",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendAudioEvent",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Audio::AudioEventType eventType)",
					Array ParameterList = 
					[
						{
							string Name = "eventType",
							string Type = "Audio::AudioEventType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer serializer)",
					Array ParameterList = 
					[
						{
							string Name = "serializer",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateCurve",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Event event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "FlowEffect",
			string BaseClass = "PhysicsEffect",
			string Description = "Applies a force to make an object move at a target speed in a given direction. This can also be used to pull the object towards the center of the flow (center of a flow is the center perpendicular to the flow direction). Used to model a river or a tractor beam.",
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "AttractSpeed",
					string Type = "Real",
					string Description = "The target speed for an object to be pulled towards the center of the flow.",
				},
				{
					string Name = "AttractToFlowCenter",
					string Type = "Boolean",
					string Description = "Determines if the flow field will attract objects towards the center of the field. This can be used to create a tractor beam effect that will keep the object inside of the flow field.",
				},
				{
					string Name = "FlowDirection",
					string Type = "Real3",
					string Description = "The direction that the field is flowing. This can be defined in world or local space.",
				},
				{
					string Name = "FlowSpeed",
					string Type = "Real",
					string Description = "The target speed of objects in the flow field.",
				},
				{
					string Name = "LocalForce",
					string Type = "Boolean",
					string Description = "Determines if the flow direction is in the local space of the object.",
				},
				{
					string Name = "MaxAttractForce",
					string Type = "Real",
					string Description = "The max strength of the force that will pull the object towards the center of the flow field.",
				},
				{
					string Name = "MaxFlowForce",
					string Type = "Real",
					string Description = "The max strength of the force that can be applied in a frame to reach the target flow speed.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ApplyEffect",
					string Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force).",
					string ReturnType = "void",
					string Parameters = "(RigidBody obj, real dt)",
					Array ParameterList = 
					[
						{
							string Name = "obj",
							string Type = "RigidBody",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PreCalculate",
					string Description = "Some values can be pre-calculated once per frame instead of per body/object (local to world space directions, etc...)",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateFlowInformation",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ConvexMeshCollider",
			string BaseClass = "Collider",
			string Description = "Convex Mesh Collider is a collision primitive for colliding with a convex triangle mesh that can move but not deform.",
			Array Tags = 
			[
				"Physics",
				"Collider",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "ConvexMesh",
					string Type = "ConvexMesh",
					string Description = "The convex mesh resource that defines the collision volume of this collider.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ComputeLocalInverseInertiaTensor",
					string Description = "Computes the local space (as in not rotated, the scale is still necessary but the translation is assumed to be zero) inertia tensor from the passed in mass.",
					string ReturnType = "void",
					string Parameters = "(real mass, Mat3Ref localInvInertia)",
					Array ParameterList = 
					[
						{
							string Name = "mass",
							string Type = "real",
							string Description = "",
						},
						{
							string Name = "localInvInertia",
							string Type = "Mat3Ref",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldAabbInternal",
					string Description = "Computes the world-space aabb. This is always called after CacheWorldValues has been called. This must be implemented on each collider type. The helper function 'SetWorldAabbFromHalfExtents' exists to compute the aabb from the current rotation and translation with the given world scale half-extent of an aabb.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldVolumeInternal",
					string Description = "Compute the volume of this collider in world space. This must be calculated in world space as there's no generic way to scale volume after-the-fact. All colliders that contain a volume should implement this. Some colliders (e.g. HeightMap or Mesh ) don't as they aren't meant to work with rigid bodies. This is an internal function, meaning that it assumes the transform data is already up-to-date (should rarely be called by the outside).",
					string ReturnType = "real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetCenter",
					string Description = "Return a point deep inside the shape. Needed to initialize MPR and make some initial good guesses. Not commonly overridden in a derived collider type.",
					string ReturnType = "void",
					string Parameters = "(Vec3Ref center)",
					Array ParameterList = 
					[
						{
							string Name = "center",
							string Type = "Vec3Ref",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetColliderLocalCenterOfMass",
					string Description = "Returns the location of the local space center of mass for this collider. For all symmetric colliders this is the origin, but for non-symmetric colliders this can change. This is needed for computing a rigid body's mass and inertia properties.",
					string ReturnType = "Vec3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetOverlapRange",
					string Description = "Returns a range of local-space triangles that overlap the passed in local-space aabb.",
					string ReturnType = "RangeType",
					string Parameters = "(Aabb localAabb)",
					Array ParameterList = 
					[
						{
							string Name = "localAabb",
							string Type = "Aabb",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnMeshModified",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Event e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RebuildModifiedResources",
					string Description = "Check all resources used by this collider to see if they need to be updated. Called by several ""Get"" functions to force up-to-date information.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Support",
					string Description = "Support function for GJK/MPR or any other Minkowski difference algorithm. This sets the given support vector to the point (in world space) furthest in the given direction. Almost all colliders should implement this! The main exceptions are colliders that contain multiple primitives (such as MultiConvexMeshCollider ) in which case each primitive type should have this function.",
					string ReturnType = "void",
					string Parameters = "(Vec3 direction, Vec3Ptr support)",
					Array ParameterList = 
					[
						{
							string Name = "direction",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "support",
							string Type = "Vec3Ptr",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "MultiConvexMesh",
			string BaseClass = "Resource",
			string Description = "Represents a collection of convex meshes that was decomposed from a mesh.",
			Array Tags = 
			[
				"Resource",
				"Physics",
			],
			Array Properties = 
			[
				{
					string Name = "Aabb",
					string Type = "Aabb",
					string Description = "",
				},
				{
					string Name = "CenterOfMass",
					string Type = "Vec3",
					string Description = "Returns the center of mass of the entire multi-convex mesh. This value can be scaled later so it is computed once.",
				},
				{
					string Name = "Flags",
					string Type = "BitField<MultiConvexMeshFlags::Enum>",
					string Description = "This resource is not specific to 2d, but it does need to know what kind of resource it was for editing purposes (so we only edit a 2d mesh with the 2d mesh editor). Not currently used but more of an idea right now.",
				},
				{
					string Name = "Is2D",
					string Type = "bool",
					string Description = "",
				},
				{
					string Name = "Meshes",
					string Type = "SubMeshArray",
					string Description = "",
				},
				{
					string Name = "Vertices",
					string Type = "VertexArray",
					string Description = "",
				},
				{
					string Name = "Volume",
					string Type = "real",
					string Description = "Returns the volume of the entire multi-convex mesh. This value can be scaled later so it is computed once.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "CastRay",
					string Description = "Determines if a local-space ray hits any of the sub-meshes.",
					string ReturnType = "bool",
					string Parameters = "(const Ray localRay, ProxyResult result, BaseCastFilter filter)",
					Array ParameterList = 
					[
						{
							string Name = "localRay",
							string Type = "const Ray",
							string Description = "",
						},
						{
							string Name = "result",
							string Type = "ProxyResult",
							string Description = "",
						},
						{
							string Name = "filter",
							string Type = "BaseCastFilter",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeAabb",
					string Description = "",
					string ReturnType = "Aabb",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeCenterOfMassAndVolume",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeInvInertiaTensor",
					string Description = "The inertia tensor cannot be scaled later so it must be recomputed each time.",
					string ReturnType = "Mat3",
					string Parameters = "(Vec3 worldScale, real totalMass)",
					Array ParameterList = 
					[
						{
							string Name = "worldScale",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "totalMass",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CopyTo",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MultiConvexMesh destination)",
					Array ParameterList = 
					[
						{
							string Name = "destination",
							string Type = "MultiConvexMesh",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Draw",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Mat4Param transform, bool drawEdges, bool drawFaces)",
					Array ParameterList = 
					[
						{
							string Name = "transform",
							string Type = "Mat4Param",
							string Description = "",
						},
						{
							string Name = "drawEdges",
							string Type = "bool",
							string Description = "",
						},
						{
							string Name = "drawFaces",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldCenterOfMass",
					string Description = "",
					string ReturnType = "Vec3",
					string Parameters = "(Vec3 worldScale)",
					Array ParameterList = 
					[
						{
							string Name = "worldScale",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldVolume",
					string Description = "",
					string ReturnType = "real",
					string Parameters = "(Vec3 worldScale)",
					Array ParameterList = 
					[
						{
							string Name = "worldScale",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RebuildCachedInfo",
					string Description = "Rebuild all cached information for when the mesh has changed (center of mass, volume, aabb).",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnType = "Resource",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Save",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(string filename)",
					Array ParameterList = 
					[
						{
							string Name = "filename",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAndNotifyIfModified",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "BaseSprite",
			string BaseClass = "Graphical",
			string Description = "Base Sprite class for common sprite properties and sorting.",
			Array Tags = 
			[
				"Component",
				"Graphical",
			],
			Array Properties = 
			[
				{
					string Name = "GeometryMode",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "VertexColor",
					string Type = "Real4",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ComputeLocalToViewMatrix",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Mat4 localToView, Mat4 localToWorld, Mat4 worldToView)",
					Array ParameterList = 
					[
						{
							string Name = "localToView",
							string Type = "Mat4",
							string Description = "",
						},
						{
							string Name = "localToWorld",
							string Type = "Mat4",
							string Description = "",
						},
						{
							string Name = "worldToView",
							string Type = "Mat4",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultMaterial",
					string Description = "",
					string ReturnType = "Material",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LevelPath",
			string BaseClass = "Component",
			string Description = "A path that is anchored in the level that an object is able to follow.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Closed",
					string Type = "Boolean",
					string Description = "Does the path loop back on itself?",
				},
				{
					string Name = "CurveType",
					string Type = "Integer",
					string Description = "The kind of path (Linear, BSpline, CatmulRom). Determines how the control points affect the curve.",
				},
				{
					string Name = "DebugDraw",
					string Type = "Boolean",
					string Description = "Should the path draw every frame? Mainly used for debugging purposes so the intended path can be seen while an object moves.",
				},
				{
					string Name = "DisplayProxyControlPoints",
					string Type = "Boolean",
					string Description = "Should the proxy control points be displayed? Used for debugging purposes.",
				},
				{
					string Name = "Error",
					string Type = "Real",
					string Description = "The max number of units that a line segment is allowed to deviate from the curve.",
				},
				{
					string Name = "Path",
					string Type = "Path",
					string Description = "The path resource that can be followed and modified.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddPoint",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateProxy",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Vec3 worldPos, Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "worldPos",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DownloadResource",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Draw",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetPathArchetype",
					string Description = "",
					string ReturnType = "Path",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MarkModified",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAllObjectsCreated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnFrameUpdate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(UpdateEvent e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "UpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RecomputePath",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemovePoint",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetPathArchetype",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Path path)",
					Array ParameterList = 
					[
						{
							string Name = "path",
							string Type = "Path",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TransformUpdate",
					string Description = "Special function for transform updating from editor.",
					string ReturnType = "void",
					string Parameters = "(TransformUpdateInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "TransformUpdateInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateControlPoint",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer index, Vec3 pos)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "pos",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateProxies",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UploadResource",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetUserCreator",
			string BaseClass = "Component",
			string Description = "Network User Creator Creates a network user on add request (intended as a helper component)",
			Array Tags = 
			[
				"Networking",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "SpawnSpace",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "UserArchetype",
					string Type = "Archetype",
					string Description = "Returns the network user archetype to be spawned when accepting a new user.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Initialize",
					string Description = "Initializes the component.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnNetPeerReceivedUserAddRequest",
					string Description = "Called after receiving a net user add request.",
					string ReturnType = "void",
					string Parameters = "(NetPeerReceivedUserAddRequest event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "NetPeerReceivedUserAddRequest",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serializes the component.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ForceEffect",
			string BaseClass = "BasicDirectionEffect",
			string Description = "A force effect that is applied in a given direction (local or world space). This is used to create force regions that will push objects in a given direction. This can also be used on a rigid body to push an object in it's forward direction (e.g a missile) if applied locally. Note, this is always applied at the center of mass of the object. If a more rocket like effect is desired see ThrustEffect .",
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
			Array Properties = 
			[
			],
			Array Methods = 
			[
				{
					string Name = "ApplyEffect",
					string Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force).",
					string ReturnType = "void",
					string Parameters = "(RigidBody obj, real dt)",
					Array ParameterList = 
					[
						{
							string Name = "obj",
							string Type = "RigidBody",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Font",
			string BaseClass = "Resource",
			string Description = "",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "FontBlock",
					string Type = "DataBlock",
					string Description = "",
				},
				{
					string Name = "LoadPath",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "Rendered",
					string Type = "HashMap<Integer,RenderFont>",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "GetRenderFont",
					string Description = "",
					string ReturnType = "RenderFont",
					string Parameters = "(Integer size)",
					Array ParameterList = 
					[
						{
							string Name = "size",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "StickJoint",
			string BaseClass = "Joint",
			string Description = "A stick joint is used to simulate a rope or a stick. This joint forces a constant distance between the anchor points on the objects. If there is no limit, this behaves as a stick. If there is a limit, then this behaves as a rope. Motors and springs are also applied to the axis of the rope. Add on definitions: Limit: A limit will provide a min/max distance that the anchors can be between. Motor: A motor will push/pull the objects in the direction of the rope. The motor will not have any effect unless a limit or spring is present. Spring: A spring will make the rope behave springlike at its boundaries.",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "Length",
					string Type = "Real",
					string Description = "The desired length between the anchor points of object A and B.",
				},
				{
					string Name = "LocalPointA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "LocalPointB",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldPointA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldPointB",
					string Type = "Real3",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "BatchEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Commit",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComponentAdded",
					string Description = "Used to detect when motors/limits/springs are added dynamically.",
					string ReturnType = "void",
					string Parameters = "(TypeIdType typeId, Component component)",
					Array ParameterList = 
					[
						{
							string Name = "typeId",
							string Type = "TypeIdType",
							string Description = "",
						},
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeInitialConfiguration",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMoleculeData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeData moleculeData)",
					Array ParameterList = 
					[
						{
							string Name = "moleculeData",
							string Type = "MoleculeData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePositionMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAtomIndexFilter",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Integer atomIndex, real desiredConstraintValue)",
					Array ParameterList = 
					[
						{
							string Name = "atomIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "desiredConstraintValue",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultLimitIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultMotorIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultSpringIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PositionMoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Solve",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAtoms",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WarmStart",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "CustomPhysicsEffectEvent",
			string BaseClass = "",
			string Description = "Event data for applying custom physics effects.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Dt",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "Effect",
					string Type = "CustomPhysicsEffect",
					string Description = "",
				},
				{
					string Name = "RigidBody",
					string Type = "RigidBody",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "GridDraw",
			string BaseClass = "Component",
			string Description = "A component used for drawing a grid.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Active",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "AlwaysDrawInEditor",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Axis",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "CellSize",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "DrawAxisOrigins",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "DrawInGame",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "FollowEditorCamera",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "GridColor",
					string Type = "Real4",
					string Description = "",
				},
				{
					string Name = "GridHiLight",
					string Type = "Real4",
					string Description = "",
				},
				{
					string Name = "HalfCellOffset",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "HilightInterval",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "Lines",
					string Type = "Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Draw",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DrawLine",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnFrameUpdate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(UpdateEvent e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "UpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LockStepKeyEvent",
			string BaseClass = "",
			string Description = "A synced keyboard event.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "AltPressed",
					string Type = "bool",
					string Description = "Is alt pressed with this key?",
				},
				{
					string Name = "CtrlPressed",
					string Type = "bool",
					string Description = "Is ctrl pressed with this key?",
				},
				{
					string Name = "Key",
					string Type = "Integer",
					string Description = "Key that was changed.",
				},
				{
					string Name = "KeyDown",
					string Type = "bool",
					string Description = "State of the key.",
				},
				{
					string Name = "ShiftPressed",
					string Type = "bool",
					string Description = "Is shift pressed with this key?",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serialization of the event.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "IpAddress",
			string BaseClass = "SocketAddress",
			string Description = "IPv4/IPv6 network host identifier Provided for convenience Note: This class is not slice-able, it has extra data.",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "Hash",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "Host",
					string Type = "string",
					string Description = "Returns the valid IP address host as a numeric string, else String()",
				},
				{
					string Name = "InternetProtocol",
					string Type = "InternetProtocol",
					string Description = "Returns the valid IP address protocol version, else InternetProtocol::Unspecified.",
				},
				{
					string Name = "IsValid",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Port",
					string Type = "Integer",
					string Description = "Returns the valid IP address port, else 0.",
				},
				{
					string Name = "PortString",
					string Type = "string",
					string Description = "Returns the valid IP address port as a numeric string, else String()",
				},
				{
					string Name = "String",
					string Type = "string",
					string Description = "Returns the valid IP address as a numeric ""host:port"" string, else String()",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Clear",
					string Description = "Clears the IP address.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Hash",
					string Description = "Returns the valid IP address as a hash value, else 0.",
					string ReturnType = "size_t",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsValid",
					string Description = "Returns true if this is a non-empty IPv4/IPv6 address, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator=",
					string Description = "Copy Assignment Operators.",
					string ReturnType = "IpAddress",
					string Parameters = "(const IpAddress rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const IpAddress",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator=",
					string Description = "Copy Assignment Operator.",
					string ReturnType = "IpAddress",
					string Parameters = "(const SocketAddress rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const SocketAddress",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "JointEvent",
			string BaseClass = "",
			string Description = "Sent out when a joint signals some kind of event. For example, when a joint exceeds its force limit or when a joint hits a limit.",
			Array Tags = 
			[
				"Physics",
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Joint",
					string Type = "Joint",
					string Description = "The Joint that triggered the event.",
				},
				{
					string Name = "JointCog",
					string Type = "Cog",
					string Description = "Returns the Joint Cog that signaled the event.",
				},
				{
					string Name = "ObjectA",
					string Type = "Cog",
					string Description = "Get the ObjectA that was connected in the joint.",
				},
				{
					string Name = "ObjectB",
					string Type = "Cog",
					string Description = "Get the ObjectB that was connected in the joint.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LockStepGamepadButtonEvent",
			string BaseClass = "LockStepGamepadUpdateEvent",
			string Description = "A synced gamepad button event.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Button",
					string Type = "Integer",
					string Description = "The gamepad button that was changed.",
				},
				{
					string Name = "ButtonDown",
					string Type = "bool",
					string Description = "State of the gamepad button (if it was down or not)",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serialization of the event.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "DocumentResource",
			string BaseClass = "Resource",
			string Description = "Resource that can be edited as text and is searchable.",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "IncludedInCrash",
					string Type = "bool",
					string Description = "We need to only include a document once in a crash dump and to avoid allocations we store this on the document itself (it's only for crashes so whatever)",
				},
				{
					string Name = "LoadPath",
					string Type = "string",
					string Description = "Path this resource should use to load or save.",
				},
				{
					string Name = "PrimaryClassDefined",
					string Type = "string",
					string Description = "If this resource defines a class its typename.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "DocumentSetup",
					string Description = "Setup the Resource for searching and editing.",
					string ReturnType = "void",
					string Parameters = "(ResourceEntry entry, bool searchable)",
					Array ParameterList = 
					[
						{
							string Name = "entry",
							string Type = "ResourceEntry",
							string Description = "",
						},
						{
							string Name = "searchable",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetCodeInspector",
					string Description = "Gets a code inspector which is used for code completion and other code editing features.",
					string ReturnType = "ICodeInspector",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetEditType",
					string Description = "",
					string ReturnType = "ResourceEditType::Type",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetFormat",
					string Description = "What syntax editor is used for this text.",
					string ReturnType = "string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "LoadTextData",
					string Description = "Get all the text.",
					string ReturnType = "StringRange",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReloadData",
					string Description = "Save the text.",
					string ReturnType = "void",
					string Parameters = "(StringRange data)",
					Array ParameterList = 
					[
						{
							string Name = "data",
							string Type = "StringRange",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetAndSaveData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(StringRange data)",
					Array ParameterList = 
					[
						{
							string Name = "data",
							string Type = "StringRange",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateContentItem",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ContentItem contentItem)",
					Array ParameterList = 
					[
						{
							string Name = "contentItem",
							string Type = "ContentItem",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "UprightJoint",
			string BaseClass = "",
			string Description = "",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "LocalAxisA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "LocalAxisB",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldAxis",
					string Type = "Real3",
					string Description = "",
				},
			],
			Array Methods = 
			[
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetPeerReceivedConnectRequest",
			string BaseClass = "",
			string Description = "Dispatched after receiving a connect request If accepted, their net peer ID is assigned immediately after this Return true to accept the connect request, else false.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "OurIpAddress",
					string Type = "IpAddress",
					string Description = "",
				},
				{
					string Name = "ReturnOurConnectResponse",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "ReturnOurResponseBundle",
					string Type = "EventBundle",
					string Description = "",
				},
				{
					string Name = "TheirIpAddress",
					string Type = "IpAddress",
					string Description = "",
				},
				{
					string Name = "TheirPendingUserAddRequestCount",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "TheirRequestBundle",
					string Type = "EventBundle",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Gamepads",
			string BaseClass = "EventObject",
			string Description = "Gamepads is a collection of gamepads.",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "MaxGamepadCount",
					string Type = "Integer",
					string Description = "Gets the maximum number of supported gamepads.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "CheckGamepads",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetGamePad",
					string Description = "Get the gamepad for a given index from [0, GamepadCount].",
					string ReturnType = "Gamepad",
					string Parameters = "(Integer gamepadIndex)",
					Array ParameterList = 
					[
						{
							string Name = "gamepadIndex",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDeviceChanged",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Event event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnUpdate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(UpdateEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "UpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PauseVibration",
					string Description = "Pause Vibration on all gamepads.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ResumeVibration",
					string Description = "Resume vibration on all gamepads.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Startup",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Update",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ManipulatorJoint",
			string BaseClass = "Joint",
			string Description = "A position joint that is designed to manipulate one object. The only difference between this and the position joint is that the manipulator always draws itself, draws differently, and configures the max force differently.",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "LocalPoint",
					string Type = "Real3",
					string Description = "The local space point on the object that the joint is connected to.",
				},
				{
					string Name = "TargetPoint",
					string Type = "Real3",
					string Description = "The point in world space that the object's point is being moved towards.",
				},
				{
					string Name = "WorldPoint",
					string Type = "Real3",
					string Description = "The world space point on the object that the joint is connected to.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "BatchEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Commit",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMoleculeData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeData moleculeData)",
					Array ParameterList = 
					[
						{
							string Name = "moleculeData",
							string Type = "MoleculeData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePositionMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAtomIndexFilter",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Integer atomIndex, real desiredConstraintValue)",
					Array ParameterList = 
					[
						{
							string Name = "atomIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "desiredConstraintValue",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAllObjectsCreated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PositionMoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Solve",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAtoms",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WarmStart",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "TorqueEffect",
			string BaseClass = "PhysicsEffect",
			string Description = "Applies a general torque to the object (objects will act differently based on their mass).",
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "LocalTorque",
					string Type = "Boolean",
					string Description = "Determines if the directional torque is applied in world space or locally.",
				},
				{
					string Name = "TorqueDirection",
					string Type = "Real3",
					string Description = "The direction that the torque is being applied about.",
				},
				{
					string Name = "TorqueStrength",
					string Type = "Real",
					string Description = "The strength of the torque force being applied.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ApplyEffect",
					string Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force).",
					string ReturnType = "void",
					string Parameters = "(RigidBody obj, real dt)",
					Array ParameterList = 
					[
						{
							string Name = "obj",
							string Type = "RigidBody",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PreCalculate",
					string Description = "Some values can be pre-calculated once per frame instead of per body/object (local to world space directions, etc...)",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LockStepEvent",
			string BaseClass = "SendableEvent",
			string Description = "",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Peer",
					string Type = "LockStepPeer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "SkinnedModel",
			string BaseClass = "Graphical",
			string Description = "Model that used bones to deform a mesh.",
			Array Tags = 
			[
				"Component",
				"Graphical",
			],
			Array Properties = 
			[
				{
					string Name = "BoundingCenter",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "BoundingExtents",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "Mesh",
					string Type = "Mesh",
					string Description = "Mesh for skinned Model .",
				},
			],
			Array Methods = 
			[
				{
					string Name = "BoneSetup",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateBones",
					string Description = "Find or create bones.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ExtractFrameData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(FrameNode frameNode, FrameBlock frameBlock, Array<Mat4> matrixBuffer)",
					Array ParameterList = 
					[
						{
							string Name = "frameNode",
							string Type = "FrameNode",
							string Description = "",
						},
						{
							string Name = "frameBlock",
							string Type = "FrameBlock",
							string Description = "",
						},
						{
							string Name = "matrixBuffer",
							string Type = "Array<Mat4>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ExtractViewData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ViewNode viewNode, ViewBlock viewBlock, FrameBlock frameBlock)",
					Array ParameterList = 
					[
						{
							string Name = "viewNode",
							string Type = "ViewNode",
							string Description = "",
						},
						{
							string Name = "viewBlock",
							string Type = "ViewBlock",
							string Description = "",
						},
						{
							string Name = "frameBlock",
							string Type = "FrameBlock",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLocalAabb",
					string Description = "",
					string ReturnType = "Aabb",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetModelSpaceRoot",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAllObjectsCreated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TestRay",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(GraphicsRayCast rayCast)",
					Array ParameterList = 
					[
						{
							string Name = "rayCast",
							string Type = "GraphicsRayCast",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateBoneTransforms",
					string Description = "",
					string ReturnType = "IndexRange",
					string Parameters = "(Array<Mat4> matrixBuffer)",
					Array ParameterList = 
					[
						{
							string Name = "matrixBuffer",
							string Type = "Array<Mat4>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "BuoyancyEffect",
			string BaseClass = "PhysicsEffect",
			string Description = "Applies a buoyancy force to an object in a given direction.",
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "DebugDraw",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Density",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "Detail",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "Gravity",
					string Type = "Real3",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ApplyEffect",
					string Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force).",
					string ReturnType = "void",
					string Parameters = "(RigidBody obj, real dt)",
					Array ParameterList = 
					[
						{
							string Name = "obj",
							string Type = "RigidBody",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeOverlapPercent",
					string Description = "",
					string ReturnType = "Real",
					string Parameters = "(Collider collider, Vec3 volumeCenter)",
					Array ParameterList = 
					[
						{
							string Name = "collider",
							string Type = "Collider",
							string Description = "",
						},
						{
							string Name = "volumeCenter",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OverlapsRegion",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(Collider object)",
					Array ParameterList = 
					[
						{
							string Name = "object",
							string Type = "Collider",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PointInObject",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(Collider object, Vec3 point)",
					Array ParameterList = 
					[
						{
							string Name = "object",
							string Type = "Collider",
							string Description = "",
						},
						{
							string Name = "point",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "IgnoreSpaceEffects",
			string BaseClass = "Component",
			string Description = "Tells a cog to ignore certain effects on the space/level. Used to special case objects to ignore things such as drag or gravity.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "IgnoreBuoyancy",
					string Type = "Boolean",
					string Description = "Whether or not to ignore buoyancy effects.",
				},
				{
					string Name = "IgnoreCustom",
					string Type = "Boolean",
					string Description = "Whether or not to ignore custom effects.",
				},
				{
					string Name = "IgnoreDrag",
					string Type = "Boolean",
					string Description = "Whether or not to ignore drag effects.",
				},
				{
					string Name = "IgnoreFlow",
					string Type = "Boolean",
					string Description = "Whether or not to ignore flow effects.",
				},
				{
					string Name = "IgnoreForce",
					string Type = "Boolean",
					string Description = "Whether or not to ignore force effects.",
				},
				{
					string Name = "IgnoreGravity",
					string Type = "Boolean",
					string Description = "Whether or not to ignore gravity effects.",
				},
				{
					string Name = "IgnorePointForce",
					string Type = "Boolean",
					string Description = "Whether or not to ignore point force effects.",
				},
				{
					string Name = "IgnorePointGravity",
					string Type = "Boolean",
					string Description = "Whether or not to ignore point gravity effects.",
				},
				{
					string Name = "IgnoreThrust",
					string Type = "Boolean",
					string Description = "Whether or not to ignore thrust effects.",
				},
				{
					string Name = "IgnoreTorque",
					string Type = "Boolean",
					string Description = "Whether or not to ignore torque effects.",
				},
				{
					string Name = "IgnoreVortex",
					string Type = "Boolean",
					string Description = "Whether or not to ignore vortex effects.",
				},
				{
					string Name = "IgnoreWind",
					string Type = "Boolean",
					string Description = "Whether or not to ignore wind effects.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsIgnored",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(PhysicsEffect effect)",
					Array ParameterList = 
					[
						{
							string Name = "effect",
							string Type = "PhysicsEffect",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LockStepMouseButtonEvent",
			string BaseClass = "LockStepMouseEvent",
			string Description = "A synced mouse event.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Button",
					string Type = "MouseButtons::Type",
					string Description = "The mouse button that was changed.",
				},
				{
					string Name = "ButtonDown",
					string Type = "bool",
					string Description = "State of the mouse button (if it was down or not)",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serialization of the event.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "SpriteText",
			string BaseClass = "BaseSprite",
			string Description = "Sprite Text is sprite based text box.",
			Array Tags = 
			[
				"Component",
				"Graphical",
			],
			Array Properties = 
			[
				{
					string Name = "Align",
					string Type = "TextAlign",
					string Description = "",
				},
				{
					string Name = "Font",
					string Type = "Font",
					string Description = "Font used to display the text.",
				},
				{
					string Name = "FontSize",
					string Type = "Integer",
					string Description = "Font size for the text.",
				},
				{
					string Name = "PixelsPerUnit",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "Text",
					string Type = "string",
					string Description = "Text to Display.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ExtractFrameData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(FrameNode frameNode, FrameBlock frameBlock, Array<Mat4> matrixBuffer)",
					Array ParameterList = 
					[
						{
							string Name = "frameNode",
							string Type = "FrameNode",
							string Description = "",
						},
						{
							string Name = "frameBlock",
							string Type = "FrameBlock",
							string Description = "",
						},
						{
							string Name = "matrixBuffer",
							string Type = "Array<Mat4>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ExtractViewData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ViewNode viewNode, ViewBlock viewBlock, FrameBlock frameBlock)",
					Array ParameterList = 
					[
						{
							string Name = "viewNode",
							string Type = "ViewNode",
							string Description = "",
						},
						{
							string Name = "viewBlock",
							string Type = "ViewBlock",
							string Description = "",
						},
						{
							string Name = "frameBlock",
							string Type = "FrameBlock",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetCharacterPosition",
					string Description = "Get position of character in world space.",
					string ReturnType = "Vec3",
					string Parameters = "(Integer a)",
					Array ParameterList = 
					[
						{
							string Name = "a",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLocalAabb",
					string Description = "",
					string ReturnType = "Aabb",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLocalCenter",
					string Description = "",
					string ReturnType = "Vec2",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLocalWidths",
					string Description = "",
					string ReturnType = "Vec2",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MeasureGivenText",
					string Description = "Get the size that the sprite text would be if this was its text.",
					string ReturnType = "Vec2",
					string Parameters = "(string text)",
					Array ParameterList = 
					[
						{
							string Name = "text",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MeasureText",
					string Description = "Get the size of the text block.",
					string ReturnType = "Vec2",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "PhysicsCarWheel",
			string BaseClass = "Component",
			string Description = "A wheel for a high speed physics based car. Used to manage the connection to the car body. The wheel Contains most of the properties about how it interacts (eg. spring forces, friction etc).",
			Array Tags = 
			[
				"Physics",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "BodyWheelStartPos",
					string Type = "Real3",
					string Description = "The body position that wheel starts at.",
				},
				{
					string Name = "CarBody",
					string Type = "PhysicsCar",
					string Description = "The PhysicsCar component that this wheel drives/operates this wheel.",
				},
				{
					string Name = "ContactNormal",
					string Type = "Real3",
					string Description = "The normal of the surface where the wheel is currently in contact. Will be the zero vector if nothing is being contacted.",
				},
				{
					string Name = "ContactPoint",
					string Type = "Real3",
					string Description = "The point in world space where the wheel is currently in contact. Will be the zero vector if nothing is being contacted.",
				},
				{
					string Name = "ContactedObject",
					string Type = "Cog",
					string Description = "The object that this wheel is currently in contact with.",
				},
				{
					string Name = "DampeningCompressionRatio",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "DampeningRelaxationRatio",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "DriveFactor",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "ForwardDynamicFriction",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "ForwardImpulse",
					string Type = "Real",
					string Description = "The forward impulse (drive force) being exerted by the wheel.",
				},
				{
					string Name = "ForwardStaticFriction",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "FrequencyHz",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "Grip",
					string Type = "Real",
					string Description = "A coefficient from 0 to 1 that represents how much grip the wheel has.",
				},
				{
					string Name = "GripScalar",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "Is2DWheel",
					string Type = "Boolean",
					string Description = "If this wheel is designed to work in 2d mode. Ignores the side friction axis.",
				},
				{
					string Name = "IsDriveWheel",
					string Type = "Boolean",
					string Description = "If the wheel is a drive wheel, then it will turn when the gas is pressed on the car body.",
				},
				{
					string Name = "IsInContact",
					string Type = "Boolean",
					string Description = "If the wheel is currently in contact with an object.",
				},
				{
					string Name = "IsSliding",
					string Type = "Boolean",
					string Description = "If the wheel is currently sliding. This means that the wheel is slipping due to exerting too high of a force for what static friction is.",
				},
				{
					string Name = "MaxBrakeStrength",
					string Type = "Real",
					string Description = "The max force that this wheel can exert with its breaks.",
				},
				{
					string Name = "MaxSpringCompressionDistance",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "MaxSpringForce",
					string Type = "Real",
					string Description = "The maximum force that the wheel's spring can exert.",
				},
				{
					string Name = "MaxSpringRelaxationDistance",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "NormalImpulse",
					string Type = "Real",
					string Description = "The normal impulse (spring force) being exerted by the wheel.",
				},
				{
					string Name = "PreRotation",
					string Type = "Quaternion",
					string Description = "Used to rotate the wheel before taking into account it's transform. Currently used to rotate cylinders that define +y as default to +x being default.",
				},
				{
					string Name = "Radius",
					string Type = "Real",
					string Description = "The radius of the wheel.",
				},
				{
					string Name = "Rotation",
					string Type = "Real",
					string Description = "The current rotation of the wheel in radians about it's axle.",
				},
				{
					string Name = "RotationalVelocity",
					string Type = "Real",
					string Description = "The current rotational velocity of the wheel about it's axle.",
				},
				{
					string Name = "SideDynamicFriction",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "SideImpulse",
					string Type = "Real",
					string Description = "The side impulse (side friction) being exerted by the wheel.",
				},
				{
					string Name = "SideStaticFriction",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "SpringLength",
					string Type = "Real",
					string Description = "The current length of the spring.",
				},
				{
					string Name = "SpringMax",
					string Type = "Real",
					string Description = "The maximum length of the spring of the wheel. If the wheel hits something further away than this length (plus the wheel radius) then that object will be ignored.",
				},
				{
					string Name = "SpringMin",
					string Type = "Real",
					string Description = "The minimum length of the spring of the wheel. If a wheel cast hits an object at a time before min but after start then the wheel will still collide with this object but the spring forces and visuals will be at the min spring length. This is useful for putting the starting raycast position inside of the object so as to avoid tunneling but still having the wheel only visually display where it should.",
				},
				{
					string Name = "SpringRest",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "SpringStart",
					string Type = "Real",
					string Description = "The t value to start the raycast at. This t value is 0 at the wheel position and travels in the direction of the wheel spring direction. This value is useful to modify where the start of the raycast is in conjunction with the min flag to help ensure that the start position is never inside of an object due to tunneling.",
				},
				{
					string Name = "SteerFactor",
					string Type = "Real",
					string Description = "How much this wheel steers. [0:1] where 1 is the max steering of the car.",
				},
				{
					string Name = "WorldAngularVelocity",
					string Type = "Real3",
					string Description = "The axis that represents the world angular velocity of the wheel.",
				},
				{
					string Name = "WorldAxleAxis",
					string Type = "Real3",
					string Description = "The current axis of the wheel's axle in world space.",
				},
				{
					string Name = "WorldForwardAxis",
					string Type = "Real3",
					string Description = "The current axis of the wheel's forward in world space.",
				},
				{
					string Name = "WorldLinearVelocity",
					string Type = "Real3",
					string Description = "The velocity of the center of the wheel having taken into account the car's velocity.",
				},
				{
					string Name = "WorldSpringAxis",
					string Type = "Real3",
					string Description = "The current axis of the wheel's spring in world space.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ApplySpringForce",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AttachTo",
					string Description = "Signal that the Cog has been attached to another Cog .",
					string ReturnType = "void",
					string Parameters = "(AttachmentInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "AttachmentInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "BeginIteration",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CalculateImpulse",
					string Description = "",
					string ReturnType = "real",
					string Parameters = "(Vec3 dir, Vec3 relativeVelocity)",
					Array ParameterList = 
					[
						{
							string Name = "dir",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "relativeVelocity",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CalculateRotationalVelocity",
					string Description = "",
					string ReturnType = "real",
					string Parameters = "(Vec3 dir, Vec3 relativeVelocity)",
					Array ParameterList = 
					[
						{
							string Name = "dir",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "relativeVelocity",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CalculateSpringForce",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CastWheelPosition",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Detached",
					string Description = "Signal that the Cog has been detached from another Cog .",
					string ReturnType = "void",
					string Parameters = "(AttachmentInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "AttachmentInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "EditBasis",
					string Description = "Spawns a proxy transform object so that the basis of the car can be set.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FinishedIteration",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FixChildState",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Cog parent)",
					Array ParameterList = 
					[
						{
							string Name = "parent",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetRelativeVelocity",
					string Description = "",
					string ReturnType = "Vec3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InternalFrictionCalculation",
					string Description = "",
					string ReturnType = "real",
					string Parameters = "(Vec3 dir, ConstraintInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "dir",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "info",
							string Type = "ConstraintInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAllObjectsCreated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetWheelBasis",
					string Description = "Sets what directions the forward, axle and spring are on the wheel. The forward direction is taken from the x-axis of the basis passed in. Likewise the axle is from the y-axis and the spring is from the z-axis. Use BuildFromBases on quaternion to construct this.",
					string ReturnType = "void",
					string Parameters = "(QuatParam basis)",
					Array ParameterList = 
					[
						{
							string Name = "basis",
							string Type = "QuatParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetWheelBasisFromMat3",
					string Description = "Sets what directions the forward, axle and spring are on the wheel. The forward direction is taken from the x-axis of the basis passed in. Likewise the axle is from the y-axis and the spring is from the z-axis.",
					string ReturnType = "void",
					string Parameters = "(Mat3Param basis)",
					Array ParameterList = 
					[
						{
							string Name = "basis",
							string Type = "Mat3Param",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SolveFrictionImpulse",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TransformUpdate",
					string Description = "Special function for transform updating from editor.",
					string ReturnType = "void",
					string Parameters = "(TransformUpdateInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "TransformUpdateInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateLocalPointOnCar",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdatePreRotationOnCar",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateTransformRelativeToParent",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateWheelBasis",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(TransformProxyObjectEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "TransformProxyObjectEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateWheelData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateWheelTransform",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "AcquireNetHostInfo",
			string BaseClass = "",
			string Description = "Dispatched when the net peer host is acquiring project-specific host information.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "ReturnHostInfo",
					string Type = "EventBundle",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetPeerReceivedConnectResponse",
			string BaseClass = "",
			string Description = "Dispatched after receiving a connect response If accepted, our net peer ID is set immediately before this and a connect confirmation is sent after this If denied, our net peer ID is cleared and link is destroyed immediately after this.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "OurIpAddress",
					string Type = "IpAddress",
					string Description = "",
				},
				{
					string Name = "OurNetPeerId",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "OurPendingUserAddRequestCount",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "OurRequestBundle",
					string Type = "EventBundle",
					string Description = "",
				},
				{
					string Name = "TheirConnectResponse",
					string Type = "ConnectResponse",
					string Description = "",
				},
				{
					string Name = "TheirIpAddress",
					string Type = "IpAddress",
					string Description = "",
				},
				{
					string Name = "TheirResponseBundle",
					string Type = "EventBundle",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "GraphicalEvent",
			string BaseClass = "",
			string Description = "Graphical Event for visibility.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "ViewingObject",
					string Type = "Cog",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ParticleTorusRoller",
			string BaseClass = "ParticleAnimator",
			string Description = "",
			Array Tags = 
			[
				"Particle",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "MajorRadius",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "Speed",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Animate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ParticleList particleList, Real dt, Mat4Ref transform)",
					Array ParameterList = 
					[
						{
							string Name = "particleList",
							string Type = "ParticleList",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "transform",
							string Type = "Mat4Ref",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "GameEvent",
			string BaseClass = "",
			string Description = "Event type used by the GameSession .",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Game",
					string Type = "GameSession",
					string Description = "",
				},
				{
					string Name = "Handled",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "LevelName",
					string Type = "string",
					string Description = "Name of the current level.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "RevoluteJoint2d",
			string BaseClass = "Joint",
			string Description = "A revolute joint is used to create a wheel or a hinge. This is the 2d version of the revolute joint. This joint is used in 2d mode for increased speed and stability. The motor axis is automatically set to the z axis, as that is the only axis objects can rotate upon. Also, the translation on the z axis is ignored so that objects can be arbitrarily far apart. Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Motor: A motor will turn the objects about the motor axis. Spring: A spring will make the motor axis springy at the limits.",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "LocalPointA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "LocalPointB",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldPointA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldPointB",
					string Type = "Real3",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "BatchEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Commit",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComponentAdded",
					string Description = "Used to detect when motors/limits/springs are added dynamically.",
					string ReturnType = "void",
					string Parameters = "(TypeIdType typeId, Component component)",
					Array ParameterList = 
					[
						{
							string Name = "typeId",
							string Type = "TypeIdType",
							string Description = "",
						},
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeInitialConfiguration",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMoleculeData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeData moleculeData)",
					Array ParameterList = 
					[
						{
							string Name = "moleculeData",
							string Type = "MoleculeData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePositionMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAtomIndexFilter",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Integer atomIndex, real desiredConstraintValue)",
					Array ParameterList = 
					[
						{
							string Name = "atomIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "desiredConstraintValue",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultLimitIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultMotorIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultSpringIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetJointAngle",
					string Description = "",
					string ReturnType = "real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldAxis",
					string Description = "",
					string ReturnType = "Vec3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PositionMoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Solve",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAtoms",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WarmStart",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "JointLimit",
			string BaseClass = "Component",
			string Description = "A limit for a joint. Used to add a min/max bounds to a joint. When the joint is in between the min/max bounds, the ""limited"" portion will be ignored (The stick will not solve when it is in between the bounds, making it a rope). See each joint for a description of how it reacts to a limit.",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "Active",
					string Type = "Boolean",
					string Description = "Determines if this limit is currently active.",
				},
				{
					string Name = "AtomIds",
					string Type = "Integer",
					string Description = "Signifies what atoms on the joint this effects.",
				},
				{
					string Name = "LowerLimit",
					string Type = "Real",
					string Description = "The lower bound for this limit. See wiki for each joint's details.",
				},
				{
					string Name = "UpperLimit",
					string Type = "Real",
					string Description = "The upper bound for this limit. See wiki for each joint's details.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "GetAtLowerLimit",
					string Description = "Are we currently at the lower limit?",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAtUpperLimit",
					string Description = "Are we currently at the upper limit?",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAtomIndexActive",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(Integer atomIndexMask)",
					Array ParameterList = 
					[
						{
							string Name = "atomIndexMask",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWasAtLowerLimit",
					string Description = "Were we at the lower limit last frame? Used to only send out a ""start"" event for hitting the limit.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWasAtUpperLimit",
					string Description = "Were we at the upper limit last frame? Used to only send out a ""start"" event for hitting the limit.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsValid",
					string Description = "Has this joint been initialized with a valid joint. Also used to deal with calling sets in serialize.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetAtLowerLimit",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(bool state)",
					Array ParameterList = 
					[
						{
							string Name = "state",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetAtUpperLimit",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(bool state)",
					Array ParameterList = 
					[
						{
							string Name = "state",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetWasAtLowerLimit",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(bool state)",
					Array ParameterList = 
					[
						{
							string Name = "state",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetWasAtUpperLimit",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(bool state)",
					Array ParameterList = 
					[
						{
							string Name = "state",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Graphical",
			string BaseClass = "Component",
			string Description = "Graphical Component is in graphical broad phase / visibility.",
			Array Tags = 
			[
				"Component",
				"Graphical",
			],
			Array Properties = 
			[
				{
					string Name = "Material",
					string Type = "Material",
					string Description = "",
				},
				{
					string Name = "ShaderInputs",
					string Type = "ShaderInputs",
					string Description = "",
				},
				{
					string Name = "ViewCulling",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "VisibilityEvents",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Visible",
					string Type = "Boolean",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddComponentShaderInputs",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Component component)",
					Array ParameterList = 
					[
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AttachTo",
					string Description = "Signal that the Cog has been attached to another Cog .",
					string ReturnType = "void",
					string Parameters = "(AttachmentInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "AttachmentInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComponentAdded",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(TypeIdType typeId, Component component)",
					Array ParameterList = 
					[
						{
							string Name = "typeId",
							string Type = "TypeIdType",
							string Description = "",
						},
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComponentRemoved",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(TypeIdType typeId, Component component)",
					Array ParameterList = 
					[
						{
							string Name = "typeId",
							string Type = "TypeIdType",
							string Description = "",
						},
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Detached",
					string Description = "Signal that the Cog has been detached from another Cog .",
					string ReturnType = "void",
					string Parameters = "(AttachmentInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "AttachmentInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ExtractFrameData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(FrameNode frameNode, FrameBlock frameBlock, Array<Mat4> matrixBuffer)",
					Array ParameterList = 
					[
						{
							string Name = "frameNode",
							string Type = "FrameNode",
							string Description = "",
						},
						{
							string Name = "frameBlock",
							string Type = "FrameBlock",
							string Description = "",
						},
						{
							string Name = "matrixBuffer",
							string Type = "Array<Mat4>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ExtractViewData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ViewNode viewNode, ViewBlock viewBlock, FrameBlock frameBlock)",
					Array ParameterList = 
					[
						{
							string Name = "viewNode",
							string Type = "ViewNode",
							string Description = "",
						},
						{
							string Name = "viewBlock",
							string Type = "ViewBlock",
							string Description = "",
						},
						{
							string Name = "frameBlock",
							string Type = "FrameBlock",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAabb",
					string Description = "",
					string ReturnType = "Aabb",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultMaterial",
					string Description = "",
					string ReturnType = "Material",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLocalAabb",
					string Description = "",
					string ReturnType = "Aabb",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetObb",
					string Description = "",
					string ReturnType = "Obb",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MidPhaseQuery",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Array<GraphicalEntry> entries, Camera camera, Frustum frustum)",
					Array ParameterList = 
					[
						{
							string Name = "entries",
							string Type = "Array<GraphicalEntry>",
							string Description = "",
						},
						{
							string Name = "camera",
							string Type = "Camera",
							string Description = "",
						},
						{
							string Name = "frustum",
							string Type = "Frustum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnMaterialModified",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ResourceEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "ResourceEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnMetaModified",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaTypeEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "MetaTypeEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RebuildComponentShaderInputs",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TestFrustum",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(const Frustum frustum)",
					Array ParameterList = 
					[
						{
							string Name = "frustum",
							string Type = "const Frustum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TestRay",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(GraphicsRayCast rayCast)",
					Array ParameterList = 
					[
						{
							string Name = "rayCast",
							string Type = "GraphicsRayCast",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TransformUpdate",
					string Description = "Special function for transform updating from editor.",
					string ReturnType = "void",
					string Parameters = "(TransformUpdateInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "TransformUpdateInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateBroadPhaseAabb",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "PhysicsMaterial",
			string BaseClass = "DataResource",
			string Description = "Describes material properties of a collider. The material properties are mainly used during collision resolution.",
			Array Tags = 
			[
				"Resource",
				"Physics",
			],
			Array Properties = 
			[
				{
					string Name = "Density",
					string Type = "Real",
					string Description = "Density is used to determine the mass of an object. Mass is computed as density * volume. Density can be set to 0 exactly to produce a massless object, however this should only be done with children objects to add collision without affecting mass.",
				},
				{
					string Name = "Friction",
					string Type = "Real",
					string Description = "How slippery or rough the object is. When friction is 0 the object will be slippery. As friction increases sliding objects will stop quicker. The friction of two object's are combined with the formula sqrt(a * b).",
				},
				{
					string Name = "HighPriority",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Restitution",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "CopyTo",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(PhysicsMaterial destination)",
					Array ParameterList = 
					[
						{
							string Name = "destination",
							string Type = "PhysicsMaterial",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ResourceModified",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnType = "Resource",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDensityInternal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(real density, bool markModified)",
					Array ParameterList = 
					[
						{
							string Name = "density",
							string Type = "real",
							string Description = "",
						},
						{
							string Name = "markModified",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAndNotifyIfModified",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Reactive",
			string BaseClass = "Component",
			string Description = "Reactive component allows the object to react to mouse events. Uses the collision volume of the collider on this composition for picking.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Active",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "CaptureMouse",
					string Type = "Boolean",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnLeftMouseDown",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MouseEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "MouseEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnLeftMouseUp",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MouseEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "MouseEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnMiddleMouseDown",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MouseEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "MouseEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnMiddleMouseUp",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MouseEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "MouseEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnRightMouseDown",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MouseEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "MouseEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnRightMouseUp",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MouseEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "MouseEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "WeldJoint",
			string BaseClass = "Joint",
			string Description = "A weld joint is used to lock to position and orientation of two objects together. This can be useful to lock two objects together. However, welds should generally not be used as they are computationally more expensive and less rigid than using composites. The only uses for welds are for quick connections or connections that are desired to not be fully rigid. Also, while it can be done with composites too, welds can be used to model the breaking apart of two objects. Limits, motors and springs should most likely not be used on this. Add on definitions: Limit: A limit will provide a min/max translation on the x,y and z axes. Motor: A motor will attempt to drive the rotation on the x,y and z axes. Spring: A spring will make the x,y and z axis springy.",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "LocalAngleA",
					string Type = "Quaternion",
					string Description = "",
				},
				{
					string Name = "LocalAngleB",
					string Type = "Quaternion",
					string Description = "",
				},
				{
					string Name = "LocalPointA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "LocalPointB",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldPointA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldPointB",
					string Type = "Real3",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "BatchEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Commit",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeInitialConfiguration",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMoleculeData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeData moleculeData)",
					Array ParameterList = 
					[
						{
							string Name = "moleculeData",
							string Type = "MoleculeData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePositionMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAtomIndexFilter",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Integer atomIndex, real desiredConstraintValue)",
					Array ParameterList = 
					[
						{
							string Name = "atomIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "desiredConstraintValue",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultLimitIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultMotorIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultSpringIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PositionMoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Solve",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAtoms",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WarmStart",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "MassOverride",
			string BaseClass = "Component",
			string Description = "Takes a snap shot of the current mass and inertia and overrides the object's mass so it can be resized while keeping it's old mass.",
			Array Tags = 
			[
				"Physics",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Active",
					string Type = "Boolean",
					string Description = "Determines whether the RigidBody on this component will use this mass and inertia or it's actual mass and inertia.",
				},
				{
					string Name = "AutoComputeCenterOfMass",
					string Type = "Boolean",
					string Description = "Should the center of mass be auto computed or overwritten (via script).",
				},
				{
					string Name = "AutoComputeInertia",
					string Type = "Boolean",
					string Description = "Should the inertia tensor be auto computed or overwritten (via script).",
				},
				{
					string Name = "InverseMass",
					string Type = "Real",
					string Description = "The inverse mass the object is saved with.",
				},
				{
					string Name = "LocalCenterOfMass",
					string Type = "Real3",
					string Description = "The center of mass in local space to override with. When the set function is called the center of mass will be locked to this value until AutoCmoputeCenterOfMass is set to true.",
				},
				{
					string Name = "LocalInverseInertiaTensor",
					string Type = "Real3x3",
					string Description = "The inverse inertia tensor the object is saved with.",
				},
				{
					string Name = "Mass",
					string Type = "Real",
					string Description = "Allow the user to set the mass. Overrides the inertia as a ratio of the new mass to the old mass.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ClampMassTerm",
					string Description = "",
					string ReturnType = "real",
					string Parameters = "(real value)",
					Array ParameterList = 
					[
						{
							string Name = "value",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsSerialized",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "QueueUpdate",
					string Description = "If possible, this queues an update on the rigid body to recompute mass properties.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RecomputeMass",
					string Description = "Takes a new snapshot of the current mass and inertia.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetInverseMassInternal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(real invMass)",
					Array ParameterList = 
					[
						{
							string Name = "invMass",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetLocalInverseInertiaTensorInternal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Mat3Param invInertia)",
					Array ParameterList = 
					[
						{
							string Name = "invInertia",
							string Type = "Mat3Param",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetMassInternal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(real mass)",
					Array ParameterList = 
					[
						{
							string Name = "mass",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateMassAndInertia",
					string Description = "Given a new inverse mass, this updates the mass and inertia (inertia as a ratio of old to new mass)",
					string ReturnType = "void",
					string Parameters = "(real invMass)",
					Array ParameterList = 
					[
						{
							string Name = "invMass",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "CogInitializerEvent",
			string BaseClass = "",
			string Description = "",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "CogInitializer",
					string Type = "CogInitializer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "MetaDropEvent",
			string BaseClass = "",
			string Description = "MetaDropEvent for dropping MetaObjects.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Failed",
					string Type = "bool",
					string Description = "",
				},
				{
					string Name = "Handled",
					string Type = "bool",
					string Description = "",
				},
				{
					string Name = "MouseEvent",
					string Type = "MouseEvent",
					string Description = "",
				},
				{
					string Name = "MouseOverObject",
					string Type = "MetaObjectInstance",
					string Description = "",
				},
				{
					string Name = "Object",
					string Type = "PlasmaObject",
					string Description = "",
				},
				{
					string Name = "Position",
					string Type = "Vec2",
					string Description = "",
				},
				{
					string Name = "Result",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "Testing",
					string Type = "bool",
					string Description = "",
				},
				{
					string Name = "ViewportMouseEvent",
					string Type = "ViewportMouseEvent",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetHostUpdate",
			string BaseClass = "",
			string Description = "Dispatched when a host discovery operation update occurs.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Host",
					string Type = "NetHost",
					string Description = "",
				},
				{
					string Name = "Network",
					string Type = "Network",
					string Description = "",
				},
				{
					string Name = "RefreshResult",
					string Type = "NetRefreshResult",
					string Description = "",
				},
				{
					string Name = "ResponseTime",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetLinkDisconnected",
			string BaseClass = "",
			string Description = "Dispatched after sending or receiving a disconnect notice Their net peer ID is released and link is destroyed immediately after this.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Direction",
					string Type = "TransmissionDirection",
					string Description = "",
				},
				{
					string Name = "DisconnectReason",
					string Type = "DisconnectReason",
					string Description = "",
				},
				{
					string Name = "RequestBundle",
					string Type = "EventBundle",
					string Description = "",
				},
				{
					string Name = "TheirIpAddress",
					string Type = "IpAddress",
					string Description = "",
				},
				{
					string Name = "TheirNetPeerId",
					string Type = "Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "CapsuleCollider",
			string BaseClass = "Collider",
			string Description = "Capsule Collider is a basic collision primitive of a capsule.",
			Array Tags = 
			[
				"Physics",
				"Collider",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Direction",
					string Type = "AxisDirection",
					string Description = "The direction that the height is defined along. Allows the user to change whether the capsule's height is along the x, y, or z axis.",
				},
				{
					string Name = "Height",
					string Type = "Real",
					string Description = "The local space distance from the center of one sphere to another.",
				},
				{
					string Name = "Radius",
					string Type = "Real",
					string Description = "The local space radius of the spheres at the capsule edges.",
				},
				{
					string Name = "ScalingMode",
					string Type = "CapsuleScalingMode",
					string Description = "How should non-uniform scale affect the capsules size. Should a scale of 2 on the height axis double the total capsule size or should it double the capsule height?",
				},
				{
					string Name = "WorldCylinderHeight",
					string Type = "Real",
					string Description = "The full height of the capsule's cylinder after the scale is applied (world distance from one sphere to another).",
				},
				{
					string Name = "WorldRadius",
					string Type = "Real",
					string Description = "The radius of the sphere caps after scale is applied.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "CacheWorldValues",
					string Description = "Gives any derived collider a chance to cache world-space values (e.g. SphereCollider.WorldRadius)",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeLocalInverseInertiaTensor",
					string Description = "Computes the local space (as in not rotated, the scale is still necessary but the translation is assumed to be zero) inertia tensor from the passed in mass.",
					string ReturnType = "void",
					string Parameters = "(real mass, Mat3Ref localInvInertia)",
					Array ParameterList = 
					[
						{
							string Name = "mass",
							string Type = "real",
							string Description = "",
						},
						{
							string Name = "localInvInertia",
							string Type = "Mat3Ref",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldAabbInternal",
					string Description = "Computes the world-space aabb. This is always called after CacheWorldValues has been called. This must be implemented on each collider type. The helper function 'SetWorldAabbFromHalfExtents' exists to compute the aabb from the current rotation and translation with the given world scale half-extent of an aabb.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldBoundingSphereInternal",
					string Description = "Compute the world-space bounding sphere. See ComputeWorldAabb for a description of when and why this is called (but for a sphere). The default behavior is to take the sphere centered at the object's translation with a radius to the furthest away point.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldPoints",
					string Description = "Computes the center points of both sphere caps.",
					string ReturnType = "void",
					string Parameters = "(Vec3Ref pointA, Vec3Ref pointB)",
					Array ParameterList = 
					[
						{
							string Name = "pointA",
							string Type = "Vec3Ref",
							string Description = "",
						},
						{
							string Name = "pointB",
							string Type = "Vec3Ref",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldVolumeInternal",
					string Description = "Compute the volume of this collider in world space. This must be calculated in world space as there's no generic way to scale volume after-the-fact. All colliders that contain a volume should implement this. Some colliders (e.g. HeightMap or Mesh ) don't as they aren't meant to work with rigid bodies. This is an internal function, meaning that it assumes the transform data is already up-to-date (should rarely be called by the outside).",
					string ReturnType = "real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetHeightIndex",
					string Description = "The index of the height axis.",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetRadiiIndices",
					string Description = "The index of both radius axes.",
					string ReturnType = "void",
					string Parameters = "(Integer rIndex0, Integer rIndex1)",
					Array ParameterList = 
					[
						{
							string Name = "rIndex0",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "rIndex1",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldCylinderHalfHeight",
					string Description = "The half height of the capsule's cylinder after scale is applied (distance from center to a sphere radius).",
					string ReturnType = "real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Support",
					string Description = "Support function for GJK/MPR or any other Minkowski difference algorithm. This sets the given support vector to the point (in world space) furthest in the given direction. Almost all colliders should implement this! The main exceptions are colliders that contain multiple primitives (such as MultiConvexMeshCollider ) in which case each primitive type should have this function.",
					string ReturnType = "void",
					string Parameters = "(Vec3 direction, Vec3Ptr support)",
					Array ParameterList = 
					[
						{
							string Name = "direction",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "support",
							string Type = "Vec3Ptr",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "AnimationSet",
			string BaseClass = "Resource",
			string Description = "Set of animations.",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "AnimationNames",
					string Type = "Array<string>",
					string Description = "",
				},
				{
					string Name = "Animations",
					string Type = "Array<Animation>",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Initialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer serializer)",
					Array ParameterList = 
					[
						{
							string Name = "serializer",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "SoundSpace",
			string BaseClass = "Component",
			string Description = "SoundSpace component provides sound for a space.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Pause",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "PauseWithLevel",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Pitch",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "PitchSemitones",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "Volume",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "VolumeDecibels",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddListenerToOutput",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Audio::ListenerNode node)",
					Array ParameterList = 
					[
						{
							string Name = "node",
							string Type = "Audio::ListenerNode",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddPitchNode",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetListeners",
					string Description = "",
					string ReturnType = "InList<SoundListener>",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeForPreviewing",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InterpolatePitch",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Real pitch, Real time)",
					Array ParameterList = 
					[
						{
							string Name = "pitch",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "time",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InterpolatePitchSemitones",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Real pitch, Real time)",
					Array ParameterList = 
					[
						{
							string Name = "pitch",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "time",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InterpolateVolume",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Real value, Real interpolationTime)",
					Array ParameterList = 
					[
						{
							string Name = "value",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "interpolationTime",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InterpolateVolumeDecibels",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Real decibels, Real interpolationTime)",
					Array ParameterList = 
					[
						{
							string Name = "decibels",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "interpolationTime",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PlayCue",
					string Description = "",
					string ReturnType = "SoundInstance",
					string Parameters = "(SoundCue cue)",
					Array ParameterList = 
					[
						{
							string Name = "cue",
							string Type = "SoundCue",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PrintAudioStartupMessage",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "StopAllSounds",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Update",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ScaleGizmo",
			string BaseClass = "Component",
			string Description = "",
			Array Tags = 
			[
				"Component",
				"Gizmo",
			],
			Array Properties = 
			[
				{
					string Name = "SnapDistance",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "SnapMode",
					string Type = "GizmoSnapMode",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnGizmoModified",
					string Description = "As the gizmo is being dragged, we want to update all objects.",
					string ReturnType = "void",
					string Parameters = "(GizmoUpdateEvent e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "GizmoUpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnMouseDragStart",
					string Description = "Record where a gizmo drag began.",
					string ReturnType = "void",
					string Parameters = "(ViewportMouseEvent e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "ViewportMouseEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "MeshCollider",
			string BaseClass = "Collider",
			string Description = "Mesh Collider is a collision primitive for colliding with a non-moving triangle mesh.",
			Array Tags = 
			[
				"Physics",
				"Collider",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "DrawEdges",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "DrawFaceNormals",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "DrawFaces",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "PhysicsMesh",
					string Type = "PhysicsMesh",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Cast",
					string Description = "This is a specialization of Ray vs. HeightMap that goes through the internal mid-phase with an optimized ray-tracing algorithm instead of the generic GetOverlapAabb function. Note: the ray here is expected to be in this cog's local space.",
					string ReturnType = "bool",
					string Parameters = "(const Ray localRay, ProxyResult result, BaseCastFilter filter)",
					Array ParameterList = 
					[
						{
							string Name = "localRay",
							string Type = "const Ray",
							string Description = "",
						},
						{
							string Name = "result",
							string Type = "ProxyResult",
							string Description = "",
						},
						{
							string Name = "filter",
							string Type = "BaseCastFilter",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeLocalInverseInertiaTensor",
					string Description = "Computes the local space (as in not rotated, the scale is still necessary but the translation is assumed to be zero) inertia tensor from the passed in mass.",
					string ReturnType = "void",
					string Parameters = "(real mass, Mat3Ref localInvInertia)",
					Array ParameterList = 
					[
						{
							string Name = "mass",
							string Type = "real",
							string Description = "",
						},
						{
							string Name = "localInvInertia",
							string Type = "Mat3Ref",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldAabbInternal",
					string Description = "Computes the world-space aabb. This is always called after CacheWorldValues has been called. This must be implemented on each collider type. The helper function 'SetWorldAabbFromHalfExtents' exists to compute the aabb from the current rotation and translation with the given world scale half-extent of an aabb.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldVolumeInternal",
					string Description = "Compute the volume of this collider in world space. This must be calculated in world space as there's no generic way to scale volume after-the-fact. All colliders that contain a volume should implement this. Some colliders (e.g. HeightMap or Mesh ) don't as they aren't meant to work with rigid bodies. This is an internal function, meaning that it assumes the transform data is already up-to-date (should rarely be called by the outside).",
					string ReturnType = "real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetOverlapRange",
					string Description = "Returns a range of local-space triangles that overlap the passed in local-space aabb.",
					string ReturnType = "RangeType",
					string Parameters = "(Aabb localAabb)",
					Array ParameterList = 
					[
						{
							string Name = "localAabb",
							string Type = "Aabb",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnMeshModified",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Event e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RebuildModifiedResources",
					string Description = "Check all resources used by this collider to see if they need to be updated. Called by several ""Get"" functions to force up-to-date information.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Support",
					string Description = "Support function for GJK/MPR or any other Minkowski difference algorithm. This sets the given support vector to the point (in world space) furthest in the given direction. Almost all colliders should implement this! The main exceptions are colliders that contain multiple primitives (such as MultiConvexMeshCollider ) in which case each primitive type should have this function.",
					string ReturnType = "void",
					string Parameters = "(Vec3 direction, Vec3Ptr support)",
					Array ParameterList = 
					[
						{
							string Name = "direction",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "support",
							string Type = "Vec3Ptr",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "SimpleGizmoBase",
			string BaseClass = "Component",
			string Description = "",
			Array Tags = 
			[
				"Component",
				"Gizmo",
			],
			Array Properties = 
			[
				{
					string Name = "Color",
					string Type = "Real4",
					string Description = "",
				},
				{
					string Name = "DrawOnTop",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "HoverColor",
					string Type = "Real4",
					string Description = "",
				},
				{
					string Name = "MouseInput",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "PickingPriority",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "UseParentAsViewScaleOrigin",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "ViewScaled",
					string Type = "Boolean",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "TilePaletteSource",
			string BaseClass = "",
			string Description = "",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "Data",
					string Type = "TileMap::TileHashMap",
					string Description = "",
				},
				{
					string Name = "Version",
					string Type = "Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Save",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(string filename)",
					Array ParameterList = 
					[
						{
							string Name = "filename",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Event",
			string BaseClass = "Object",
			string Description = "Base event class. All events types inherit from this class.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "EventId",
					string Type = "string",
					string Description = "The event-ID that this event was dispatched under.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Terminate",
					string Description = "Stops the event from being sent to any other connections.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ParticleWander",
			string BaseClass = "ParticleAnimator",
			string Description = "Particle animator that causes particle to wander or smoothly vary directions.",
			Array Tags = 
			[
				"Particle",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "WanderAngle",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "WanderAngleVariance",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "WanderStrength",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Animate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ParticleList particleList, Real dt, Mat4Ref transform)",
					Array ParameterList = 
					[
						{
							string Name = "particleList",
							string Type = "ParticleList",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "transform",
							string Type = "Mat4Ref",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "HierarchyEvent",
			string BaseClass = "",
			string Description = "",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Child",
					string Type = "Cog",
					string Description = "",
				},
				{
					string Name = "Parent",
					string Type = "Cog",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "CollisionTable",
			string BaseClass = "DataResource",
			string Description = "Stores the filters between collision group instances. This is space specific data. Also bakes out the filters into the internal flags of each instance for faster runtime operations.",
			Array Tags = 
			[
				"Resource",
				"Physics",
			],
			Array Properties = 
			[
				{
					string Name = "AutoRegister",
					string Type = "bool",
					string Description = "",
				},
				{
					string Name = "CollisionFilters",
					string Type = "CollisionFilters",
					string Description = "The filters between the registered groups.",
				},
				{
					string Name = "HashedFilters",
					string Type = "HashedFilters",
					string Description = "",
				},
				{
					string Name = "RegisteredGroups",
					string Type = "RegisteredGroups",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "FindFilter",
					string Description = "Finds the filter between the pair of collision groups. (Filter acts as our pair class)",
					string ReturnType = "CollisionFilter",
					string Parameters = "(CollisionFilter pair)",
					Array ParameterList = 
					[
						{
							string Name = "pair",
							string Type = "CollisionFilter",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindFilter",
					string Description = "Finds the filter between the pair of collision groups. (Filter acts as our pair class)",
					string ReturnType = "CollisionFilter",
					string Parameters = "(CollisionGroup groupA, CollisionGroup groupB)",
					Array ParameterList = 
					[
						{
							string Name = "groupA",
							string Type = "CollisionGroup",
							string Description = "",
						},
						{
							string Name = "groupB",
							string Type = "CollisionGroup",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FixSpaces",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CollisionTable newTable)",
					Array ParameterList = 
					[
						{
							string Name = "newTable",
							string Type = "CollisionTable",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultGroup",
					string Description = "",
					string ReturnType = "CollisionGroup",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetGroupInstance",
					string Description = "Finds the instance of a collision group. The user can specify what they want to have happen when the instance is not found via the access mode.",
					string ReturnType = "CollisionGroupInstance",
					string Parameters = "(ResourceId groupId, RegisteredGroupInstanceAccessMode::Enum accessMode)",
					Array ParameterList = 
					[
						{
							string Name = "groupId",
							string Type = "ResourceId",
							string Description = "",
						},
						{
							string Name = "accessMode",
							string Type = "RegisteredGroupInstanceAccessMode::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "LoadExistingGroups",
					string Description = "Registers all groups in existence. Used to auto-populate newly created filters.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReconfigureGroups",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RegisterGroup",
					string Description = "Registers the group type as usable for this space (max 32).",
					string ReturnType = "void",
					string Parameters = "(CollisionGroup group)",
					Array ParameterList = 
					[
						{
							string Name = "group",
							string Type = "CollisionGroup",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveGroupInstancesAndFilters",
					string Description = "Helper function to remove all instances in the filters of the given collision group type.",
					string ReturnType = "void",
					string Parameters = "(ResourceId groupId)",
					Array ParameterList = 
					[
						{
							string Name = "groupId",
							string Type = "ResourceId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Save",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(string filename)",
					Array ParameterList = 
					[
						{
							string Name = "filename",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UnRegisterGroup",
					string Description = "Removes the group from the usable type list so more can be added. Also removes all instances of the given type.",
					string ReturnType = "void",
					string Parameters = "(CollisionGroup group)",
					Array ParameterList = 
					[
						{
							string Name = "group",
							string Type = "CollisionGroup",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ValidateFilters",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetUserOwnerChanged",
			string BaseClass = "",
			string Description = "Dispatched after the net object changes network ownership.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "CurrentNetUserOwner",
					string Type = "Cog",
					string Description = "",
				},
				{
					string Name = "PreviousNetUserOwner",
					string Type = "Cog",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetHostListUpdate",
			string BaseClass = "",
			string Description = "Dispatched when a host discovery operation update occurs.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Network",
					string Type = "Network",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetPeerSentUserAddRequest",
			string BaseClass = "",
			string Description = "Dispatched after sending a net user add request.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "OurRequestBundle",
					string Type = "EventBundle",
					string Description = "",
				},
				{
					string Name = "TheirIpAddress",
					string Type = "IpAddress",
					string Description = "",
				},
				{
					string Name = "TheirNetPeerId",
					string Type = "Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "JointHolder",
			string BaseClass = "BaseJointHolder< Joint >",
			string Description = "",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "AutoSnaps",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "IsGhost",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Joint",
					string Type = "Joint",
					string Description = "",
				},
				{
					string Name = "Limit",
					string Type = "JointLimit",
					string Description = "",
				},
				{
					string Name = "MaxForce",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "Motor",
					string Type = "JointMotor",
					string Description = "",
				},
				{
					string Name = "OtherBody",
					string Type = "RigidBody",
					string Description = "",
				},
				{
					string Name = "OtherCollider",
					string Type = "Collider",
					string Description = "",
				},
				{
					string Name = "Owner",
					string Type = "Cog",
					string Description = "",
				},
				{
					string Name = "SendsEvents",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Spring",
					string Type = "JointSpring",
					string Description = "",
				},
				{
					string Name = "Valid",
					string Type = "Boolean",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "SoundCue",
			string BaseClass = "DataResource",
			string Description = "Basic sound Cue with various options.",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "Attenuation",
					string Type = "SoundAttenuator",
					string Description = "",
				},
				{
					string Name = "EndTime",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "Pitch",
					string Type = "Real",
					string Description = "Pitch adjustment of the sound. Specified in Octaves. 1 is twice at high, 2 is 4 times.",
				},
				{
					string Name = "PitchSTVariation",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "PitchSemitones",
					string Type = "Real",
					string Description = "Pitch adjustment of the sound in semitones.",
				},
				{
					string Name = "PitchVariation",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "PlayMode",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "StartTime",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "UseDecibels",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "UseSemitones",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Volume",
					string Type = "Real",
					string Description = "Volume to play the sound at. 1.0 is full volume.",
				},
				{
					string Name = "VolumeDBVariation",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "VolumeDecibels",
					string Type = "Real",
					string Description = "Volume adjustment of sound in decibels.",
				},
				{
					string Name = "VolumeVariation",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddSoundEntry",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Sound sound, Real weight)",
					Array ParameterList = 
					[
						{
							string Name = "sound",
							string Type = "Sound",
							string Description = "",
						},
						{
							string Name = "weight",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddSoundTagEntry",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(SoundTag soundTag)",
					Array ParameterList = 
					[
						{
							string Name = "soundTag",
							string Type = "SoundTag",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNumberOfSounds",
					string Description = "Returns how many sounds are associated with this cue.",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PlayCue",
					string Description = "",
					string ReturnType = "SoundInstance",
					string Parameters = "(SoundSpace space, Audio::SoundNode outputNode)",
					Array ParameterList = 
					[
						{
							string Name = "space",
							string Type = "SoundSpace",
							string Description = "",
						},
						{
							string Name = "outputNode",
							string Type = "Audio::SoundNode",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Preview",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer serializer)",
					Array ParameterList = 
					[
						{
							string Name = "serializer",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetWhichSoundToPlay",
					string Description = "Sets which sound to use for playback.",
					string ReturnType = "void",
					string Parameters = "(Integer soundIndex)",
					Array ParameterList = 
					[
						{
							string Name = "soundIndex",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "StopPreview",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "PathRequestEvent",
			string BaseClass = "",
			string Description = "The event sent when a path request job is finished.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Destination",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "Path",
					string Type = "Path",
					string Description = "",
				},
				{
					string Name = "State",
					string Type = "Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ObjectEvent",
			string BaseClass = "Event",
			string Description = "Simple event for general signals.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Source",
					string Type = "Object",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetPeerSentConnectRequest",
			string BaseClass = "",
			string Description = "Dispatched after sending a connect request.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "OurPendingUserAddRequestCount",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "OurRequestBundle",
					string Type = "EventBundle",
					string Description = "",
				},
				{
					string Name = "TheirIpAddress",
					string Type = "IpAddress",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "MouseEvent",
			string BaseClass = "",
			string Description = "Mouse events for any every with the mouse.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "AltPressed",
					string Type = "bool",
					string Description = "Is Alt held down on the keyboard?",
				},
				{
					string Name = "Button",
					string Type = "MouseButtons::Enum",
					string Description = "If this is a MouseDown event which button was changed.",
				},
				{
					string Name = "ButtonDown",
					string Type = "bool",
					string Description = "",
				},
				{
					string Name = "CtrlPressed",
					string Type = "bool",
					string Description = "Is Ctrl held down on the keyboard?",
				},
				{
					string Name = "HandledEvent",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Mouse",
					string Type = "Mouse",
					string Description = "",
				},
				{
					string Name = "Movement",
					string Type = "Vec2",
					string Description = "Movement since last mouse move.",
				},
				{
					string Name = "Position",
					string Type = "Vec2",
					string Description = "Position of the Mouse.",
				},
				{
					string Name = "Scroll",
					string Type = "Vec2",
					string Description = "Movement of scroll wheel.",
				},
				{
					string Name = "ShiftPressed",
					string Type = "bool",
					string Description = "Is Shift held down on the keyboard?",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsButtonUp",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(MouseButtons::Enum button)",
					Array ParameterList = 
					[
						{
							string Name = "button",
							string Type = "MouseButtons::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ParticleEmitterShared",
			string BaseClass = "ParticleEmitter",
			string Description = "Particle Emitter Shared.",
			Array Tags = 
			[
				"Particle",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Active",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "EmitCount",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "EmitRate",
					string Type = "Real",
					string Description = "Rate that particles spawn per second.",
				},
				{
					string Name = "EmitVariance",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "EmitterSize",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "EmitterVelocityPercent",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "FastMovingEmitter",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Fill",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "Lifetime",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "LifetimeVariance",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "RandomSpin",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "RandomVelocity",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "Size",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "SizeVariance",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "Spin",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "SpinVariance",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "StartVelocity",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "TangentVelocity",
					string Type = "Real3",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "CreateInitializedParticle",
					string Description = "",
					string ReturnType = "Particle",
					string Parameters = "(ParticleList particleList, Integer particle, Mat4Ref transform, Vec3 emitterVelocity)",
					Array ParameterList = 
					[
						{
							string Name = "particleList",
							string Type = "ParticleList",
							string Description = "",
						},
						{
							string Name = "particle",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "transform",
							string Type = "Mat4Ref",
							string Description = "",
						},
						{
							string Name = "emitterVelocity",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetParticleEmissionCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(ParticleList particleList, Real dt)",
					Array ParameterList = 
					[
						{
							string Name = "particleList",
							string Type = "ParticleList",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ResetCount",
					string Description = "Reset the number of particles to emit back to EmitCount.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Collider",
			string BaseClass = "Component",
			string Description = "A collider controls how collision detection is performed for an object. A collider also gives mass properties to a RigidBody (via the material and volume). If there is no RigidBody associated with this collider then it is considered static. Note: colliders without RigidBodies should not be moved at run-time!",
			Array Tags = 
			[
				"Physics",
				"Collider",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "ActiveBody",
					string Type = "RigidBody",
					string Description = "The rigid body that owns this collider. This is the body that forces/impulses/etc... should be applied to.",
				},
				{
					string Name = "CollisionGroup",
					string Type = "CollisionGroup",
					string Description = "The collision group is a tag used to alter collision behavior based upon the CollisionTable on this object's space.",
				},
				{
					string Name = "ContactCount",
					string Type = "Integer",
					string Description = "Returns the number of contacts on this collider.",
				},
				{
					string Name = "Contacts",
					string Type = "ContactRange",
					string Description = "Range of all contacts on this collider.",
				},
				{
					string Name = "Ghost",
					string Type = "Boolean",
					string Description = "Ghosted colliders do not resolve collision. They do still detect collisions and send events. Ghosted colliders are typically used for trigger regions.",
				},
				{
					string Name = "JointCount",
					string Type = "Integer",
					string Description = "Returns the number of joints attached to this collider.",
				},
				{
					string Name = "Joints",
					string Type = "JointRange",
					string Description = "Range of all joints on this collider.",
				},
				{
					string Name = "Material",
					string Type = "PhysicsMaterial",
					string Description = "The material used to determine the density, restitution and friction of this collider.",
				},
				{
					string Name = "Offset",
					string Type = "Real3",
					string Description = "Moves the physics defined center of the object away from the transform's translation. Used to move physics to match a model.",
				},
				{
					string Name = "SendsEvents",
					string Type = "Boolean",
					string Description = "Determines if this object will send collision events. Used mainly for increasing performance by not sending unnecessary collision events.",
				},
				{
					string Name = "WorldAabb",
					string Type = "Aabb",
					string Description = "Returns the world-space axis aligned bounding box (Aabb) of this collider.",
				},
				{
					string Name = "WorldBoundingSphere",
					string Type = "Sphere",
					string Description = "Returns the world-space bounding sphere of this collider.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AttachTo",
					string Description = "Signal that the Cog has been attached to another Cog .",
					string ReturnType = "void",
					string Parameters = "(AttachmentInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "AttachmentInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CacheWorldValues",
					string Description = "Gives any derived collider a chance to cache world-space values (e.g. SphereCollider.WorldRadius)",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeLocalInverseInertiaTensor",
					string Description = "Computes the local space (as in not rotated, the scale is still necessary but the translation is assumed to be zero) inertia tensor from the passed in mass.",
					string ReturnType = "void",
					string Parameters = "(real mass, Mat3Ref localInvInertia)",
					Array ParameterList = 
					[
						{
							string Name = "mass",
							string Type = "real",
							string Description = "",
						},
						{
							string Name = "localInvInertia",
							string Type = "Mat3Ref",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMass",
					string Description = "Computes the mass of this collider from its volume and density.",
					string ReturnType = "real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePointVelocityInternal",
					string Description = "Computes a point velocity of a world-space point from this collider's rigid body. Used in collision resolution and in determining the separating velocity of a point.",
					string ReturnType = "Vec3",
					string Parameters = "(Vec3 worldPoint)",
					Array ParameterList = 
					[
						{
							string Name = "worldPoint",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeVolume",
					string Description = "Compute the world-space volume of this collider.",
					string ReturnType = "real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldAabbInternal",
					string Description = "Computes the world-space aabb. This is always called after CacheWorldValues has been called. This must be implemented on each collider type. The helper function 'SetWorldAabbFromHalfExtents' exists to compute the aabb from the current rotation and translation with the given world scale half-extent of an aabb.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldBoundingSphereInternal",
					string Description = "Compute the world-space bounding sphere. See ComputeWorldAabb for a description of when and why this is called (but for a sphere). The default behavior is to take the sphere centered at the object's translation with a radius to the furthest away point.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldBoundingVolumes",
					string Description = "Fix the world-space bounding volumes from the current transform and per collider property data (Sphere: mRadius, Box: mSize, etc...). If you need a bounding volume to be up-to-date this should be called, not either of the Compute functions for a bounding volume.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldVolumeInternal",
					string Description = "Compute the volume of this collider in world space. This must be calculated in world space as there's no generic way to scale volume after-the-fact. All colliders that contain a volume should implement this. Some colliders (e.g. HeightMap or Mesh ) don't as they aren't meant to work with rigid bodies. This is an internal function, meaning that it assumes the transform data is already up-to-date (should rarely be called by the outside).",
					string ReturnType = "real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DestroyAllContacts",
					string Description = "Destroy all contacts connected to this collider. Unlike joints, contacts need to be deleted when either collider is disconnected from the contact. An additional bool is specified to determine whether or not to send contact ended events immediately (if we wait then the object will already be deleted and the . Cog on the event will be null)",
					string ReturnType = "void",
					string Parameters = "(bool sendImmediately)",
					Array ParameterList = 
					[
						{
							string Name = "sendImmediately",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Detached",
					string Description = "Signal that the Cog has been detached from another Cog .",
					string ReturnType = "void",
					string Parameters = "(AttachmentInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "AttachmentInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ForceAwake",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ForceRelinkJoints",
					string Description = "When a collider is dynamically added no joints are connected to it. To fix each joint we walk through all object links we're connected to and forcefully unlink and link them which will fix all joints.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GenerateIntegrationUpdate",
					string Description = "Queues an update in the physics queues that says this collider has been integrated. Being integrated implies a very specific set of things that have to be updated.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetCenter",
					string Description = "Return a point deep inside the shape. Needed to initialize MPR and make some initial good guesses. Not commonly overridden in a derived collider type.",
					string ReturnType = "void",
					string Parameters = "(Vec3Ref center)",
					Array ParameterList = 
					[
						{
							string Name = "center",
							string Type = "Vec3Ref",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetColliderLocalCenterOfMass",
					string Description = "Returns the location of the local space center of mass for this collider. For all symmetric colliders this is the origin, but for non-symmetric colliders this can change. This is needed for computing a rigid body's mass and inertia properties.",
					string ReturnType = "Vec3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetColliderType",
					string Description = "Which kind of collider is this? Mostly used to determine which collision function to call.",
					string ReturnType = "ColliderType",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetColliderWorldCenterOfMass",
					string Description = "Computes the collider's center of mass in world space. This should only be called when computing a rigid body's world center of mass.",
					string ReturnType = "Vec3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetHasPairFilter",
					string Description = "Pair filters per-object pairings to skip for detection (within a space). To avoid a hashmap lookup each collider stores if it has ever had a pair added. If it hasn't then no lookup is needed.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNextColliderId",
					string Description = "Updates the unique collider Id.",
					string ReturnType = "u32",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetPointVelocity",
					string Description = "Returns the point velocity of a world-space point with respect to the current rigid body's linear and angular velocity. If there is no rigid body this returns zero.",
					string ReturnType = "Vec3",
					string Parameters = "(Vec3 worldPoint)",
					Array ParameterList = 
					[
						{
							string Name = "worldPoint",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetRigidBodyCenterOfMass",
					string Description = "Returns the rigid body's center of mass in world space. If there is no rigid body then the collider's world translation is returned instead.",
					string ReturnType = "Vec3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetSupportShape",
					string Description = "Creates a support shape wrapper class for this collider. This helps provide a generic interface to collision detection that works with colliders or other primitive shapes. The support delta is needed for Swept (: clean up later). Should almost never be overridden in a derived collider type.",
					string ReturnType = "Intersection::SupportShape",
					string Parameters = "(bool supportDelta)",
					Array ParameterList = 
					[
						{
							string Name = "supportDelta",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldRotation",
					string Description = "The cached world-space rotation of this collider.",
					string ReturnType = "Mat3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldScale",
					string Description = "The cached world-space scale of this collider.",
					string ReturnType = "Vec3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldTransform",
					string Description = "Get the cached local to world transform data for this collider.",
					string ReturnType = "WorldTransformation",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldTranslation",
					string Description = "The cached world-space translation of this collider.",
					string ReturnType = "Vec3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InDynamicBroadPhase",
					string Description = "Does this collider belong in dynamic or static broadphase?",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InternalSizeChanged",
					string Description = "Helper function for all derived collider types to call whenever their base size properties change. If one of these changes then several things, ranging from half-extents to broadphase, have to be updated.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InternalTransformUpdate",
					string Description = "Takes care of all logic when a collider has its transform updated out from under it. This is broken up into two categories: initialization and update. In update a little more work has to be done.",
					string ReturnType = "void",
					string Parameters = "(eUpdateTransformState updateState)",
					Array ParameterList = 
					[
						{
							string Name = "updateState",
							string Type = "eUpdateTransformState",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Is2D",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsAsleep",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsDynamic",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsKinematic",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsStatic",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "NotCollideable",
					string Description = "This encompasses whether or not a collider is allowed to collide with anything. Currently ghost colliders and ones that have no mass in the entire rigid body are unable to collide with anything.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAllObjectsCreated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnPhysicsMaterialModified",
					string Description = "The physics material we are using has been modified. Update mass from density. The event isn't used.",
					string ReturnType = "void",
					string Parameters = "(Event e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RebuildModifiedResources",
					string Description = "Check all resources used by this collider to see if they need to be updated. Called by several ""Get"" functions to force up-to-date information.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetHasPairFilter",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(bool hasPairFilter)",
					Array ParameterList = 
					[
						{
							string Name = "hasPairFilter",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetWorldAabbFromHalfExtents",
					string Description = "Sets the world-space aabb of this collider given a world-space half-extent of the aabb. Commonly used by box or box-like things to approximate the world-space aabb as the rotation of the (scaled) local-space aabb.",
					string ReturnType = "void",
					string Parameters = "(Vec3 worldHalfExtents)",
					Array ParameterList = 
					[
						{
							string Name = "worldHalfExtents",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ShouldCollide",
					string Description = "Determines if this collider should perform collision detection against the passed in collider. This checks everything from asleep to collision groups.",
					string ReturnType = "bool",
					string Parameters = "(Collider otherCollider)",
					Array ParameterList = 
					[
						{
							string Name = "otherCollider",
							string Type = "Collider",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ShouldCollide",
					string Description = "Helper function that not only determines if two colliders should collide but also fills out a string with the reason for why they are not (for PhysicsSpace.WhyAreTheyNotColliding ).",
					string ReturnType = "bool",
					string Parameters = "(Collider otherCollider, string reasonForNotColliding)",
					Array ParameterList = 
					[
						{
							string Name = "otherCollider",
							string Type = "Collider",
							string Description = "",
						},
						{
							string Name = "reasonForNotColliding",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ShouldCollideInternal",
					string Description = "Internal function that will return why they aren't colliding if the template argument is true (for efficiency to not build the string during normal collision detection)",
					string ReturnType = "bool",
					string Parameters = "(Collider otherCollider, string reasonForNotColliding)",
					Array ParameterList = 
					[
						{
							string Name = "otherCollider",
							string Type = "Collider",
							string Description = "",
						},
						{
							string Name = "reasonForNotColliding",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Support",
					string Description = "Support function for GJK/MPR or any other Minkowski difference algorithm. This sets the given support vector to the point (in world space) furthest in the given direction. Almost all colliders should implement this! The main exceptions are colliders that contain multiple primitives (such as MultiConvexMeshCollider ) in which case each primitive type should have this function.",
					string ReturnType = "void",
					string Parameters = "(Vec3 direction, Vec3Ptr support)",
					Array ParameterList = 
					[
						{
							string Name = "direction",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "support",
							string Type = "Vec3Ptr",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TransformSupportDirectionToLocal",
					string Description = "",
					string ReturnType = "Vec3",
					string Parameters = "(Vec3 worldSupportDirection)",
					Array ParameterList = 
					[
						{
							string Name = "worldSupportDirection",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TransformSupportPointToWorld",
					string Description = "",
					string ReturnType = "Vec3",
					string Parameters = "(Vec3 localSupportPoint)",
					Array ParameterList = 
					[
						{
							string Name = "localSupportPoint",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TransformUpdate",
					string Description = "Special function for transform updating from editor.",
					string ReturnType = "void",
					string Parameters = "(TransformUpdateInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "TransformUpdateInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UnlinkAllJoints",
					string Description = "Unlink all joints connected to this collider. This is likely called because we are being destroyed.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateMasslessColliderFlag",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdatePhysicsMaterialConnections",
					string Description = "Disconnect all events from the old material and connect to the new material.",
					string ReturnType = "void",
					string Parameters = "(PhysicsMaterial oldMaterial, PhysicsMaterial newMaterial)",
					Array ParameterList = 
					[
						{
							string Name = "oldMaterial",
							string Type = "PhysicsMaterial",
							string Description = "",
						},
						{
							string Name = "newMaterial",
							string Type = "PhysicsMaterial",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateQueue",
					string Description = "Forces an update (if it exists) to the collider's mass and inertia properties. This occasionally is needed when some place needs up-to-date information and the cached body-to-world transforms could be out of date (in the middle of a user call). Joints are the main caller of this right now.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Atlas",
			string BaseClass = "DataResource",
			string Description = "",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "NeedsBuilding",
					string Type = "bool",
					string Description = "",
				},
				{
					string Name = "Sources",
					string Type = "InList<SpriteSource>",
					string Description = "",
				},
				{
					string Name = "Textures",
					string Type = "Array<ResourceReference<Texture>>",
					string Description = "",
				},
				{
					string Name = "sBorderWidth",
					string Type = "const Integer",
					string Description = "",
				},
				{
					string Name = "sMaxMipLevel",
					string Type = "const Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddSpriteSource",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(SpriteSource source)",
					Array ParameterList = 
					[
						{
							string Name = "source",
							string Type = "SpriteSource",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ClearTextures",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "AutoOrientToVelocity",
			string BaseClass = "Component",
			string Description = "",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "AngleOffset",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnUpdate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(UpdateEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "UpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "SendableEvent",
			string BaseClass = "",
			string Description = "This event can be sent over the network.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Connection",
					string Type = "const ConnectionData",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Delete",
					string Description = "Because the event could be implemented in scripting, it needs to know how to destroy itself The standard method is to call delete on its own this pointer.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Load",
					string Description = "Read an event from a stream.",
					string ReturnType = "SendableEvent",
					string Parameters = "(MetaCreateContext context, Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "context",
							string Type = "MetaCreateContext",
							string Description = "",
						},
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Save",
					string Description = "Write an event to a stream.",
					string ReturnType = "void",
					string Parameters = "(SendableEvent event, Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "SendableEvent",
							string Description = "",
						},
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serialization of the event.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ParticleGradientAnimator",
			string BaseClass = "ParticleAnimator",
			string Description = "",
			Array Tags = 
			[
				"Particle",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "ColorGradient",
					string Type = "ColorGradient",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Animate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ParticleList particleList, Real dt, Mat4Ref transform)",
					Array ParameterList = 
					[
						{
							string Name = "particleList",
							string Type = "ParticleList",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "transform",
							string Type = "Mat4Ref",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "JoystickEvent",
			string BaseClass = "",
			string Description = "Joystick events are sent when a game pad button state is changed.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Button",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "Joystick",
					string Type = "Joystick",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "HotKeyDataSet",
			string BaseClass = "DataResource",
			string Description = "",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "Command",
					string Type = "CommandSet",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "DragEffect",
			string BaseClass = "PhysicsEffect",
			string Description = "Applies a drag acceleration (damping) to slow down an object's linear and angular velocity. Note that this is an acceleration not a force so mass doesn't apply. Otherwise this uses a simple linear approximation of drag.",
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "AngularDrag",
					string Type = "Real",
					string Description = "The angular drag coefficient for applying an angular drag acceleration (angular damping). The simple equation is: accel = -kw.",
				},
				{
					string Name = "Drag",
					string Type = "Real",
					string Description = "The linear drag coefficient for applying a linear drag acceleration (linear damping). The simple equation is: accel = -bv.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ApplyEffect",
					string Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force).",
					string ReturnType = "void",
					string Parameters = "(RigidBody obj, real dt)",
					Array ParameterList = 
					[
						{
							string Name = "obj",
							string Type = "RigidBody",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "BuilderVertex",
			string BaseClass = "BuilderElement",
			string Description = "",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "HalfEdge",
					string Type = "BuilderEdge",
					string Description = "",
				},
				{
					string Name = "HalfEdgeLink",
					string Type = "Link<BuilderVertex>",
					string Description = "",
				},
				{
					string Name = "Proxy",
					string Type = "BroadPhaseProxy",
					string Description = "",
				},
				{
					string Name = "WedgeList",
					string Type = "VertexWedgeList",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Data",
					string Description = "",
					string ReturnType = "Vector3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DrawDebug",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(unsigned space, Transform transform)",
					Array ParameterList = 
					[
						{
							string Name = "space",
							string Type = "unsigned",
							string Description = "",
						},
						{
							string Name = "transform",
							string Type = "Transform",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DrawSelected",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(unsigned space, Transform transform)",
					Array ParameterList = 
					[
						{
							string Name = "space",
							string Type = "unsigned",
							string Description = "",
						},
						{
							string Name = "transform",
							string Type = "Transform",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetValence",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Array<BuilderEdge> vOut)",
					Array ParameterList = 
					[
						{
							string Name = "vOut",
							string Type = "Array<BuilderEdge>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IntersectAdjacency",
					string Description = "",
					string ReturnType = "BuilderElement",
					string Parameters = "(Ray localRay)",
					Array ParameterList = 
					[
						{
							string Name = "localRay",
							string Type = "Ray",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Position",
					string Description = "",
					string ReturnType = "Vector3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Translate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HETranslationOperation op)",
					Array ParameterList = 
					[
						{
							string Name = "op",
							string Type = "HETranslationOperation",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TranslateSoft",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HETranslationOperation op)",
					Array ParameterList = 
					[
						{
							string Name = "op",
							string Type = "HETranslationOperation",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LockStepMouseScrollEvent",
			string BaseClass = "LockStepMouseEvent",
			string Description = "A synced mouse event.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "ScrollDelta",
					string Type = "Vec2",
					string Description = "The amount that the mouse scrolled.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serialization of the event.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "SpriteParticleSystem",
			string BaseClass = "ParticleSystemCommonData",
			string Description = "Sprite Particles system component. Renders particles system as billboarded sprites.",
			Array Tags = 
			[
				"Particle",
				"Component",
				"Graphical",
			],
			Array Properties = 
			[
				{
					string Name = "GeometryMode",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "LengthScale",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "MaxParticleSize",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "ParticleAnimation",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "SortMode",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "SpriteSource",
					string Type = "SpriteSource",
					string Description = "",
				},
				{
					string Name = "SystemSize",
					string Type = "Real3",
					string Description = "Size of the particles system for visibility culling.",
				},
				{
					string Name = "VelocityScale",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "CheckSort",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Mat4Param pointTransform)",
					Array ParameterList = 
					[
						{
							string Name = "pointTransform",
							string Type = "Mat4Param",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Clear",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ExtractFrameData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(FrameNode frameNode, FrameBlock frameBlock, Array<Mat4> matrixBuffer)",
					Array ParameterList = 
					[
						{
							string Name = "frameNode",
							string Type = "FrameNode",
							string Description = "",
						},
						{
							string Name = "frameBlock",
							string Type = "FrameBlock",
							string Description = "",
						},
						{
							string Name = "matrixBuffer",
							string Type = "Array<Mat4>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ExtractViewData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ViewNode viewNode, ViewBlock viewBlock, FrameBlock frameBlock)",
					Array ParameterList = 
					[
						{
							string Name = "viewNode",
							string Type = "ViewNode",
							string Description = "",
						},
						{
							string Name = "viewBlock",
							string Type = "ViewBlock",
							string Description = "",
						},
						{
							string Name = "frameBlock",
							string Type = "FrameBlock",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultMaterial",
					string Description = "",
					string ReturnType = "Material",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLocalAabb",
					string Description = "",
					string ReturnType = "Aabb",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnLogicUpdate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(UpdateEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "UpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnSelectionFinal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(SelectionChangedEvent selectionEvent)",
					Array ParameterList = 
					[
						{
							string Name = "selectionEvent",
							string Type = "SelectionChangedEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "SoundTag",
			string BaseClass = "DataResource",
			string Description = "",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "Volume",
					string Type = "Real",
					string Description = "Sets the volume of all tagged sounds (multiplies with other volumes)",
				},
				{
					string Name = "VolumeDecibels",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "GetTaggedInstanceCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InterpolateVolume",
					string Description = "Sets the volume of tagged sounds over a certain time, in seconds.",
					string ReturnType = "void",
					string Parameters = "(Real value, Real interpolationTime)",
					Array ParameterList = 
					[
						{
							string Name = "value",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "interpolationTime",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InterpolateVolumeDecibels",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Real decibels, Real interpolationTime)",
					Array ParameterList = 
					[
						{
							string Name = "decibels",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "interpolationTime",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PauseSounds",
					string Description = "Pause all sounds with this tag.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ResumeSounds",
					string Description = "Resume all sounds with this tag.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "StopSounds",
					string Description = "Stop all sounds with this tag.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TagSound",
					string Description = "Tag a new sound instance.",
					string ReturnType = "void",
					string Parameters = "(SoundInstance instance)",
					Array ParameterList = 
					[
						{
							string Name = "instance",
							string Type = "SoundInstance",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UnTagSound",
					string Description = "Remove this tag from a sound instance.",
					string ReturnType = "void",
					string Parameters = "(SoundInstance instance)",
					Array ParameterList = 
					[
						{
							string Name = "instance",
							string Type = "SoundInstance",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "JointConfigOverride",
			string BaseClass = "Component",
			string Description = "Overrides the joint's configuration values of slop, linear Baumgarte, angular Baumgarte and linear max error correction. Slop is the amount of error allowed before position correction takes effect. Baumgarte is used to exponentially correct the error. Baumgarte is split into linear and angular portions because of stability. The linear max error correction is only used when the joint is solved with post stabilization.",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "AngularBaumgarte",
					string Type = "Real",
					string Description = "The exponential correction term for angular error.",
				},
				{
					string Name = "AngularErrorCorrection",
					string Type = "Real",
					string Description = "The max amount of error that can be corrected by the angular portion of any constraint in one frame.",
				},
				{
					string Name = "LinearBaumgarte",
					string Type = "Real",
					string Description = "The exponential correction term for linear error.",
				},
				{
					string Name = "LinearErrorCorrection",
					string Type = "Real",
					string Description = "The max amount of error that can be corrected by the linear portion of any constraint in one frame.",
				},
				{
					string Name = "PositionCorrectionType",
					string Type = "ConstraintPositionCorrection",
					string Description = "The kind of position correction that this joint should use.",
				},
				{
					string Name = "Slop",
					string Type = "Real",
					string Description = "The amount of error allowed before position correction takes effect.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "FixedAngleJoint",
			string BaseClass = "Joint",
			string Description = "Locks the orientation of two objects together. Used when two objects should always rotate in unison. Not useful by itself, but useful as a proof of concept for joints that use this functionality internally. Limits, motors and springs should most likely not be used on this. Add on definitions: Limit: A limit will provide a min/max angle on every axis that the objects must be between. Motor: A motor will attempt to drive the rotation on every axis forward. Spring: A spring will make the rotations on every axis at the bounds springy.",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "LocalAngleA",
					string Type = "Quaternion",
					string Description = "",
				},
				{
					string Name = "LocalAngleB",
					string Type = "Quaternion",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "BatchEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Commit",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeInitialConfiguration",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMoleculeData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeData moleculeData)",
					Array ParameterList = 
					[
						{
							string Name = "moleculeData",
							string Type = "MoleculeData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePositionMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAtomIndexFilter",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Integer atomIndex, real desiredConstraintValue)",
					Array ParameterList = 
					[
						{
							string Name = "atomIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "desiredConstraintValue",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultLimitIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultMotorIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultSpringIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PositionMoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Solve",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAtoms",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WarmStart",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "BoxCollider",
			string BaseClass = "Collider",
			string Description = "BoxCollider represents the collision volume of a box defined by a size.",
			Array Tags = 
			[
				"Physics",
				"Collider",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "HalfSize",
					string Type = "Real3",
					string Description = "The half size (from the center to the upper-right corner) on each axis of the box in local space. Used to make the box's size match a model or some other volume without needing to scale the transform (also avoids non-uniform scale issues).",
				},
				{
					string Name = "Size",
					string Type = "Real3",
					string Description = "The size (from min to max) on each axis of the box in local space. Used to make the box's size match a model or some other volume without needing to scale the transform (also avoids non-uniform scale issues).",
				},
				{
					string Name = "WorldSize",
					string Type = "Real3",
					string Description = "The size of the box after the transform is applied (scale and rotation).",
				},
			],
			Array Methods = 
			[
				{
					string Name = "CacheWorldValues",
					string Description = "Gives any derived collider a chance to cache world-space values (e.g. SphereCollider.WorldRadius)",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeLocalInverseInertiaTensor",
					string Description = "Computes the local space (as in not rotated, the scale is still necessary but the translation is assumed to be zero) inertia tensor from the passed in mass.",
					string ReturnType = "void",
					string Parameters = "(real mass, Mat3Ref localInvInertia)",
					Array ParameterList = 
					[
						{
							string Name = "mass",
							string Type = "real",
							string Description = "",
						},
						{
							string Name = "localInvInertia",
							string Type = "Mat3Ref",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldAabbInternal",
					string Description = "Computes the world-space aabb. This is always called after CacheWorldValues has been called. This must be implemented on each collider type. The helper function 'SetWorldAabbFromHalfExtents' exists to compute the aabb from the current rotation and translation with the given world scale half-extent of an aabb.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldVolumeInternal",
					string Description = "Compute the volume of this collider in world space. This must be calculated in world space as there's no generic way to scale volume after-the-fact. All colliders that contain a volume should implement this. Some colliders (e.g. HeightMap or Mesh ) don't as they aren't meant to work with rigid bodies. This is an internal function, meaning that it assumes the transform data is already up-to-date (should rarely be called by the outside).",
					string ReturnType = "real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Support",
					string Description = "Support function for GJK/MPR or any other Minkowski difference algorithm. This sets the given support vector to the point (in world space) furthest in the given direction. Almost all colliders should implement this! The main exceptions are colliders that contain multiple primitives (such as MultiConvexMeshCollider ) in which case each primitive type should have this function.",
					string ReturnType = "void",
					string Parameters = "(Vec3 direction, Vec3Ptr support)",
					Array ParameterList = 
					[
						{
							string Name = "direction",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "support",
							string Type = "Vec3Ptr",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "TileMapSource",
			string BaseClass = "",
			string Description = "",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "Data",
					string Type = "TileMap::TileHashMap",
					string Description = "",
				},
				{
					string Name = "Version",
					string Type = "Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Save",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(string filename)",
					Array ParameterList = 
					[
						{
							string Name = "filename",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Wandering",
			string BaseClass = "MovementBase",
			string Description = "Rotates the object in a way that would cause the object to wander if it was moving forward.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "CircleRadius",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "MaxWanderAngleChange",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "RecursionLevels",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "ScalePerRecursion",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ComputeAngleChangeRadians",
					string Description = "",
					string ReturnType = "Real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAngleChangeRadians",
					string Description = "",
					string ReturnType = "Real",
					string Parameters = "(WanderInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "WanderInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "CylinderCollider",
			string BaseClass = "Collider",
			string Description = "Cylinder Collider is a basic collision primitive of a cylinder.",
			Array Tags = 
			[
				"Physics",
				"Collider",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Direction",
					string Type = "AxisDirection",
					string Description = "The direction that the height is defined along. Allows the user to change whether the cylinder's height is along the x, y, or z axis.",
				},
				{
					string Name = "Height",
					string Type = "Real",
					string Description = "The local space distance from the top of the cylinder to the bottom.",
				},
				{
					string Name = "Radius",
					string Type = "Real",
					string Description = "The local space radius of the cylinder.",
				},
				{
					string Name = "WorldHeight",
					string Type = "Real",
					string Description = "The full height of the cylinder after the scale is applied.",
				},
				{
					string Name = "WorldRadius",
					string Type = "Real",
					string Description = "The radius of the cylinder after scale is applied.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "CacheWorldValues",
					string Description = "Gives any derived collider a chance to cache world-space values (e.g. SphereCollider.WorldRadius)",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeLocalInverseInertiaTensor",
					string Description = "Computes the local space (as in not rotated, the scale is still necessary but the translation is assumed to be zero) inertia tensor from the passed in mass.",
					string ReturnType = "void",
					string Parameters = "(real mass, Mat3Ref localInvInertia)",
					Array ParameterList = 
					[
						{
							string Name = "mass",
							string Type = "real",
							string Description = "",
						},
						{
							string Name = "localInvInertia",
							string Type = "Mat3Ref",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldAabbInternal",
					string Description = "Computes the world-space aabb. This is always called after CacheWorldValues has been called. This must be implemented on each collider type. The helper function 'SetWorldAabbFromHalfExtents' exists to compute the aabb from the current rotation and translation with the given world scale half-extent of an aabb.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldBoundingSphereInternal",
					string Description = "Compute the world-space bounding sphere. See ComputeWorldAabb for a description of when and why this is called (but for a sphere). The default behavior is to take the sphere centered at the object's translation with a radius to the furthest away point.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldPoints",
					string Description = "Returns the top (pointA), and the bottom (pointB) of the cylinder.",
					string ReturnType = "void",
					string Parameters = "(Vec3Ref pointA, Vec3Ref pointB)",
					Array ParameterList = 
					[
						{
							string Name = "pointA",
							string Type = "Vec3Ref",
							string Description = "",
						},
						{
							string Name = "pointB",
							string Type = "Vec3Ref",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldVolumeInternal",
					string Description = "Compute the volume of this collider in world space. This must be calculated in world space as there's no generic way to scale volume after-the-fact. All colliders that contain a volume should implement this. Some colliders (e.g. HeightMap or Mesh ) don't as they aren't meant to work with rigid bodies. This is an internal function, meaning that it assumes the transform data is already up-to-date (should rarely be called by the outside).",
					string ReturnType = "real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetHeightIndex",
					string Description = "The index of the height axis.",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetRadiiIndices",
					string Description = "The index of both radius axes.",
					string ReturnType = "void",
					string Parameters = "(Integer rIndex0, Integer rIndex1)",
					Array ParameterList = 
					[
						{
							string Name = "rIndex0",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "rIndex1",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldHalfHeight",
					string Description = "The half height of the cylinder after scale is applied.",
					string ReturnType = "real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Support",
					string Description = "Support function for GJK/MPR or any other Minkowski difference algorithm. This sets the given support vector to the point (in world space) furthest in the given direction. Almost all colliders should implement this! The main exceptions are colliders that contain multiple primitives (such as MultiConvexMeshCollider ) in which case each primitive type should have this function.",
					string ReturnType = "void",
					string Parameters = "(Vec3 direction, Vec3Ptr support)",
					Array ParameterList = 
					[
						{
							string Name = "direction",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "support",
							string Type = "Vec3Ptr",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "PreSolveEvent",
			string BaseClass = "BaseCollisionEvent",
			string Description = "Event sent out from collision groups with the PreSolve block type. This event is sent out after collision detection but before collision resolution. This can be used to slightly alter the state of the two objects in a collision before they're resolved (say turn one from static to dynamic). Warning: Do not delete objects or do any other significant changes as this may destabilize the system.",
			Array Tags = 
			[
				"Physics",
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Block",
					string Type = "CollisionFilterBlock",
					string Description = "",
				},
				{
					string Name = "EventLink",
					string Type = "Link<PreSolveEvent>",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Set",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(const Physics::Manifold manifold, CollisionFilterBlock preSolveBlock)",
					Array ParameterList = 
					[
						{
							string Name = "manifold",
							string Type = "const Physics::Manifold",
							string Description = "",
						},
						{
							string Name = "preSolveBlock",
							string Type = "CollisionFilterBlock",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetEventSent",
			string BaseClass = "",
			string Description = "Dispatched after a dispatched net event is sent.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Destination",
					string Type = "Cog",
					string Description = "",
				},
				{
					string Name = "NetEvent",
					string Type = "Event",
					string Description = "",
				},
				{
					string Name = "TheirNetPeerId",
					string Type = "Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ContactPoint",
			string BaseClass = "",
			string Description = "",
			Array Tags = 
			[
				"Physics",
			],
			Array Properties = 
			[
				{
					string Name = "BodyPoint",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "ComplexImpulse",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "FrictionImpulse",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "NormalImpulse",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "OtherBodyPoint",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "Penetration",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "RelativeVelocity",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "WorldNormalTowardsOther",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldPoint",
					string Type = "Real3",
					string Description = "",
				},
			],
			Array Methods = 
			[
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "MeshBender",
			string BaseClass = "Component",
			string Description = "Bends a mesh (typically for per instance modification)",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Dimensions",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "Offset",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "ResolutionX",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "ResolutionY",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "ResolutionZ",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "Rotation",
					string Type = "Quaternion",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "RuntimeSpline",
			string BaseClass = "Component",
			string Description = "A spline that is manipulated at runtime (such as a rope)",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "BakedPointCount",
					string Type = "Integer",
					string Description = "Get the number of points in the baked curve.",
				},
				{
					string Name = "Closed",
					string Type = "Boolean",
					string Description = "Get and set whether or not the spline closed.",
				},
				{
					string Name = "ControlPointCount",
					string Type = "Integer",
					string Description = "Get the number of points on.",
				},
				{
					string Name = "SplineType",
					string Type = "Integer",
					string Description = "Get and set the spline type for the curve.",
				},
				{
					string Name = "Subdivisions",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "TargetSpace",
					string Type = "Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddControlPoint",
					string Description = "Add a control point to the spline.",
					string ReturnType = "void",
					string Parameters = "(Vec3 point)",
					Array ParameterList = 
					[
						{
							string Name = "point",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ClearControlPoints",
					string Description = "Removes all control points from the spline.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeSamplePointsInLocal",
					string Description = "Computes sample points along the curve.",
					string ReturnType = "void",
					string Parameters = "(Array<Vec3> pointsOut)",
					Array ParameterList = 
					[
						{
							string Name = "pointsOut",
							string Type = "Array<Vec3>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetBakedLocalPoint",
					string Description = "Get a baked point by index.",
					string ReturnType = "Vec3",
					string Parameters = "(Integer bakedIndex)",
					Array ParameterList = 
					[
						{
							string Name = "bakedIndex",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetBakedWorldPoint",
					string Description = "",
					string ReturnType = "Vec3",
					string Parameters = "(Integer bakedIndex)",
					Array ParameterList = 
					[
						{
							string Name = "bakedIndex",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetControlPoint",
					string Description = "Get a control point by index.",
					string ReturnType = "Vec3",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLocalBakedRotation",
					string Description = "Get a quaternion that represents the rotation of a control point.",
					string ReturnType = "Quat",
					string Parameters = "(Integer bakedIndex)",
					Array ParameterList = 
					[
						{
							string Name = "bakedIndex",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLocalBakedRotationBasis",
					string Description = "Get a the basis vectors that represent the rotation of a control point.",
					string ReturnType = "BasisVectors",
					string Parameters = "(Integer bakedIndex)",
					Array ParameterList = 
					[
						{
							string Name = "bakedIndex",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLocalBakedSpline",
					string Description = "Get the baked curve.",
					string ReturnType = "Vec3Array",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldBakedRotation",
					string Description = "",
					string ReturnType = "Quat",
					string Parameters = "(Integer bakedIndex)",
					Array ParameterList = 
					[
						{
							string Name = "bakedIndex",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldBakedRotationBasis",
					string Description = "",
					string ReturnType = "BasisVectors",
					string Parameters = "(Integer bakedIndex)",
					Array ParameterList = 
					[
						{
							string Name = "bakedIndex",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldBakedSpline",
					string Description = "",
					string ReturnType = "Vec3Array",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PopControlPoint",
					string Description = "Pops a control point from the back of the spline.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PushControlPoint",
					string Description = "Push another point onto the curve.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveControlPoint",
					string Description = "Removes a control point from the spline.",
					string ReturnType = "void",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetControlPoint",
					string Description = "Set a control point by index.",
					string ReturnType = "void",
					string Parameters = "(Integer index, Vec3 point)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "point",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ToQuaternion",
					string Description = "Convert basis vectors to a quaternion.",
					string ReturnType = "Quat",
					string Parameters = "(BasisVectors basis)",
					Array ParameterList = 
					[
						{
							string Name = "basis",
							string Type = "BasisVectors",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ParticleAttractor",
			string BaseClass = "ParticleAnimator",
			string Description = "",
			Array Tags = 
			[
				"Particle",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "MaxDistance",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "MinDistance",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "Strength",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Animate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ParticleList particleList, Real dt, Mat4Ref transform)",
					Array ParameterList = 
					[
						{
							string Name = "particleList",
							string Type = "ParticleList",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "transform",
							string Type = "Mat4Ref",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetHostRecordEvent",
			string BaseClass = "",
			string Description = "Dispatched when a NetHostRecord is discovered, Updated, or Expired.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "HostRecord",
					string Type = "NetHostRecord",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "SphereCollider",
			string BaseClass = "Collider",
			string Description = "SphereCollider is a basic collision primitive of a sphere.",
			Array Tags = 
			[
				"Physics",
				"Collider",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Radius",
					string Type = "Real",
					string Description = "The radius of the sphere in local space (before transform is applied).",
				},
				{
					string Name = "WorldRadius",
					string Type = "Real",
					string Description = "The radius of the sphere after transform is applied (scale)",
				},
			],
			Array Methods = 
			[
				{
					string Name = "CacheWorldValues",
					string Description = "Gives any derived collider a chance to cache world-space values (e.g. SphereCollider.WorldRadius)",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeLocalInverseInertiaTensor",
					string Description = "Computes the local space (as in not rotated, the scale is still necessary but the translation is assumed to be zero) inertia tensor from the passed in mass.",
					string ReturnType = "void",
					string Parameters = "(real mass, Mat3Ref localInvInertia)",
					Array ParameterList = 
					[
						{
							string Name = "mass",
							string Type = "real",
							string Description = "",
						},
						{
							string Name = "localInvInertia",
							string Type = "Mat3Ref",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldAabbInternal",
					string Description = "Computes the world-space aabb. This is always called after CacheWorldValues has been called. This must be implemented on each collider type. The helper function 'SetWorldAabbFromHalfExtents' exists to compute the aabb from the current rotation and translation with the given world scale half-extent of an aabb.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldBoundingSphereInternal",
					string Description = "Compute the world-space bounding sphere. See ComputeWorldAabb for a description of when and why this is called (but for a sphere). The default behavior is to take the sphere centered at the object's translation with a radius to the furthest away point.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldVolumeInternal",
					string Description = "Compute the volume of this collider in world space. This must be calculated in world space as there's no generic way to scale volume after-the-fact. All colliders that contain a volume should implement this. Some colliders (e.g. HeightMap or Mesh ) don't as they aren't meant to work with rigid bodies. This is an internal function, meaning that it assumes the transform data is already up-to-date (should rarely be called by the outside).",
					string ReturnType = "real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Support",
					string Description = "Support function for GJK/MPR or any other Minkowski difference algorithm. This sets the given support vector to the point (in world space) furthest in the given direction. Almost all colliders should implement this! The main exceptions are colliders that contain multiple primitives (such as MultiConvexMeshCollider ) in which case each primitive type should have this function.",
					string ReturnType = "void",
					string Parameters = "(Vec3 direction, Vec3Ptr support)",
					Array ParameterList = 
					[
						{
							string Name = "direction",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "support",
							string Type = "Vec3Ptr",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "CogPath",
			string BaseClass = "",
			string Description = "",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "Cog",
					string Type = "Cog",
					string Description = "Setting the cog manually may recompute the path if the option is set Getting the cog will attempt to resolve the cog if we don't already have one (or if the path options is set, it will always resolve)",
				},
				{
					string Name = "DirectCog",
					string Type = "Cog",
					string Description = "Setting the cog manually may recompute the path if the option is set Getting the cog will return whatever cog we already resolved, or null (it will not attempt to resolve)",
				},
				{
					string Name = "ErrorOnDirectLinkFail",
					string Type = "Boolean",
					string Description = "Is it an exception/notification if a direct link to the object cannot be resolved?",
				},
				{
					string Name = "ErrorOnPathCantCompute",
					string Type = "Boolean",
					string Description = "Is it an exception/notification if the path to an object cannot be computed?",
				},
				{
					string Name = "ErrorOnResolveToNull",
					string Type = "Boolean",
					string Description = "Is an exception thrown if you try to access the Cog when it's invalid or not found?",
				},
				{
					string Name = "Path",
					string Type = "string",
					string Description = "Setting the path will invalidate the object until the next call to GetCog.",
				},
				{
					string Name = "PathPreference0",
					string Type = "CogPathPreference",
					string Description = "",
				},
				{
					string Name = "PathPreference1",
					string Type = "CogPathPreference",
					string Description = "",
				},
				{
					string Name = "PathPreference2",
					string Type = "CogPathPreference",
					string Description = "",
				},
				{
					string Name = "RelativeTo",
					string Type = "Cog",
					string Description = "The cog that we compute paths relative to.",
				},
				{
					string Name = "Required",
					string Type = "Boolean",
					string Description = "Deprecated (named changed to ErrorOnResolveToNull)",
				},
				{
					string Name = "UpdateCogOnInitialize",
					string Type = "Boolean",
					string Description = "Whether the cog path attempts to resolve an object when the object is fully initialized.",
				},
				{
					string Name = "UpdateCogOnPathChange",
					string Type = "Boolean",
					string Description = "When we set the cog path, should we try and resolve the object (this also detects parse errors)",
				},
				{
					string Name = "UpdatePathOnCogChange",
					string Type = "Boolean",
					string Description = "When we set the cog, should we try and recompute a path to the object?",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Clone",
					string Description = "Creates a new copy of a cog path (since cog paths are reference counted and shared)",
					string ReturnType = "CogPath",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePath",
					string Description = "Computes a path from one object to another (or an absolute path if specified - 'from' can be null) If computing the path fails, this will return an empty string.",
					string ReturnType = "string",
					string Parameters = "(Status status, Cog from, Cog to, CogPathPreference::Enum pref)",
					Array ParameterList = 
					[
						{
							string Name = "status",
							string Type = "Status",
							string Description = "",
						},
						{
							string Name = "from",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "to",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "pref",
							string Type = "CogPathPreference::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePath",
					string Description = "Computes a path from one object to another (or an absolute path if specified - 'from' can be null) If computing the path fails, this will return an empty string.",
					string ReturnType = "string",
					string Parameters = "(Status status, Cog from, Cog to, CogPathPreference::Enum pref0, CogPathPreference::Enum pref1, CogPathPreference::Enum pref2)",
					Array ParameterList = 
					[
						{
							string Name = "status",
							string Type = "Status",
							string Description = "",
						},
						{
							string Name = "from",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "to",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "pref0",
							string Type = "CogPathPreference::Enum",
							string Description = "",
						},
						{
							string Name = "pref1",
							string Type = "CogPathPreference::Enum",
							string Description = "",
						},
						{
							string Name = "pref2",
							string Type = "CogPathPreference::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePath",
					string Description = "Computes a path from one object to another (or an absolute path if specified - 'from' can be null) If computing the path fails, this will return an empty string.",
					string ReturnType = "string",
					string Parameters = "(Cog from, Cog to, CogPathPreference::Enum pref)",
					Array ParameterList = 
					[
						{
							string Name = "from",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "to",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "pref",
							string Type = "CogPathPreference::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DispatchEvent",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(string eventId, Event event)",
					Array ParameterList = 
					[
						{
							string Name = "eventId",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "event",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetCogOrNull",
					string Description = "A safe and simple way to get a cog from a cog path (the cog path itself can be null)",
					string ReturnType = "Cog",
					string Parameters = "(CogPath path)",
					Array ParameterList = 
					[
						{
							string Name = "path",
							string Type = "CogPath",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDispatcherObject",
					string Description = "",
					string ReturnType = "EventDispatcher",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetReceiverObject",
					string Description = "",
					string ReturnType = "EventReceiver",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "QueryComponentId",
					string Description = "",
					string ReturnType = "Component",
					string Parameters = "(TypeIdType typeId)",
					Array ParameterList = 
					[
						{
							string Name = "typeId",
							string Type = "TypeIdType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "QueryComponentType",
					string Description = "Component interface.",
					string ReturnType = "type",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Refresh",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RefreshIfNull",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Resolve",
					string Description = "Resolves a cog from a path and a a relative object (or null for absolute paths) Returns null if it fails to find the cog, and will not throw an exception or assert.",
					string ReturnType = "Cog",
					string Parameters = "(Status status, Cog startFrom, StringParam path)",
					Array ParameterList = 
					[
						{
							string Name = "status",
							string Type = "Status",
							string Description = "",
						},
						{
							string Name = "startFrom",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "path",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Resolve",
					string Description = "Resolves a cog from a path and a a relative object (or null for absolute paths) Returns null if it fails to find the cog, and will not throw an exception or assert.",
					string ReturnType = "Cog",
					string Parameters = "(Cog startFrom, StringParam path)",
					Array ParameterList = 
					[
						{
							string Name = "startFrom",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "path",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Resolve",
					string Description = "Resolves a cog from a path and a a relative object (or null for absolute paths) Returns null if it fails to find the cog, and will not throw an exception or assert.",
					string ReturnType = "Cog",
					string Parameters = "(Status status, Cog startFrom, const CogPathCompiled path)",
					Array ParameterList = 
					[
						{
							string Name = "status",
							string Type = "Status",
							string Description = "",
						},
						{
							string Name = "startFrom",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "path",
							string Type = "const CogPathCompiled",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RestoreLink",
					string Description = "Use to Restore links in serialization.",
					string ReturnType = "Cog",
					string Parameters = "(CogInitializer initializer, Cog owner, Component component, StringParam propertyName)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
						{
							string Name = "owner",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
						{
							string Name = "propertyName",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RestoreLink",
					string Description = "Use to Restore links in serialization.",
					string ReturnType = "Cog",
					string Parameters = "(CogInitializer initializer, Cog owner, StringParam propertyName)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
						{
							string Name = "owner",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "propertyName",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RestoreLink",
					string Description = "Use to Restore links in serialization.",
					string ReturnType = "Cog",
					string Parameters = "(CogInitializer initializer, Component component, StringParam propertyName)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
						{
							string Name = "propertyName",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Hierarchy",
			string BaseClass = "Component",
			string Description = "Component that gives an game object the ability to have child objects and Contains a list of children.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Children",
					string Type = "HierarchyList",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AttachTo",
					string Description = "Signal that the Cog has been attached to another Cog .",
					string ReturnType = "void",
					string Parameters = "(AttachmentInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "AttachmentInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DestroyChildren",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Detached",
					string Description = "Signal that the Cog has been detached from another Cog .",
					string ReturnType = "void",
					string Parameters = "(AttachmentInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "AttachmentInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetSaveFlags",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAllObjectsCreated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TransformUpdate",
					string Description = "Special function for transform updating from editor.",
					string ReturnType = "void",
					string Parameters = "(TransformUpdateInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "TransformUpdateInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Texture",
			string BaseClass = "Resource",
			string Description = "",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "Addressing",
					string Type = "TextureAddressing",
					string Description = "",
				},
				{
					string Name = "Anisotropy",
					string Type = "TextureAnisotropy",
					string Description = "",
				},
				{
					string Name = "Filtering",
					string Type = "TextureFiltering",
					string Description = "",
				},
				{
					string Name = "Format",
					string Type = "TextureFormat",
					string Description = "",
				},
				{
					string Name = "MipMapping",
					string Type = "TextureMipMapping",
					string Description = "",
				},
				{
					string Name = "Size",
					string Type = "Real2",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "DeleteRuntime",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Texture texture)",
					Array ParameterList = 
					[
						{
							string Name = "texture",
							string Type = "Texture",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "NewRuntime",
					string Description = "",
					string ReturnType = "Texture",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SubUpload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Image image, Integer xOffset, Integer yOffset)",
					Array ParameterList = 
					[
						{
							string Name = "image",
							string Type = "Image",
							string Description = "",
						},
						{
							string Name = "xOffset",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "yOffset",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SubUpload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(TextureData textureData, Integer xOffset, Integer yOffset)",
					Array ParameterList = 
					[
						{
							string Name = "textureData",
							string Type = "TextureData",
							string Description = "",
						},
						{
							string Name = "xOffset",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "yOffset",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Upload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer width, Integer height, TextureFormat::Enum format, byte data, Integer size, bool copyData)",
					Array ParameterList = 
					[
						{
							string Name = "width",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "height",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "format",
							string Type = "TextureFormat::Enum",
							string Description = "",
						},
						{
							string Name = "data",
							string Type = "byte",
							string Description = "",
						},
						{
							string Name = "size",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "copyData",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Upload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Image image)",
					Array ParameterList = 
					[
						{
							string Name = "image",
							string Type = "Image",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Upload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(TextureData textureData)",
					Array ParameterList = 
					[
						{
							string Name = "textureData",
							string Type = "TextureData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "BuilderFace",
			string BaseClass = "BuilderElement",
			string Description = "",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "Centroid",
					string Type = "Vector3",
					string Description = "Centroid calculation accounts for all triangles in a face, only use if you know what you are doing.",
				},
				{
					string Name = "HalfEdge",
					string Type = "BuilderEdge",
					string Description = "",
				},
				{
					string Name = "HalfEdgeLink",
					string Type = "Link<BuilderFace>",
					string Description = "",
				},
				{
					string Name = "Max",
					string Type = "Vector3",
					string Description = "",
				},
				{
					string Name = "Min",
					string Type = "Vector3",
					string Description = "",
				},
				{
					string Name = "Normal",
					string Type = "Vector3",
					string Description = "",
				},
				{
					string Name = "Proxy",
					string Type = "BroadPhaseProxy",
					string Description = "",
				},
				{
					string Name = "TriangleCount",
					string Type = "unsignedshort",
					string Description = "",
				},
				{
					string Name = "TriangleList",
					string Type = "FaceTriangleList",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "DrawDebug",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(unsigned space, Transform transform)",
					Array ParameterList = 
					[
						{
							string Name = "space",
							string Type = "unsigned",
							string Description = "",
						},
						{
							string Name = "transform",
							string Type = "Transform",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DrawSelected",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(unsigned space, Transform transform)",
					Array ParameterList = 
					[
						{
							string Name = "space",
							string Type = "unsigned",
							string Description = "",
						},
						{
							string Name = "transform",
							string Type = "Transform",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Extrude",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HEExtrudeOperation op)",
					Array ParameterList = 
					[
						{
							string Name = "op",
							string Type = "HEExtrudeOperation",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ExtrudeSoft",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HEExtrudeOperation op)",
					Array ParameterList = 
					[
						{
							string Name = "op",
							string Type = "HEExtrudeOperation",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetValence",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Array<BuilderEdge> vOut)",
					Array ParameterList = 
					[
						{
							string Name = "vOut",
							string Type = "Array<BuilderEdge>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IntersectAdjacency",
					string Description = "",
					string ReturnType = "BuilderElement",
					string Parameters = "(Ray localRay)",
					Array ParameterList = 
					[
						{
							string Name = "localRay",
							string Type = "Ray",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Normal",
					string Description = "",
					string ReturnType = "Vector3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Position",
					string Description = "",
					string ReturnType = "Vector3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Scale",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HEScaleOperation op)",
					Array ParameterList = 
					[
						{
							string Name = "op",
							string Type = "HEScaleOperation",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ScaleInPlace",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HEScaleInPlaceOperation op)",
					Array ParameterList = 
					[
						{
							string Name = "op",
							string Type = "HEScaleInPlaceOperation",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ScaleInPlaceSoft",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HEScaleInPlaceOperation op)",
					Array ParameterList = 
					[
						{
							string Name = "op",
							string Type = "HEScaleInPlaceOperation",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ScaleSoft",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HEScaleOperation op)",
					Array ParameterList = 
					[
						{
							string Name = "op",
							string Type = "HEScaleOperation",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetFaceNormal",
					string Description = "Assumes normal was computed using the Newell method.",
					string ReturnType = "void",
					string Parameters = "(const Vector3 n)",
					Array ParameterList = 
					[
						{
							string Name = "n",
							string Type = "const Vector3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Translate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HETranslationOperation op)",
					Array ParameterList = 
					[
						{
							string Name = "op",
							string Type = "HETranslationOperation",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TranslateSoft",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HETranslationOperation op)",
					Array ParameterList = 
					[
						{
							string Name = "op",
							string Type = "HETranslationOperation",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ViewportMouseEvent",
			string BaseClass = "MouseEvent",
			string Description = "All mouse events that are forwarded to reactive components or the space use this event to add extra data.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "CameraViewport",
					string Type = "CameraViewport",
					string Description = "Camera viewport that generated this event.",
				},
				{
					string Name = "HitDistance",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "HitNormal",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "HitObject",
					string Type = "Cog",
					string Description = "Object hit in ray cast.",
				},
				{
					string Name = "HitPosition",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "RayDirection",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "RayStart",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldRay",
					string Type = "Ray",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "GetViewport",
					string Description = "",
					string ReturnType = "Viewport",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetViewport",
					string Description = "",
					string ReturnType = "ReactiveViewport",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ToWorldPlane",
					string Description = "The world mouse position on any arbitrary plane.",
					string ReturnType = "Vec3",
					string Parameters = "(Vec3 worldPlaneNormal, Vec3 worldPlanePosition)",
					Array ParameterList = 
					[
						{
							string Name = "worldPlaneNormal",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "worldPlanePosition",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ToWorldPlane",
					string Description = "The world mouse position on any arbitrary plane.",
					string ReturnType = "Vec3",
					string Parameters = "(Vec3 worldPlaneNormal, Vec3 worldPlanePosition)",
					Array ParameterList = 
					[
						{
							string Name = "worldPlaneNormal",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "worldPlanePosition",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ToWorldViewPlane",
					string Description = "The world mouse position on the view plane at view depth.",
					string ReturnType = "Vec3",
					string Parameters = "(Real viewDepth)",
					Array ParameterList = 
					[
						{
							string Name = "viewDepth",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ToWorldViewPlane",
					string Description = "The world mouse position on the view plane at view depth.",
					string ReturnType = "Vec3",
					string Parameters = "(Real viewDepth)",
					Array ParameterList = 
					[
						{
							string Name = "viewDepth",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ToWorldZPlane",
					string Description = "The world mouse position on the z plane at depth.",
					string ReturnType = "Vec3",
					string Parameters = "(Real worldDepth)",
					Array ParameterList = 
					[
						{
							string Name = "worldDepth",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ToWorldZPlane",
					string Description = "The world mouse position on the z plane at depth.",
					string ReturnType = "Vec3",
					string Parameters = "(Real worldDepth)",
					Array ParameterList = 
					[
						{
							string Name = "worldDepth",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Orientation",
			string BaseClass = "Component",
			string Description = "",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "AbsoluteAngle",
					string Type = "Real",
					string Description = "Get the angle of the object about the up vector.",
				},
				{
					string Name = "DefaultOrientationBases",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "GlobalUp",
					string Type = "Real3",
					string Description = "The up in the world that is rotated about when using any LookAt function.",
				},
				{
					string Name = "LocalForward",
					string Type = "Real3",
					string Description = "Returns the un-normalized forward vector.",
				},
				{
					string Name = "LocalRight",
					string Type = "Real3",
					string Description = "Returns the un-normalized right vector.",
				},
				{
					string Name = "LocalToWorldRotation",
					string Type = "Quaternion",
					string Description = "",
				},
				{
					string Name = "LocalUp",
					string Type = "Real3",
					string Description = "Returns the un-normalized up vector.",
				},
				{
					string Name = "Rotation",
					string Type = "Quaternion",
					string Description = "The rotation that this orientation defines. Useful to align the object's bases with the world bases (use the inverse rotation).",
				},
				{
					string Name = "WorldForward",
					string Type = "Real3",
					string Description = "Get the world-space forward vector.",
				},
				{
					string Name = "WorldRight",
					string Type = "Real3",
					string Description = "Get the world-space right vector.",
				},
				{
					string Name = "WorldRotation",
					string Type = "Quaternion",
					string Description = "The rotation that brings your defined basis into the world. The inverse of this brings a world space vector into the object's local space.",
				},
				{
					string Name = "WorldUp",
					string Type = "Real3",
					string Description = "Get the world-space up vector.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AbsoluteAngle",
					string Description = "",
					string ReturnType = "Real",
					string Parameters = "(Cog cog)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AbsoluteAngle",
					string Description = "",
					string ReturnType = "Real",
					string Parameters = "(Vec3 up, Vec3 forward, Vec3 newVector)",
					Array ParameterList = 
					[
						{
							string Name = "up",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "forward",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "newVector",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeSignedAngle",
					string Description = "",
					string ReturnType = "Real",
					string Parameters = "(Vec3 up, Vec3 forward, Vec3 newVector)",
					Array ParameterList = 
					[
						{
							string Name = "up",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "forward",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "newVector",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "EditBasis",
					string Description = "Spawns a proxy transform object so that the basis of the object can be set.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLookAtDirectionRotation",
					string Description = "Gets the forward to look in the given direction. Keeps the current world up.",
					string ReturnType = "Quat",
					string Parameters = "(Vec3 lookDir)",
					Array ParameterList = 
					[
						{
							string Name = "lookDir",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLookAtDirectionWithUpRotation",
					string Description = "Same as GetLookAtDirectionRotation but allows the user to specify the up vector.",
					string ReturnType = "Quat",
					string Parameters = "(Vec3 lookDir, Vec3 up)",
					Array ParameterList = 
					[
						{
							string Name = "lookDir",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "up",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLookAtPointRotation",
					string Description = "Get the rotation so that the forward will look at the given point. Keeps the current world up.",
					string ReturnType = "Quat",
					string Parameters = "(Vec3 lookPoint)",
					Array ParameterList = 
					[
						{
							string Name = "lookPoint",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLookAtPointWithUpRotation",
					string Description = "Same as GetLookAtPointRotation but allows the user to specify the up vector.",
					string ReturnType = "Quat",
					string Parameters = "(Vec3 lookPoint, Vec3 up)",
					Array ParameterList = 
					[
						{
							string Name = "lookPoint",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "up",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "LocalVectors",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Cog cog, Vec3 upOut, Vec3 forwardOut)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "upOut",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "forwardOut",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "LookAtDirection",
					string Description = "Sets the forward to look in the given direction. Keeps the current world up.",
					string ReturnType = "void",
					string Parameters = "(Vec3 lookDir)",
					Array ParameterList = 
					[
						{
							string Name = "lookDir",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "LookAtDirectionWithUp",
					string Description = "Same as LookAtDirection but allows the user to specify the up vector.",
					string ReturnType = "void",
					string Parameters = "(Vec3 lookDir, Vec3 up)",
					Array ParameterList = 
					[
						{
							string Name = "lookDir",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "up",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "LookAtPoint",
					string Description = "Sets the forward to look at the given point. Keeps the current world up.",
					string ReturnType = "void",
					string Parameters = "(Vec3 lookPoint)",
					Array ParameterList = 
					[
						{
							string Name = "lookPoint",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "LookAtPointWithUp",
					string Description = "Same as LookAtPoint but allows the user to specify the up vector.",
					string ReturnType = "void",
					string Parameters = "(Vec3 lookPoint, Vec3 up)",
					Array ParameterList = 
					[
						{
							string Name = "lookPoint",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "up",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnTransformProxyUpdate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(TransformProxyObjectEvent e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "TransformProxyObjectEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OrthoCheck",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SignedAngle",
					string Description = "",
					string ReturnType = "Real",
					string Parameters = "(Vec3 up, Vec3 forward, Vec3 newVector)",
					Array ParameterList = 
					[
						{
							string Name = "up",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "forward",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "newVector",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ToWorld",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Cog cog, Vec3 upOut, Vec3 forwardOut)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "upOut",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "forwardOut",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WorldVectors",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Cog cog, Vec3 upOut, Vec3 forwardOut)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "upOut",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "forwardOut",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "BitStream",
			string BaseClass = "",
			string Description = "Bit-packed data stream.",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "Alignment",
					string Type = "BitAlignment::Enum",
					string Description = "Internal bit alignment policy.",
				},
				{
					string Name = "BitsRead",
					string Type = "Bits",
					string Description = "Also next read position.",
				},
				{
					string Name = "BitsWritten",
					string Type = "Bits",
					string Description = "Also next write position.",
				},
				{
					string Name = "ByteCapacity",
					string Type = "Bytes",
					string Description = "Binary data capacity.",
				},
				{
					string Name = "Data",
					string Type = "byte",
					string Description = "Binary data array.",
				},
				{
					string Name = "WriteBit",
					string Type = "R_ENABLE_IF(is_scalar<T>::value,Bits)Serialize(SerializeDirectionR_ENABLE_IF(is_enum_or_integral<T>::valueis_enum_or_integral<R>::value,Bits)SerializeQuantized(SerializeDirectionR_ENABLE_IF(is_floating_point<T>::value,Bits)SerializeQuantized(SerializeDirectionR_ENABLE_IF(is_enum_or_integral<R>::value,Bits)SerializeQuantized(SerializeDirectionR_ENABLE_IF(is_scalar<T>::value,Bits)SerializeQuantized(SerializeDirectionBits",
					string Description = "Serializes a user-defined value Returns the number of bits serialized if successful, else 0.",
				},
				{
					string Name = "axValue_",
					string Type = "const Rconst R",
					string Description = "",
				},
				{
					string Name = "const",
					string Type = "const Rconst Rconst Rquantum_",
					string Description = "",
				},
				{
					string Name = "inValue_",
					string Type = "const R",
					string Description = "",
				},
				{
					string Name = "quantum_",
					string Type = "const Rconst Rconst R",
					string Description = "",
				},
				{
					string Name = "value_",
					string Type = "WrapAware",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Append",
					string Description = "Appends to the back of the BitStream (Writes up to dataBits, Read from specified bitStream) Returns the number of bits appended.",
					string ReturnType = "Bits",
					string Parameters = "(const BitStream bitStream)",
					Array ParameterList = 
					[
						{
							string Name = "bitStream",
							string Type = "const BitStream",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Append",
					string Description = "Appends to the back of the BitStream (Writes up to dataBits, Read from specified bitStream) Returns the number of bits appended.",
					string ReturnType = "Bits",
					string Parameters = "(const BitStream bitStream, Bits dataBits)",
					Array ParameterList = 
					[
						{
							string Name = "bitStream",
							string Type = "const BitStream",
							string Description = "",
						},
						{
							string Name = "dataBits",
							string Type = "Bits",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AppendAll",
					string Description = "Appends the entirety of the value BitStream to back of this BitStream Returns the number of bits appended.",
					string ReturnType = "Bits",
					string Parameters = "(const BitStream value)",
					Array ParameterList = 
					[
						{
							string Name = "value",
							string Type = "const BitStream",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AssignRemainder",
					string Description = "Clears this BitStream and appends the unread remainder of the value BitStream Returns the number of bits appended.",
					string ReturnType = "Bits",
					string Parameters = "(const BitStream value)",
					Array ParameterList = 
					[
						{
							string Name = "value",
							string Type = "const BitStream",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Clear",
					string Description = "Clears all data written and resets the bitstream, optionally freeing reserved memory.",
					string ReturnType = "void",
					string Parameters = "(bool freeMemory)",
					Array ParameterList = 
					[
						{
							string Name = "freeMemory",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ClearBitsRead",
					string Description = "Clears the number of bits read.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ClearBitsWritten",
					string Description = "Clears the number of bits written.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetBitCapacity",
					string Description = "Returns the data array capacity in bits.",
					string ReturnType = "Bits",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetBitsSerialized",
					string Description = "Returns the number of bits serialized.",
					string ReturnType = "Bits",
					string Parameters = "(SerializeDirection::Enum direction)",
					Array ParameterList = 
					[
						{
							string Name = "direction",
							string Type = "SerializeDirection::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetBitsUnread",
					string Description = "Returns the number of bits unread.",
					string ReturnType = "Bits",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetBitsUnwritten",
					string Description = "Returns the number of bits unwritten.",
					string ReturnType = "Bits",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetBytesRead",
					string Description = "Returns the number of bytes read (Rounded up, ex. 12 bits = 2 bytes)",
					string ReturnType = "Bytes",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetBytesSerialized",
					string Description = "Returns the number of bytes serialized (Rounded up, ex. 12 bits = 2 bytes)",
					string ReturnType = "Bytes",
					string Parameters = "(SerializeDirection::Enum direction)",
					Array ParameterList = 
					[
						{
							string Name = "direction",
							string Type = "SerializeDirection::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetBytesUnread",
					string Description = "Returns the number of bytes unread (Rounded up, ex. 12 bits = 2 bytes)",
					string ReturnType = "Bytes",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetBytesUnwritten",
					string Description = "Returns the number of bytes unwritten (Rounded up, ex. 12 bits = 2 bytes)",
					string ReturnType = "Bytes",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetBytesWritten",
					string Description = "Returns the number of bytes written (Rounded up, ex. 12 bits = 2 bytes)",
					string ReturnType = "Bytes",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDataExposed",
					string Description = "Returns the data array exposed for writing to the internal buffer directly. Be sure there's enough room by calling Reserve() prior to this call and inform the BitStream of data written by calling SetBitsWritten() or SetBytesWritten() afterwards.",
					string ReturnType = "byte",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initializes the BitStream .",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsEmpty",
					string Description = "Returns true if the BitStream is empty (0 bits written), else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Measure",
					string Description = "Measures a boolean value Returns the number of bits required to serialize the specified value.",
					string ReturnType = "Bits",
					string Parameters = "(bool value)",
					Array ParameterList = 
					[
						{
							string Name = "value",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Measure",
					string Description = "Measures a UintN value Returns the number of bits required to serialize the specified value.",
					string ReturnType = "Bits",
					string Parameters = "(UintN<N,WrapAware> value)",
					Array ParameterList = 
					[
						{
							string Name = "value",
							string Type = "UintN<N,WrapAware>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Measure",
					string Description = "Measures a fixed array of values Returns the number of bits required to serialize the specified value.",
					string ReturnType = "Bits",
					string Parameters = "(const T() array)",
					Array ParameterList = 
					[
						{
							string Name = "array",
							string Type = "const T()",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Measure",
					string Description = "Measures a fixed array of values Returns the number of bits required to serialize the specified value.",
					string ReturnType = "Bits",
					string Parameters = "(const T array, size_t size)",
					Array ParameterList = 
					[
						{
							string Name = "array",
							string Type = "const T",
							string Description = "",
						},
						{
							string Name = "size",
							string Type = "size_t",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Measure",
					string Description = "Measures a string value Returns the number of bits required to serialize the specified value.",
					string ReturnType = "Bits",
					string Parameters = "(const string value)",
					Array ParameterList = 
					[
						{
							string Name = "value",
							string Type = "const string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PeekStringBytes",
					string Description = "Returns the byte length of the string to be read next (including null terminator), else 0.",
					string ReturnType = "Bytes",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "R_ENABLE_IF",
					string Description = "Measures a floating-point value Returns the number of bits required to serialize the specified value.",
					string ReturnType = "static ",
					string Parameters = "(is_floating_point<T>::value, Bits)",
					Array ParameterList = 
					[
						{
							string Name = "",
							string Type = "is_floating_point<T>::value",
							string Description = "",
						},
						{
							string Name = "",
							string Type = "Bits",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "R_ENABLE_IF",
					string Description = "Measures an integral value Returns the number of bits required to serialize the specified value.",
					string ReturnType = "static ",
					string Parameters = "(is_integral<T>::value, Bits)",
					Array ParameterList = 
					[
						{
							string Name = "",
							string Type = "is_integral<T>::value",
							string Description = "",
						},
						{
							string Name = "",
							string Type = "Bits",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "R_ENABLE_IF",
					string Description = "Measures an enum value Returns the number of bits required to serialize the specified value.",
					string ReturnType = "static ",
					string Parameters = "(is_enum<T>::value, Bits)",
					Array ParameterList = 
					[
						{
							string Name = "",
							string Type = "is_enum<T>::value",
							string Description = "",
						},
						{
							string Name = "",
							string Type = "Bits",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "R_ENABLE_IF",
					string Description = "Measures a user-defined value Returns the number of bits required to serialize the specified value.",
					string ReturnType = "static ",
					string Parameters = "(is_scalar<T>::value, Bits)",
					Array ParameterList = 
					[
						{
							string Name = "",
							string Type = "is_scalar<T>::value",
							string Description = "",
						},
						{
							string Name = "",
							string Type = "Bits",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "R_ENABLE_IF",
					string Description = "Measures an enum value bound within an inclusive range discretized to the nearest quantum interval value (using only the bits necessary to represent all possible values) Returns the number of bits required to serialize the specified value.",
					string ReturnType = "static ",
					string Parameters = "(is_enum<R>::valueis_enum_or_integral<R>::value, Bits)",
					Array ParameterList = 
					[
						{
							string Name = "",
							string Type = "is_enum<R>::valueis_enum_or_integral<R>::value",
							string Description = "",
						},
						{
							string Name = "",
							string Type = "Bits",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "R_ENABLE_IF",
					string Description = "Measures an integral value bound within an inclusive range discretized to the nearest quantum interval value (using only the bits necessary to represent all possible values) Returns the number of bits required to serialize the specified value.",
					string ReturnType = "static ",
					string Parameters = "(is_integral<R>::valueis_integral<R>::value, Bits)",
					Array ParameterList = 
					[
						{
							string Name = "",
							string Type = "is_integral<R>::valueis_integral<R>::value",
							string Description = "",
						},
						{
							string Name = "",
							string Type = "Bits",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "R_ENABLE_IF",
					string Description = "Measures a floating-point value bound within an inclusive range discretized to the nearest quantum interval value (using only the bits necessary to represent all possible values) Returns the number of bits required to serialize the specified value.",
					string ReturnType = "static ",
					string Parameters = "(is_floating_point<R>::value, Bits)",
					Array ParameterList = 
					[
						{
							string Name = "",
							string Type = "is_floating_point<R>::value",
							string Description = "",
						},
						{
							string Name = "",
							string Type = "Bits",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "R_ENABLE_IF",
					string Description = "Measures a UintN value bound within an inclusive range discretized to the nearest quantum interval value (using only the bits necessary to represent all possible values) Returns the number of bits required to serialize the specified value.",
					string ReturnType = "static ",
					string Parameters = "(is_enum_or_integral<R>::value, Bits)",
					Array ParameterList = 
					[
						{
							string Name = "",
							string Type = "is_enum_or_integral<R>::value",
							string Description = "",
						},
						{
							string Name = "",
							string Type = "Bits",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "R_ENABLE_IF",
					string Description = "Measures a user-defined value bound within an inclusive range discretized to the nearest quantum interval value (using only the bits necessary to represent all possible values) Returns the number of bits required to serialize the specified value.",
					string ReturnType = "static ",
					string Parameters = "(is_scalar<R>::value, Bits)",
					Array ParameterList = 
					[
						{
							string Name = "",
							string Type = "is_scalar<R>::value",
							string Description = "",
						},
						{
							string Name = "",
							string Type = "Bits",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Read",
					string Description = "Reads a fixed array of values Returns the number of bits read if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(T array, size_t size)",
					Array ParameterList = 
					[
						{
							string Name = "array",
							string Type = "T",
							string Description = "",
						},
						{
							string Name = "size",
							string Type = "size_t",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Read",
					string Description = "Reads a UintN value Returns the number of bits read if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(UintN<N,WrapAware> value)",
					Array ParameterList = 
					[
						{
							string Name = "value",
							string Type = "UintN<N,WrapAware>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Read",
					string Description = "Reads a fixed array of values Returns the number of bits read if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(T() array)",
					Array ParameterList = 
					[
						{
							string Name = "array",
							string Type = "T()",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Read",
					string Description = "Reads a boolean value Returns the number of bits read if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(bool value)",
					Array ParameterList = 
					[
						{
							string Name = "value",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Read",
					string Description = "Reads a string value Returns the number of bits read if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(string value)",
					Array ParameterList = 
					[
						{
							string Name = "value",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReadBit",
					string Description = "Reads a single bit Returns the number of bits read if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(bool value)",
					Array ParameterList = 
					[
						{
							string Name = "value",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReadBits",
					string Description = "Reads multiple bits Returns the number of bits read if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(byte data, Bits dataBits)",
					Array ParameterList = 
					[
						{
							string Name = "data",
							string Type = "byte",
							string Description = "",
						},
						{
							string Name = "dataBits",
							string Type = "Bits",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReadByte",
					string Description = "Reads a single byte Returns the number of bits read if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(uint8 value)",
					Array ParameterList = 
					[
						{
							string Name = "value",
							string Type = "uint8",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReadBytes",
					string Description = "Reads multiple bytes Returns the number of bits read if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(byte data, Bytes dataBytes)",
					Array ParameterList = 
					[
						{
							string Name = "data",
							string Type = "byte",
							string Description = "",
						},
						{
							string Name = "dataBytes",
							string Type = "Bytes",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReadUntilByteAligned",
					string Description = "Reads until a byte boundary is reached Returns the number of bits read.",
					string ReturnType = "Bits",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Reallocate",
					string Description = "Reallocates to the specified capacity, copying data if copyData is enabled.",
					string ReturnType = "void",
					string Parameters = "(Bytes capacity, bool copyData)",
					Array ParameterList = 
					[
						{
							string Name = "capacity",
							string Type = "Bytes",
							string Description = "",
						},
						{
							string Name = "copyData",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReallocateIfNecessary",
					string Description = "Reallocates if necessary to fit the additional bits.",
					string ReturnType = "void",
					string Parameters = "(Bits additionalBits)",
					Array ParameterList = 
					[
						{
							string Name = "additionalBits",
							string Type = "Bits",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Reserve",
					string Description = "Reserves at least the specified memory capacity, reallocating if necessary.",
					string ReturnType = "void",
					string Parameters = "(Bytes capacity)",
					Array ParameterList = 
					[
						{
							string Name = "capacity",
							string Type = "Bytes",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serializes an integral value Returns the number of bits serialized if successful, else 0.",
					string ReturnType = "R_ENABLE_IF(is_enum_or_integral<T>::value,Bits)Serialize(SerializeDirectionR_ENABLE_IF",
					string Parameters = "(SerializeDirection::Enum direction, const T() array)",
					Array ParameterList = 
					[
						{
							string Name = "direction",
							string Type = "SerializeDirection::Enum",
							string Description = "",
						},
						{
							string Name = "array",
							string Type = "const T()",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serializes a boolean value Returns the number of bits serialized if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(SerializeDirection::Enum direction, bool value)",
					Array ParameterList = 
					[
						{
							string Name = "direction",
							string Type = "SerializeDirection::Enum",
							string Description = "",
						},
						{
							string Name = "value",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serializes a string value Returns the number of bits serialized if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(SerializeDirection::Enum direction, string value)",
					Array ParameterList = 
					[
						{
							string Name = "direction",
							string Type = "SerializeDirection::Enum",
							string Description = "",
						},
						{
							string Name = "value",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serializes a fixed array of values Returns the number of bits written if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(SerializeDirection::Enum direction, const T array, size_t size)",
					Array ParameterList = 
					[
						{
							string Name = "direction",
							string Type = "SerializeDirection::Enum",
							string Description = "",
						},
						{
							string Name = "array",
							string Type = "const T",
							string Description = "",
						},
						{
							string Name = "size",
							string Type = "size_t",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serializes a UintN value Returns the number of bits serialized if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(SerializeDirection::Enum direction, UintN<N,WrapAware> value)",
					Array ParameterList = 
					[
						{
							string Name = "direction",
							string Type = "SerializeDirection::Enum",
							string Description = "",
						},
						{
							string Name = "value",
							string Type = "UintN<N,WrapAware>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SerializeBit",
					string Description = "Serializes a single bit Returns the number of bits serialized if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(SerializeDirection::Enum direction, bool value)",
					Array ParameterList = 
					[
						{
							string Name = "direction",
							string Type = "SerializeDirection::Enum",
							string Description = "",
						},
						{
							string Name = "value",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SerializeBits",
					string Description = "Serializes multiple bits Returns the number of bits serialized if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(SerializeDirection::Enum direction, byte data, Bits dataBits)",
					Array ParameterList = 
					[
						{
							string Name = "direction",
							string Type = "SerializeDirection::Enum",
							string Description = "",
						},
						{
							string Name = "data",
							string Type = "byte",
							string Description = "",
						},
						{
							string Name = "dataBits",
							string Type = "Bits",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SerializeByte",
					string Description = "Serializes a single byte Returns the number of bits serialized if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(SerializeDirection::Enum direction, uint8 value)",
					Array ParameterList = 
					[
						{
							string Name = "direction",
							string Type = "SerializeDirection::Enum",
							string Description = "",
						},
						{
							string Name = "value",
							string Type = "uint8",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SerializeBytes",
					string Description = "Serializes multiple bytes Returns the number of bits serialized if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(SerializeDirection::Enum direction, byte data, Bytes dataBytes)",
					Array ParameterList = 
					[
						{
							string Name = "direction",
							string Type = "SerializeDirection::Enum",
							string Description = "",
						},
						{
							string Name = "data",
							string Type = "byte",
							string Description = "",
						},
						{
							string Name = "dataBytes",
							string Type = "Bytes",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetBytesRead",
					string Description = "Sets the number of bytes read.",
					string ReturnType = "void",
					string Parameters = "(Bytes bytesRead)",
					Array ParameterList = 
					[
						{
							string Name = "bytesRead",
							string Type = "Bytes",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetBytesWritten",
					string Description = "Sets the number of bytes written.",
					string ReturnType = "void",
					string Parameters = "(Bytes bytesWritten)",
					Array ParameterList = 
					[
						{
							string Name = "bytesWritten",
							string Type = "Bytes",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TrimFront",
					string Description = "Trims the front of the BitStream (Writes up to dataBits bits to a copy, Read from this bitStream, and overwrites this bitStream with the copy) Returns the number of bits trimmed.",
					string ReturnType = "Bits",
					string Parameters = "(Bits dataBits)",
					Array ParameterList = 
					[
						{
							string Name = "dataBits",
							string Type = "Bits",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TrimFront",
					string Description = "Trims the front of the BitStream (Writes up to dataBits bits to a copy, Read from this bitStream, and overwrites this bitStream with the copy) Returns the number of bits trimmed.",
					string ReturnType = "Bits",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unread",
					string Description = "Unreads the specified number of bits.",
					string ReturnType = "void",
					string Parameters = "(Bits bitsToUnread)",
					Array ParameterList = 
					[
						{
							string Name = "bitsToUnread",
							string Type = "Bits",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Write",
					string Description = "Writes a boolean value Returns the number of bits written if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(bool value)",
					Array ParameterList = 
					[
						{
							string Name = "value",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Write",
					string Description = "Writes a string value Returns the number of bits written if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(const string value)",
					Array ParameterList = 
					[
						{
							string Name = "value",
							string Type = "const string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Write",
					string Description = "Writes a fixed array of values Returns the number of bits written if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(const T() array)",
					Array ParameterList = 
					[
						{
							string Name = "array",
							string Type = "const T()",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Write",
					string Description = "Writes a UintN value Returns the number of bits written if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(UintN<N,WrapAware> value)",
					Array ParameterList = 
					[
						{
							string Name = "value",
							string Type = "UintN<N,WrapAware>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Write",
					string Description = "Writes a fixed array of values Returns the number of bits written if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(const T array, size_t size)",
					Array ParameterList = 
					[
						{
							string Name = "array",
							string Type = "const T",
							string Description = "",
						},
						{
							string Name = "size",
							string Type = "size_t",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WriteBits",
					string Description = "Writes multiple bits Returns the number of bits written if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(const byte data, Bits dataBits)",
					Array ParameterList = 
					[
						{
							string Name = "data",
							string Type = "const byte",
							string Description = "",
						},
						{
							string Name = "dataBits",
							string Type = "Bits",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WriteByte",
					string Description = "Writes a single byte Returns the number of bits written if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(uint8 value)",
					Array ParameterList = 
					[
						{
							string Name = "value",
							string Type = "uint8",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WriteBytes",
					string Description = "Writes multiple bytes Returns the number of bits written if successful, else 0.",
					string ReturnType = "Bits",
					string Parameters = "(const byte data, Bytes dataBytes)",
					Array ParameterList = 
					[
						{
							string Name = "data",
							string Type = "const byte",
							string Description = "",
						},
						{
							string Name = "dataBytes",
							string Type = "Bytes",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WriteUntilByteAligned",
					string Description = "Writes until a byte boundary is reached Returns the number of bits written.",
					string ReturnType = "Bits",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator!=",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(const BitStream rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const BitStream",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator<",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(const BitStream rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const BitStream",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator=",
					string Description = "Move Assignment Operator.",
					string ReturnType = "BitStream",
					string Parameters = "(MoveReference<BitStream> rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "MoveReference<BitStream>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator=",
					string Description = "Copy Assignment Operator.",
					string ReturnType = "BitStream",
					string Parameters = "(const BitStream rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const BitStream",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator==",
					string Description = "Comparison Operators.",
					string ReturnType = "bool",
					string Parameters = "(const BitStream rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const BitStream",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Keyboard",
			string BaseClass = "EventObject",
			string Description = "Keyboard representing the physical keyboard.",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "Instance",
					string Type = "Keyboard",
					string Description = "",
				},
				{
					string Name = "States",
					string Type = "byte",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Clear",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetKeyName",
					string Description = "Gets a string name of a particular key.",
					string ReturnType = "string",
					string Parameters = "(Keys::Enum key)",
					Array ParameterList = 
					[
						{
							string Name = "key",
							string Type = "Keys::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "KeyIsDown",
					string Description = "Is the particular currently down.",
					string ReturnType = "bool",
					string Parameters = "(Keys::Enum key)",
					Array ParameterList = 
					[
						{
							string Name = "key",
							string Type = "Keys::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "KeyIsPressed",
					string Description = "Is the key pressed this frame.",
					string ReturnType = "bool",
					string Parameters = "(Keys::Enum key)",
					Array ParameterList = 
					[
						{
							string Name = "key",
							string Type = "Keys::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "KeyIsReleased",
					string Description = "Is the key released this frame.",
					string ReturnType = "bool",
					string Parameters = "(Keys::Enum key)",
					Array ParameterList = 
					[
						{
							string Name = "key",
							string Type = "Keys::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "KeyIsUp",
					string Description = "Is the particular currently up.",
					string ReturnType = "bool",
					string Parameters = "(Keys::Enum key)",
					Array ParameterList = 
					[
						{
							string Name = "key",
							string Type = "Keys::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Update",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateKeys",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(KeyboardEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "KeyboardEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "WebRequester",
			string BaseClass = "Component",
			string Description = "A component we can use to facilitate web requests.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Url",
					string Type = "string",
					string Description = "Get and set the url that we make requests to.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Clear",
					string Description = "Clear headers and post data.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Component Interface.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnWebResponse",
					string Description = "Occurs when the request gives us a response (with data)",
					string ReturnType = "void",
					string Parameters = "(WebResponseEvent e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "WebResponseEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Run",
					string Description = "Run the web request (we should get data back in a WebResponse event)",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetHeader",
					string Description = "Add a header to the web request.",
					string ReturnType = "void",
					string Parameters = "(string name, string data)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "data",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetPostData",
					string Description = "Add Post data to the request, this will also change the request to a post request.",
					string ReturnType = "void",
					string Parameters = "(string data)",
					Array ParameterList = 
					[
						{
							string Name = "data",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "CameraViewport",
			string BaseClass = "",
			string Description = "",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "CameraPath",
					string Type = "CogPath",
					string Description = "",
				},
				{
					string Name = "FinalTexture",
					string Type = "Texture",
					string Description = "",
				},
				{
					string Name = "ForwardViewportEvents",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "MarginColor",
					string Type = "Real4",
					string Description = "",
				},
				{
					string Name = "MouseWorldRay",
					string Type = "Ray",
					string Description = "Get the world ray starting from the mouse.",
				},
				{
					string Name = "NormalizedOffset",
					string Type = "Real2",
					string Description = "",
				},
				{
					string Name = "NormalizedSize",
					string Type = "Real2",
					string Description = "",
				},
				{
					string Name = "RenderInEditor",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "RenderInGame",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "RenderOrder",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "RenderToViewport",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "RendererPath",
					string Type = "CogPath",
					string Description = "",
				},
				{
					string Name = "ResolutionOrAspect",
					string Type = "Real2",
					string Description = "Target resolution or base aspect ratio used with scaling mode.",
				},
				{
					string Name = "ViewToPerspective",
					string Type = "Real4x4",
					string Description = "",
				},
				{
					string Name = "ViewportHasFocus",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "ViewportOffset",
					string Type = "Real2",
					string Description = "The current offset of the viewport, in pixels.",
				},
				{
					string Name = "ViewportOffsetWithMargin",
					string Type = "Real2",
					string Description = "The current offset of the viewport's margin, in pixels.",
				},
				{
					string Name = "ViewportResolution",
					string Type = "Real2",
					string Description = "The current resolution of the viewport.",
				},
				{
					string Name = "ViewportResolutionWithMargin",
					string Type = "Real2",
					string Description = "The current resolution of the viewport including margin.",
				},
				{
					string Name = "ViewportScaling",
					string Type = "ViewportScaling",
					string Description = "",
				},
				{
					string Name = "WorldToPerspective",
					string Type = "Real4x4",
					string Description = "",
				},
				{
					string Name = "WorldToView",
					string Type = "Real4x4",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "CheckSetup",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ClearSetup",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ConfigureViewport",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateViewport",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Camera camera)",
					Array ParameterList = 
					[
						{
							string Name = "camera",
							string Type = "Camera",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAspectRatio",
					string Description = "",
					string ReturnType = "Real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetCameraCog",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetViewportSize",
					string Description = "",
					string ReturnType = "Vec2",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAllObjectsCreated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnCameraDestroyed",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ObjectEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "ObjectEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnCameraPathChanged",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogPathEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "CogPathEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnRenderTasksUpdateInternal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(RenderTasksEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "RenderTasksEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnUpdateActiveCameras",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Event event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ScreenToViewport",
					string Description = "Convert a screen point to a point reletive to the viewport.",
					string ReturnType = "Vec2",
					string Parameters = "(Vec2 screenPoint)",
					Array ParameterList = 
					[
						{
							string Name = "screenPoint",
							string Type = "Vec2",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ScreenToWorldPlane",
					string Description = "Convert the screen point to a position on a given plane.",
					string ReturnType = "Vec3",
					string Parameters = "(Vec2 screenPoint, Vec3 worldPlaneNormal, Vec3 worldPlanePosition)",
					Array ParameterList = 
					[
						{
							string Name = "screenPoint",
							string Type = "Vec2",
							string Description = "",
						},
						{
							string Name = "worldPlaneNormal",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "worldPlanePosition",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ScreenToWorldRay",
					string Description = "Convert a screen point to a ray.",
					string ReturnType = "Ray",
					string Parameters = "(Vec2 screenPoint)",
					Array ParameterList = 
					[
						{
							string Name = "screenPoint",
							string Type = "Vec2",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ScreenToWorldViewPlane",
					string Description = "Convert the screen point to a position on the view plane at a given depth.",
					string ReturnType = "Vec3",
					string Parameters = "(Vec2 screenPoint, Real viewDepth)",
					Array ParameterList = 
					[
						{
							string Name = "screenPoint",
							string Type = "Vec2",
							string Description = "",
						},
						{
							string Name = "viewDepth",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ScreenToWorldZPlane",
					string Description = "Convert the screen point to a position on the z plane at a given depth.",
					string ReturnType = "Vec3",
					string Parameters = "(Vec2 screenPoint, Real worldDepth)",
					Array ParameterList = 
					[
						{
							string Name = "screenPoint",
							string Type = "Vec2",
							string Description = "",
						},
						{
							string Name = "worldDepth",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendSortEvent",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(GraphicalSortEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "GraphicalSortEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetActiveCamera",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Camera camera)",
					Array ParameterList = 
					[
						{
							string Name = "camera",
							string Type = "Camera",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetGameWidgetOverride",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(GameWidget gameWidget)",
					Array ParameterList = 
					[
						{
							string Name = "gameWidget",
							string Type = "GameWidget",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ViewPlaneSize",
					string Description = "Size of the screen at a Depth.",
					string ReturnType = "Vec2",
					string Parameters = "(Real viewDepth)",
					Array ParameterList = 
					[
						{
							string Name = "viewDepth",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ViewportTakeFocus",
					string Description = "Returns whether or not it succeeded in taking focus. It can fail if mRenderToViewport is false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ViewportToScreen",
					string Description = "Convert a viewport point to a screen point.",
					string ReturnType = "Vec2",
					string Parameters = "(Vec2 viewportPoint)",
					Array ParameterList = 
					[
						{
							string Name = "viewportPoint",
							string Type = "Vec2",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WorldToScreen",
					string Description = "Convert a world point to a screen point.",
					string ReturnType = "Vec2",
					string Parameters = "(Vec3 worldPoint)",
					Array ParameterList = 
					[
						{
							string Name = "worldPoint",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LockStepGamepadUpdateEvent",
			string BaseClass = "LockStepGamepadEvent",
			string Description = "A synced gamepad update event.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "LeftStick",
					string Type = "Vec2",
					string Description = "Current offset [0, 1] from the center of the left stick.",
				},
				{
					string Name = "LeftStickDelta",
					string Type = "Vec2",
					string Description = "Change in the left stick this frame.",
				},
				{
					string Name = "LeftTrigger",
					string Type = "Real",
					string Description = "How much the left trigger is down [0, 1].",
				},
				{
					string Name = "RightStick",
					string Type = "Vec2",
					string Description = "Current offset [0, 1] from the center of the right stick.",
				},
				{
					string Name = "RightStickDelta",
					string Type = "Vec2",
					string Description = "Change in the right stick this frame.",
				},
				{
					string Name = "RightTrigger",
					string Type = "Real",
					string Description = "How much the right trigger is down [0, 1].",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serialization of the event.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetUserLostObjectOwnership",
			string BaseClass = "",
			string Description = "Dispatched after the net user loses network ownership of a net object.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "CurrentNetUserOwner",
					string Type = "Cog",
					string Description = "",
				},
				{
					string Name = "LostObject",
					string Type = "Cog",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "GenericPhysicsMesh",
			string BaseClass = "Resource",
			string Description = "Base class of PhysicsMesh and convex mesh. Stores the actual mesh (no optimization structure, that is stored by a derived type) and info about the mesh such as mass and inertia. Used so that there is a common mesh class for physics to work with.",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "Indices",
					string Type = "PhysicsMeshIndexData",
					string Description = "The index buffer data of this mesh.",
				},
				{
					string Name = "Vertices",
					string Type = "PhysicsMeshVertexData",
					string Description = "The vertex buffer data of this mesh.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "CastRayGeneric",
					string Description = "RayCasts a local-space ray against the underlying vertex/index buffer. No mid-phase or optimizations are performed.",
					string ReturnType = "bool",
					string Parameters = "(const Ray localRay, ProxyResult result, BaseCastFilter filter)",
					Array ParameterList = 
					[
						{
							string Name = "localRay",
							string Type = "const Ray",
							string Description = "",
						},
						{
							string Name = "result",
							string Type = "ProxyResult",
							string Description = "",
						},
						{
							string Name = "filter",
							string Type = "BaseCastFilter",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CastRayTriangle",
					string Description = "RayCasts against the given triangle (the index is needed for the result's shape index) and fills out the appropriate info (t, points, normals, etc...)",
					string ReturnType = "bool",
					string Parameters = "(const Ray localRay, const Triangle tri, Integer triIndex, ProxyResult result, BaseCastFilter filter)",
					Array ParameterList = 
					[
						{
							string Name = "localRay",
							string Type = "const Ray",
							string Description = "",
						},
						{
							string Name = "tri",
							string Type = "const Triangle",
							string Description = "",
						},
						{
							string Name = "triIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "result",
							string Type = "ProxyResult",
							string Description = "",
						},
						{
							string Name = "filter",
							string Type = "BaseCastFilter",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeLocalCenterOfMass",
					string Description = "Computes the center of mass of the mesh in local space.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeLocalVolume",
					string Description = "Compute the volume of the mesh in local space.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeScaledCenterOfMass",
					string Description = "Computes and returns the center of mass in LocalScaled-space.",
					string ReturnType = "Vec3",
					string Parameters = "(Vec3 worldScale)",
					Array ParameterList = 
					[
						{
							string Name = "worldScale",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeScaledInvInertiaTensor",
					string Description = "Computes the LocalScaled-space inertia tensor. The inertia tensor cannot be computed and stored in local space then scaled later when there is non-uniform scale (this might actually be wrong, double check this later).",
					string ReturnType = "Mat3",
					string Parameters = "(Vec3 worldScale, real worldMass)",
					Array ParameterList = 
					[
						{
							string Name = "worldScale",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "worldMass",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeScaledVolume",
					string Description = "Computes and returns the volume in LocalScaled-space.",
					string ReturnType = "real",
					string Parameters = "(Vec3 worldScale)",
					Array ParameterList = 
					[
						{
							string Name = "worldScale",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CopyTo",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(GenericPhysicsMesh destination)",
					Array ParameterList = 
					[
						{
							string Name = "destination",
							string Type = "GenericPhysicsMesh",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DrawEdges",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Mat4Param transform, ByteColor color)",
					Array ParameterList = 
					[
						{
							string Name = "transform",
							string Type = "Mat4Param",
							string Description = "",
						},
						{
							string Name = "color",
							string Type = "ByteColor",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DrawFaceNormals",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Mat4Param transform, ByteColor color)",
					Array ParameterList = 
					[
						{
							string Name = "transform",
							string Type = "Mat4Param",
							string Description = "",
						},
						{
							string Name = "color",
							string Type = "ByteColor",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DrawFaces",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Mat4Param transform, ByteColor color)",
					Array ParameterList = 
					[
						{
							string Name = "transform",
							string Type = "Mat4Param",
							string Description = "",
						},
						{
							string Name = "color",
							string Type = "ByteColor",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ForceRebuild",
					string Description = "Recomputes mass, volume, the local space aabb, and internal edge information. If a mesh wants to do something special (such as a mid-phase) then it should override this. Note: Inertia is not calculated as it cannot be (non-uniformly) scaled afterwards.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GenerateInternalEdgeData",
					string Description = "Generates the voronoi region data for internal edge catching prevention. Virtual so that any mesh can use its appropriate mid-phase for optimization.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetIndexArray",
					string Description = "",
					string ReturnType = "const IndexArray",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetInfoMap",
					string Description = "Returns the info map used for correcting internal edges.",
					string ReturnType = "TriangleInfoMap",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetModified",
					string Description = "Is the mesh currently dirty (modified without having been updated)",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetTriangle",
					string Description = "Returns the triangle at the given index. Note: the index is not from the index buffer, it is the triangle number index (e.g. index 4 is triangle number 3 because of 0 based indexing).",
					string ReturnType = "Triangle",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetTriangleCount",
					string Description = "Returns the number of triangles in the mesh.",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetTriangleFromIndexBufferIndex",
					string Description = "Creates the triangle defined by the 3 indices in the index buffer starting at the provided index. This should rarely be used and is mostly a helper for GetTriangle() .",
					string ReturnType = "Triangle",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetValid",
					string Description = "Is the mesh in an invalid state? This happens if the user modifies the mesh such that the indices and vertices are mismatched. In this case the mesh should enter a dormant state.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetVertexArray",
					string Description = "",
					string ReturnType = "const Vec3Array",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnResourceModified",
					string Description = "Called when a mesh is modified. This is typically done when the vertices/indices are modified in script.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ResourceModified",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Save",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(string filename)",
					Array ParameterList = 
					[
						{
							string Name = "filename",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Support",
					string Description = "Basic Minkowski space support function. Just checks all of the stored vertices in O(n) time.",
					string ReturnType = "void",
					string Parameters = "(Vec3 localDirection, Vec3Ptr support)",
					Array ParameterList = 
					[
						{
							string Name = "localDirection",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "support",
							string Type = "Vec3Ptr",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Support",
					string Description = "Basic Minkowski space support function. Just checks all of the stored vertices in O(n) time.",
					string ReturnType = "void",
					string Parameters = "(const Vec3Array points, Vec3 localDirection, Vec3Ptr support)",
					Array ParameterList = 
					[
						{
							string Name = "points",
							string Type = "const Vec3Array",
							string Description = "",
						},
						{
							string Name = "localDirection",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "support",
							string Type = "Vec3Ptr",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAndNotifyIfModified",
					string Description = "Rebuild all extra mesh information if it is currently modified. This includes things like the center of mass, volume, aabb, edge info and more (some derived types may have a mid-phase, etc...)",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Upload",
					string Description = "Uploads a new set of points and indices, then calls ForceRebuild.",
					string ReturnType = "void",
					string Parameters = "(const Vec3Array points, const IndexArray indices)",
					Array ParameterList = 
					[
						{
							string Name = "points",
							string Type = "const Vec3Array",
							string Description = "",
						},
						{
							string Name = "indices",
							string Type = "const IndexArray",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Validate",
					string Description = "Check if the mesh is valid. Optionally throw a script exception if it is invalid.",
					string ReturnType = "bool",
					string Parameters = "(bool throwExceptionIfInvalid)",
					Array ParameterList = 
					[
						{
							string Name = "throwExceptionIfInvalid",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ObjectStore",
			string BaseClass = "EventObject",
			string Description = "Object cache is use to store objects at runtime.",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "CachedObjList",
					string Type = "ResourceTable",
					string Description = "",
				},
				{
					string Name = "StoreName",
					string Type = "string",
					string Description = "Set the object store name. This is to prevent store name conflicts.",
				},
				{
					string Name = "StorePath",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "SubStores",
					string Type = "Array<ObjectStore>",
					string Description = "",
				},
				{
					string Name = "UpdateCache",
					string Type = "bool",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ClearStore",
					string Description = "Clear the store.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Erase",
					string Description = "Attempts to remove an object from the store.",
					string ReturnType = "void",
					string Parameters = "(string name)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindOrCreateSubStore",
					string Description = "Create a substore of this objectstore (basically a child store)",
					string ReturnType = "ObjectStore",
					string Parameters = "(string name)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetFile",
					string Description = "",
					string ReturnType = "string",
					string Parameters = "(string name)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetObjectList",
					string Description = "Returns list of all the objects currently stored.",
					string ReturnType = "ResourceTable",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsStored",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(string name)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Restore",
					string Description = "Restore an object to the space.",
					string ReturnType = "Cog",
					string Parameters = "(string name, Space space)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "space",
							string Type = "Space",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RestoreOrArchetype",
					string Description = "Restore an object if it is not stored use the archetype to create it.",
					string ReturnType = "Cog",
					string Parameters = "(string name, Archetype archetype, Space space)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "archetype",
							string Type = "Archetype",
							string Description = "",
						},
						{
							string Name = "space",
							string Type = "Space",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetUpDirectory",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Store",
					string Description = "Store an object.",
					string ReturnType = "StoreResult::Enum",
					string Parameters = "(string name, Cog object)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "object",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateObjectListCache",
					string Description = "Force updating list of files that were on the disk.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ObjectLinkAnchor",
			string BaseClass = "Component",
			string Description = "Component used to keep track of what ObjectLinks a cog has. This component is added dynamically whenever a ObjectLink is added to a cog that did not contain an ObjectLink before. This can be used to traverse across linked objects and find the entire ""island"" of ObjectLinks.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "ObjectLinks",
					string Type = "ObjectLinkRange",
					string Description = "The range of object link edges connected to this anchor.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ClearLinks",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetSaveFlags",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ColorGradient",
			string BaseClass = "DataResource",
			string Description = "",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "Gradient",
					string Type = "Gradient<Vec4>",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Initialize",
					string Description = "Initializes the gradient.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "Meta object initialization.",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Insert",
					string Description = "Inserts a new color into the gradient at the given interpolant value.",
					string ReturnType = "void",
					string Parameters = "(Vec4 color, Real interpolant)",
					Array ParameterList = 
					[
						{
							string Name = "color",
							string Type = "Vec4",
							string Description = "",
						},
						{
							string Name = "interpolant",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Insert",
					string Description = "Inserts a new color into the gradient at the given interpolant value.",
					string ReturnType = "void",
					string Parameters = "(ByteColor color, Real interpolant)",
					Array ParameterList = 
					[
						{
							string Name = "color",
							string Type = "ByteColor",
							string Description = "",
						},
						{
							string Name = "interpolant",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Sample",
					string Description = "Sample the curve at the given t.",
					string ReturnType = "Vec4",
					string Parameters = "(Real t)",
					Array ParameterList = 
					[
						{
							string Name = "t",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serialize the gradient to/from a file.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "Set default data.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "Unload the gradient for reloading.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "KeyboardEvent",
			string BaseClass = "",
			string Description = "Keyboard Events are for when key state changes.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "AltPressed",
					string Type = "bool",
					string Description = "Is Alt pressed with this key?",
				},
				{
					string Name = "CtrlPressed",
					string Type = "bool",
					string Description = "Is Ctrl pressed with this key?",
				},
				{
					string Name = "HandledEvent",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Key",
					string Type = "Keys::Enum",
					string Description = "Key that was changed.",
				},
				{
					string Name = "Keyboard",
					string Type = "Keyboard",
					string Description = "",
				},
				{
					string Name = "OsKey",
					string Type = "Integer",
					string Description = "The original OS key that was pressed (platform specific)",
				},
				{
					string Name = "ShiftPressed",
					string Type = "bool",
					string Description = "Is Shift pressed with this key?",
				},
				{
					string Name = "SpacePressed",
					string Type = "bool",
					string Description = "Is Space pressed with this key?",
				},
				{
					string Name = "State",
					string Type = "KeyState::Enum",
					string Description = "State of the key Up,Down,Repeated.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetProperty",
			string BaseClass = "",
			string Description = "Network Property Manages the replication of a single property on the network.",
			Array Tags = 
			[
				"Networking",
			],
			Array Properties = 
			[
				{
					string Name = "LastChangeTimePassed",
					string Type = "Real",
					string Description = "Elapsed time passed since this net property was last changed, else 0.",
				},
				{
					string Name = "LastChangeTimestamp",
					string Type = "Real",
					string Description = "Timestamp indicating when this net property was last changed, else 0.",
				},
				{
					string Name = "Name",
					string Type = "string",
					string Description = "Net property name.",
				},
				{
					string Name = "NetChannel",
					string Type = "NetChannel",
					string Description = "Operating net channel.",
				},
				{
					string Name = "NetPropertyType",
					string Type = "NetPropertyType",
					string Description = "Operating net property type.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "VortexEffect",
			string BaseClass = "PhysicsEffect",
			string Description = "Applies a force about an axis at the object's center. This will apply two forces to a body: One pulls the object towards the center of the vortex and the other applies a tangential force. Useful to model a vortex.",
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "EndCondition",
					string Type = "VortexEndCondition",
					string Description = "How the interpolation should be handled at the max distance. ClampToMax will clamp to strength at max. NoEffect will ignore the effect. ContinueFalloff will continue the interpolation (this may go negative).",
				},
				{
					string Name = "ForceStrengthAtMaxDistance",
					string Type = "Real",
					string Description = "The perpendicular strength of the vortex at its max distance.",
				},
				{
					string Name = "ForceStrengthAtMinDistance",
					string Type = "Real",
					string Description = "The perpendicular strength of the vortex at its center.",
				},
				{
					string Name = "InterpolationType",
					string Type = "VortexInterpolationStates",
					string Description = "The type of interpolation used (ie. Linear, Quadratic) for the forces.",
				},
				{
					string Name = "InwardStrengthAtMaxDistance",
					string Type = "Real",
					string Description = "The inward force strength of the vortex at its max distance.",
				},
				{
					string Name = "InwardStrengthAtMinDistance",
					string Type = "Real",
					string Description = "The inward force strength of the vortex at its center.",
				},
				{
					string Name = "LocalAxis",
					string Type = "Boolean",
					string Description = "Determines if the Vortex Axis is in world or local space.",
				},
				{
					string Name = "MaxDistance",
					string Type = "Real",
					string Description = "The max distance that attenuation will happen at. If an object is between min and max distance, the value will be attenuated. If the object is further away, the effect strength will be determined by EndCondition.",
				},
				{
					string Name = "MinDistance",
					string Type = "Real",
					string Description = "The first distance at which attenuation will start. If an object is under the min distance, it will get the strength at min applied. If an object is in between min and max, then it will attenuate.",
				},
				{
					string Name = "VortexAxis",
					string Type = "Real3",
					string Description = "The axis about which the vortex spins.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ApplyEffect",
					string Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force).",
					string ReturnType = "void",
					string Parameters = "(RigidBody obj, real dt)",
					Array ParameterList = 
					[
						{
							string Name = "obj",
							string Type = "RigidBody",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeVortexInformation",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetStrengthValues",
					string Description = "Computes the strength of both forces based upon the t-value distance from the vortex center.",
					string ReturnType = "void",
					string Parameters = "(real t, real twistForce, real inwardForce)",
					Array ParameterList = 
					[
						{
							string Name = "t",
							string Type = "real",
							string Description = "",
						},
						{
							string Name = "twistForce",
							string Type = "real",
							string Description = "",
						},
						{
							string Name = "inwardForce",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PreCalculate",
					string Description = "Some values can be pre-calculated once per frame instead of per body/object (local to world space directions, etc...)",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetPropertyInfo",
			string BaseClass = "",
			string Description = "Network Property Info Configures a network property.",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "Component",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "NetChannelConfig",
					string Type = "NetChannelConfig",
					string Description = "Network channel configuration resource controlling how this property is grouped and replicated.",
				},
				{
					string Name = "NetPropertyConfig",
					string Type = "NetPropertyConfig",
					string Description = "Network property configuration resource controlling how this property is replicated.",
				},
				{
					string Name = "Property",
					string Type = "string",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "GetComponentName",
					string Description = "",
					string ReturnType = "string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetPropertyName",
					string Description = "Property's variable name (the property being configured)",
					string ReturnType = "string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serializes the net property info.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetComponentName",
					string Description = "Component's type name (the component type which defines the property being configured)",
					string ReturnType = "void",
					string Parameters = "(StringParam componentName)",
					Array ParameterList = 
					[
						{
							string Name = "componentName",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "Initializes the net property info.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator!=",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(const NetPropertyInfo rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const NetPropertyInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator!=",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(const Pair<MetaType,string> rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const Pair<MetaType,string>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator==",
					string Description = "Comparison Operators (compares component type and property names)",
					string ReturnType = "bool",
					string Parameters = "(const NetPropertyInfo rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const NetPropertyInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator==",
					string Description = "Comparison Operators (compares component type and property names)",
					string ReturnType = "bool",
					string Parameters = "(const Pair<MetaType,string> rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const Pair<MetaType,string>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "UpdateEvent",
			string BaseClass = "",
			string Description = "Update event Contains current time and delta time.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Dt",
					string Type = "Real",
					string Description = "The amount of time that passed between this frame and the last (scaled by TimeSpace.TimeScale).",
				},
				{
					string Name = "RealTimePassed",
					string Type = "Real",
					string Description = "The real amount of time that has passed since this space was created (uncaped and unclamped).",
				},
				{
					string Name = "TimePassed",
					string Type = "Real",
					string Description = "The amount of time that has passed since this space was created (TimeSpace.TimeScale affects this value).",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "PhysicsCar",
			string BaseClass = "Component",
			string Description = "A controller for a high speed physics based car. The car is controlled with a steer, gas and a brake coefficient. The car will raycast wheel positions to try to keep the wheels on the ground and then apply friction and normal forces to propel the car.",
			Array Tags = 
			[
				"Physics",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Active",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "AntiLockBrakes",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Brake",
					string Type = "Real",
					string Description = "How much the brake is being pressed [0,1] where 1 is full brake.",
				},
				{
					string Name = "DebugDraw",
					string Type = "Boolean",
					string Description = "Whether or not the car should debug draw.",
				},
				{
					string Name = "Gas",
					string Type = "Real",
					string Description = "How much the gas is being pressed [-1,1] where -1 is full reverse.",
				},
				{
					string Name = "GripScalar",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "MaxSpeed",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "MaxTorque",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "Steer",
					string Type = "Real",
					string Description = "How much the wheel is being steered. This is measured in radians about this object's y-axis.",
				},
				{
					string Name = "TorqueGovernor",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "WheelFrictionFrontRollCoef",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "WheelFrictionSideRollCoef",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "Wheels",
					string Type = "PhysicsCarCarWheelRange",
					string Description = "Returns a range of the car wheels.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddWheel",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(PhysicsCarWheel wheel)",
					Array ParameterList = 
					[
						{
							string Name = "wheel",
							string Type = "PhysicsCarWheel",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddWheelCog",
					string Description = "Add the PhysicsCarWheel to be controlled by this car.",
					string ReturnType = "void",
					string Parameters = "(Cog wheelCog)",
					Array ParameterList = 
					[
						{
							string Name = "wheelCog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplySpringForces",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "BeginFrictionCalculations",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CalculateFrictionImpulses",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CalculateSpringForces",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CastWheelPositions",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Debug draws all of the wheels associated with this car.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "EndFrictionCalculations",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "NumberOfWheelsInContact",
					string Description = "The number of wheels currently in contact with an object.",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAllObjectsCreated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveWheel",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveWheel",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(PhysicsCarWheel wheel)",
					Array ParameterList = 
					[
						{
							string Name = "wheel",
							string Type = "PhysicsCarWheel",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveWheelCog",
					string Description = "Remove the PhysicsCarWheel from being controlled by this car.",
					string ReturnType = "void",
					string Parameters = "(Cog wheelCog)",
					Array ParameterList = 
					[
						{
							string Name = "wheelCog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TransformUpdate",
					string Description = "Special function for transform updating from editor.",
					string ReturnType = "void",
					string Parameters = "(TransformUpdateInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "TransformUpdateInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Update",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdatePositions",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateWheelData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateWheelTransforms",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "RigidBody",
			string BaseClass = "BaseRigidBody",
			string Description = "The RigidBody defines the dynamics of an object. A body defines the mass properties and movement of an object. Without a RigidBody , an object will be static. Any effects attached to a RigidBody without a region will be applied to the body directly.",
			Array Tags = 
			[
				"Physics",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "AllowSleep",
					string Type = "Boolean",
					string Description = "Sleeping happens when an object has not ""moved"" (small enough linear + angular velocity) for long enough. If this happens then the physics engine can stop updating this object (integration, collision detection, etc...) until something not asleep hits it. Sleeping is purely an optimization. Sometimes it is not desirable for a body to ever fall asleep (such as a player) so this behavior can be overridden.",
				},
				{
					string Name = "AngularVelocity",
					string Type = "Real3",
					string Description = "The angular velocity of the object in world space. Max bounds are around 1e+10, after this the angular velocity will be capped.",
				},
				{
					string Name = "Asleep",
					string Type = "Boolean",
					string Description = "Whether or not this object is currently asleep. Setting this to true will force the object asleep even if this causes invalid behavior (objects floating).",
				},
				{
					string Name = "DynamicState",
					string Type = "RigidBodyDynamicState",
					string Description = "How this rigid body handles dynamics. Is it a regular rigid body (dynamic)? Does it not move (static)? Does the user want to manually move it and have objects properly collide with it (kinematic)? Note: Static vs. static don't check collision.",
				},
				{
					string Name = "Force",
					string Type = "Real3",
					string Description = "The total accumulated force (in world space) that is being applied to the center of mass of this rigid body this frame.",
				},
				{
					string Name = "Kinematic",
					string Type = "Boolean",
					string Description = "Kinematic objects are static objects that can be moved during runtime. Kinematics will correctly deal with position change during collisions by approximating the linear and angular velocity from the transform changes.",
				},
				{
					string Name = "Mass",
					string Type = "Real",
					string Description = "The current mass of the rigid body. This includes all child colliders belonging to this body.",
				},
				{
					string Name = "Mode2D",
					string Type = "Mode2DStates",
					string Description = "Used to make an object act as if it were 2D. This is done by locking it to the current z plane and only allowing rotation around the world's z axis. This object can be translated and rotated manually. The object can be set to always be 2D or 3D, or it can choose to inherit the setting that the space currently has.",
				},
				{
					string Name = "RotationLocked",
					string Type = "Boolean",
					string Description = "Used to make it so an object cannot rotate from physics. The rotation can still be manually changed.",
				},
				{
					string Name = "Static",
					string Type = "Boolean",
					string Description = "Static objects cannot be moved by collisions, forces or velocity changes. This is a more efficient way of changing an object between static and dynamic during runtime. Static objects should not be moved during runtime as they will not correctly account for their position change when colliding with objects.",
				},
				{
					string Name = "Torque",
					string Type = "Real3",
					string Description = "The total accumulated torque (in world space) that is being applied to the center of mass of this rigid body this frame.",
				},
				{
					string Name = "Velocity",
					string Type = "Real3",
					string Description = "The velocity of the object in world space. Max bounds are around 1e+10, after this the velocity will be capped.",
				},
				{
					string Name = "WorldCenterOfMass",
					string Type = "Real3",
					string Description = "The position of the center of mass in world space.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddBodyEffect",
					string Description = "Adds an effect to be applied to this body.",
					string ReturnType = "void",
					string Parameters = "(PhysicsEffect effect)",
					Array ParameterList = 
					[
						{
							string Name = "effect",
							string Type = "PhysicsEffect",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplyAngularImpulse",
					string Description = "Applies an angular impulse through the center of mass (world space). Only results in a change of angular velocity.",
					string ReturnType = "void",
					string Parameters = "(Vec3 angular)",
					Array ParameterList = 
					[
						{
							string Name = "angular",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplyAngularVelocity",
					string Description = "Adds to the current angular velocity. (world space)",
					string ReturnType = "void",
					string Parameters = "(Vec3 angular)",
					Array ParameterList = 
					[
						{
							string Name = "angular",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplyConstraintImpulse",
					string Description = "Applies a linear and angular impulse. Used in solving constraints.",
					string ReturnType = "void",
					string Parameters = "(Vec3 linear, Vec3 angular)",
					Array ParameterList = 
					[
						{
							string Name = "linear",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "angular",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplyForce",
					string Description = "Applies a force through the center of mass of the body. (world space)",
					string ReturnType = "void",
					string Parameters = "(Vec3 force)",
					Array ParameterList = 
					[
						{
							string Name = "force",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplyForceAtOffsetVector",
					string Description = "Applies a force (world space) at an offset from the center of mass. Results in a force and torque to the center of mass.",
					string ReturnType = "void",
					string Parameters = "(Vec3 force, Vec3 worldR)",
					Array ParameterList = 
					[
						{
							string Name = "force",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "worldR",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplyForceAtPoint",
					string Description = "Applies a force (world space) at a point on an object. Results in a force and torque to the center of mass.",
					string ReturnType = "void",
					string Parameters = "(Vec3 force, Vec3 worldPoint)",
					Array ParameterList = 
					[
						{
							string Name = "force",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "worldPoint",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplyImpulseAtOffsetVector",
					string Description = "Applies an impulse (world space) at a point on the object. Results in a change in linear and angular velocity.",
					string ReturnType = "void",
					string Parameters = "(Vec3 impulse, Vec3 worldR)",
					Array ParameterList = 
					[
						{
							string Name = "impulse",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "worldR",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplyImpulseAtPoint",
					string Description = "Applies an impulse to the object at a world space point. Results in a change to linear and angular velocity. (world space)",
					string ReturnType = "void",
					string Parameters = "(Vec3 impulse, Vec3 worldPoint)",
					Array ParameterList = 
					[
						{
							string Name = "impulse",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "worldPoint",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplyLinearImpulse",
					string Description = "Applies a linear impulse through the center of mass (world space). Only results in a change of linear velocity.",
					string ReturnType = "void",
					string Parameters = "(Vec3 linear)",
					Array ParameterList = 
					[
						{
							string Name = "linear",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplyLinearVelocity",
					string Description = "Adds to the current linear velocity. (world space)",
					string ReturnType = "void",
					string Parameters = "(Vec3 linear)",
					Array ParameterList = 
					[
						{
							string Name = "linear",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplyObjectAngularVelocity",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Vec3 angular)",
					Array ParameterList = 
					[
						{
							string Name = "angular",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplyTorque",
					string Description = "Applies a torque through the center of mass of the body. (world space)",
					string ReturnType = "void",
					string Parameters = "(Vec3 torque)",
					Array ParameterList = 
					[
						{
							string Name = "torque",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplyVelocity",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Vec3 velocity)",
					Array ParameterList = 
					[
						{
							string Name = "velocity",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplyVelocityAtPoint",
					string Description = "Applies a velocity at a world space point on the object. Results in a change to linear and angular velocity.",
					string ReturnType = "void",
					string Parameters = "(Vec3 velocity, Vec3 worldPoint)",
					Array ParameterList = 
					[
						{
							string Name = "velocity",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "worldPoint",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AttachTo",
					string Description = "Signal that the Cog has been attached to another Cog .",
					string ReturnType = "void",
					string Parameters = "(AttachmentInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "AttachmentInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ClampVelocityValue",
					string Description = "Helper function to clamp linear/angular velocity.",
					string ReturnType = "Vec3",
					string Parameters = "(Vec3 value, StringParam varName)",
					Array ParameterList = 
					[
						{
							string Name = "value",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "varName",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeVelocities",
					string Description = "Compute the delta velocities to get from the passed translation and rotation to the current ones.",
					string ReturnType = "void",
					string Parameters = "(Vec3 oldTranslation, Mat3Param oldRotation, real dt)",
					Array ParameterList = 
					[
						{
							string Name = "oldTranslation",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "oldRotation",
							string Type = "Mat3Param",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Detached",
					string Description = "Signal that the Cog has been detached from another Cog .",
					string ReturnType = "void",
					string Parameters = "(AttachmentInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "AttachmentInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ForceAsleep",
					string Description = "Forces the object asleep. Will wake if anything hits it or if it is in contact with any non-asleep objects. Warning: calling this function could create gameplay flaws if used incorrectly, use at your own risk (and sparingly).",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ForceAwake",
					string Description = "Forces the object awake. Will reset the sleep timer.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GenerateIntegrationUpdate",
					string Description = "Generates an integration update for all of the colliders of this body.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetActiveBody",
					string Description = "If this is a static body then the active body (the one force/velocity should be applied to or calculated from) is the nearest parent body up the hierarchy that is not static. If one isn't found then this returns the current rigid body (this).",
					string ReturnType = "RigidBody",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetColliders",
					string Description = "Returns all colliders that are owned by this rigid body. This is all colliders at or below the rigid body's level in the hierarchy, including all colliders under static/kinematic bodies. This is basically the full list of colliders that affect this body's velocity/mass/etc...",
					string ReturnType = "CompositeColliderList::range",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetPointVelocity",
					string Description = "Computes the linear velocity of a point on the body.",
					string ReturnType = "Vec3",
					string Parameters = "(Vec3 worldPoint)",
					Array ParameterList = 
					[
						{
							string Name = "worldPoint",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetPointVelocityInternal",
					string Description = "",
					string ReturnType = "Vec3",
					string Parameters = "(Vec3 worldPoint)",
					Array ParameterList = 
					[
						{
							string Name = "worldPoint",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldMatrix",
					string Description = "The full local-to-world transform of this rigid body.",
					string ReturnType = "Mat4",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldRotationMat3",
					string Description = "The cached local-to-world rotation matrix of this rigid body (even if static/kinematic).",
					string ReturnType = "Mat3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldRotationQuat",
					string Description = "The cached local-to-world rotation quaternion of this rigid body (even if static/kinematic). Mostly used for integration.",
					string ReturnType = "Quat",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldTranslation",
					string Description = "The cached world-space translation of this rigid body.",
					string ReturnType = "Vec3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InternalGetWorldCenterOfMass",
					string Description = "Recompute the mass, inertia, and world inertia of this body. Internal function that doesn't check the modified state (otherwise infinite loops can happen).",
					string ReturnType = "Vec3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InternalRecomputeOrientation",
					string Description = "Shared logic when updating orientation (assumes mRotationQuat was already set and normalized). This will update the cached world transform matrix and re-compute the world translation.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InternalWakeUp",
					string Description = "The shared functionality between ForceAwake and WakeUp.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsAsleep",
					string Description = "Checks if the object is currently asleep.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsDynamic",
					string Description = "Returns if the object is dynamic (not static or kinematic)",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsInitialized",
					string Description = "Has this body already started initialization (aka, we have a physics space). Used to deal with setters during serialization that require updating the physics space.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAllObjectsCreated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PublishTransform",
					string Description = "Set the transform values from the current cached body-to-world values.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PutToSleep",
					string Description = "Sleeps the object.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "QueueMassUpdate",
					string Description = "Queue up this body (and all necessary parents) for a mass update.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RecomputeAllMassTerms",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RecomputeCenterMass",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RecomputeInertiaTensor",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveBodyEffect",
					string Description = "Removes an effect from being applied to this body.",
					string ReturnType = "void",
					string Parameters = "(PhysicsEffect effect)",
					Array ParameterList = 
					[
						{
							string Name = "effect",
							string Type = "PhysicsEffect",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Rotate",
					string Description = "Applies a rotation to the rigid body.",
					string ReturnType = "void",
					string Parameters = "(QuatParam rotation)",
					Array ParameterList = 
					[
						{
							string Name = "rotation",
							string Type = "QuatParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Set2DInternal",
					string Description = "Internal helper that actually sets state associated with 2d mode and doesn't worry about the inheritance of the space's 2d mode.",
					string ReturnType = "void",
					string Parameters = "(bool state)",
					Array ParameterList = 
					[
						{
							string Name = "state",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetAxisLock",
					string Description = "Sets the allowed local-space axes that an object can rotate about.",
					string ReturnType = "void",
					string Parameters = "(bool xAxis, bool yAxis, bool zAxis)",
					Array ParameterList = 
					[
						{
							string Name = "xAxis",
							string Type = "bool",
							string Description = "",
						},
						{
							string Name = "yAxis",
							string Type = "bool",
							string Description = "",
						},
						{
							string Name = "zAxis",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetInverseMass",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(real invMass)",
					Array ParameterList = 
					[
						{
							string Name = "invMass",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetObjectAngularVelocity",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Vec3 newVelocity)",
					Array ParameterList = 
					[
						{
							string Name = "newVelocity",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetObjectVelocity",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Vec3 newVelocity)",
					Array ParameterList = 
					[
						{
							string Name = "newVelocity",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetRotationLockedInternal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(bool state)",
					Array ParameterList = 
					[
						{
							string Name = "state",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TransformUpdate",
					string Description = "Special function for transform updating from editor.",
					string ReturnType = "void",
					string Parameters = "(TransformUpdateInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "TransformUpdateInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateBodyEffects",
					string Description = "Apply all of the effects on this body to the passed in body. If the passed in body is null this will apply to the current body. An extra body must be passed in to properly deal with child static/kinematic bodies.",
					string ReturnType = "void",
					string Parameters = "(real dt, RigidBody rootBody)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
						{
							string Name = "rootBody",
							string Type = "RigidBody",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateCenterMass",
					string Description = "Updates the Rigid Body's center of mass by an offset vector. Also updates the cached world transform data.",
					string ReturnType = "void",
					string Parameters = "(Vec3 offset)",
					Array ParameterList = 
					[
						{
							string Name = "offset",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateCenterMassFromWorldPosition",
					string Description = "Use the stored offset from the center of mass to the translation of the cog to recompute where the center of mass is relative to the translation. Normally the center of mass updates the translation but if a user translates this body we need to shift the center of mass based upon the translation performed.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateKinematicVelocities",
					string Description = "Recompute kinematic velocities from any translations that have happened.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateMode2D",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateOrientation",
					string Description = "Updates the Rigid Body's orientation by an offset vector (from integration, this does a small angle approximation). This updates the body's cached world transform data as we not only rotate but the position might be rotating about the center of mass.",
					string ReturnType = "void",
					string Parameters = "(QuatParam offset)",
					Array ParameterList = 
					[
						{
							string Name = "offset",
							string Type = "QuatParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateResourcesAndQueue",
					string Description = "Force update any modified resources and update the physics queue state.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateSleepTimer",
					string Description = "Updates the objects sleep state.",
					string ReturnType = "bool",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateWorldInertiaTensor",
					string Description = "Recomputes the world-space inertia tensor for this body.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WakeUp",
					string Description = "Wakes the object up. Does not reset the sleep timer, meaning it will go to sleep instantly if it is not moving.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "GamepadEvent",
			string BaseClass = "",
			string Description = "Gamepad events are send when a game pad button state is changed.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Button",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "FlickDirection",
					string Type = "Real2",
					string Description = "",
				},
				{
					string Name = "FlickedStick",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "Gamepad",
					string Type = "Gamepad",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Cog",
			string BaseClass = "BaseCog",
			string Description = "Game Object Composition class. This class is the foundational object for all dynamic objects in the game world. The Cog is a piece of logical interactive content and the primary mechanism game systems (Graphics, Physics , Etc.) provide functionality and communicate. A Cog can be anything from physical objects like trees, tanks, players to to logical objects like teams, triggers, or AI objects.",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "Actions",
					string Type = "Actions",
					string Description = "",
				},
				{
					string Name = "ArchetypeName",
					string Type = "string",
					string Description = "The name of the archetype this object was created from.",
				},
				{
					string Name = "Children",
					string Type = "HierarchyListrange",
					string Description = "Grab the children directly from the hierarchy component.",
				},
				{
					string Name = "EditorViewportHidden",
					string Type = "Boolean",
					string Description = "Hidden from view used for editor.",
				},
				{
					string Name = "GameSession",
					string Type = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
				},
				{
					string Name = "IsBeingDestroyed",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "LevelSettings",
					string Type = "Cog",
					string Description = "Get the object named 'LevelSettings', a special object where we can put components for our level.",
				},
				{
					string Name = "Locked",
					string Type = "Boolean",
					string Description = "Not able to be modified or selected in the viewport.",
				},
				{
					string Name = "Name",
					string Type = "string",
					string Description = "Name of the Object.",
				},
				{
					string Name = "ObjectViewHidden",
					string Type = "Boolean",
					string Description = "If the object needs to not show up in the object view.",
				},
				{
					string Name = "Parent",
					string Type = "Cog",
					string Description = "Get the parent of this object in the Hierarchy .",
				},
				{
					string Name = "Persistent",
					string Type = "Boolean",
					string Description = "Object will not be destroyed on level load or change.",
				},
				{
					string Name = "RuntimeId",
					string Type = "Integer",
					string Description = "Gets a unique integer for this object (used primarily for debugging)",
				},
				{
					string Name = "Space",
					string Type = "Space",
					string Description = "",
				},
				{
					string Name = "Transient",
					string Type = "Boolean",
					string Description = "Object will not be saved.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddComponent",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(type component)",
					Array ParameterList = 
					[
						{
							string Name = "component",
							string Type = "type",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddComponentById",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(TypeIdType typeId, Component component, Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "typeId",
							string Type = "TypeIdType",
							string Description = "",
						},
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddComponentByMeta",
					string Description = "Add a component by meta.",
					string ReturnType = "bool",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddComponentByName",
					string Description = "Add a component by name.",
					string ReturnType = "bool",
					string Parameters = "(string name)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddComponentInterface",
					string Description = "Add a component interface.",
					string ReturnType = "void",
					string Parameters = "(TypeIdType typeId, Component component)",
					Array ParameterList = 
					[
						{
							string Name = "typeId",
							string Type = "TypeIdType",
							string Description = "",
						},
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddComponentInternal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(TypeIdType typeId, Component component, Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "typeId",
							string Type = "TypeIdType",
							string Description = "",
						},
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddComponentNoInit",
					string Description = "Add a component without initializing it yet.",
					string ReturnType = "Component",
					string Parameters = "(string name)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AssignArchetype",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Archetype archetype)",
					Array ParameterList = 
					[
						{
							string Name = "archetype",
							string Type = "Archetype",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AttachTo",
					string Description = "Attach to a parent object.",
					string ReturnType = "void",
					string Parameters = "(Cog parent)",
					Array ParameterList = 
					[
						{
							string Name = "parent",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AttachToRelative",
					string Description = "Attach to a parent object and compute the new transform so that the objects are relative.",
					string ReturnType = "void",
					string Parameters = "(Cog parent)",
					Array ParameterList = 
					[
						{
							string Name = "parent",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CheckForAddition",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(MetaType metaOfComponent)",
					Array ParameterList = 
					[
						{
							string Name = "metaOfComponent",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CheckForAdditionWithNotify",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(MetaType metaOfComponent)",
					Array ParameterList = 
					[
						{
							string Name = "metaOfComponent",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CheckForRemovalWithNotify",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(MetaType metaOfComponent)",
					Array ParameterList = 
					[
						{
							string Name = "metaOfComponent",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ClearArchetype",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Clone",
					string Description = "Clones this cog.",
					string ReturnType = "Cog",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CompositionMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateAndInitializeFromStream",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "(Space space, Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "space",
							string Type = "Space",
							string Description = "",
						},
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateFromDataBlock",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "(Space space, DataBlock block)",
					Array ParameterList = 
					[
						{
							string Name = "space",
							string Type = "Space",
							string Description = "",
						},
						{
							string Name = "block",
							string Type = "DataBlock",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateFromString",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "(Space space, StringParam stringData)",
					Array ParameterList = 
					[
						{
							string Name = "space",
							string Type = "Space",
							string Description = "",
						},
						{
							string Name = "stringData",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Calls DebugDraw on all components in this cog.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DeleteComponents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Destroy",
					string Description = "Destroy an object removing it from the Space .",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Detach",
					string Description = "Detach from a parent object.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DetachRelative",
					string Description = "Detach from a parent object and compute the new transform so that the objects are relative.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DisassociatedFromArchetype",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DispatchDown",
					string Description = "Dispatches an event down the tree on all children recursively (pre-order traversal)",
					string ReturnType = "void",
					string Parameters = "(string eventId, Event event)",
					Array ParameterList = 
					[
						{
							string Name = "eventId",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "event",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DispatchEvent",
					string Description = "Dispatches an event on this object.",
					string ReturnType = "void",
					string Parameters = "(string eventId, Event event)",
					Array ParameterList = 
					[
						{
							string Name = "eventId",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "event",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DispatchUp",
					string Description = "Dispatches an event up the tree on each parent recursively (pre-order traversal)",
					string ReturnType = "void",
					string Parameters = "(string eventId, Event event)",
					Array ParameterList = 
					[
						{
							string Name = "eventId",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "event",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindAllChildrenByName",
					string Description = "",
					string ReturnType = "HierarchyNameRange",
					string Parameters = "(StringParam name)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindChildByChildId",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "(u64 childId)",
					Array ParameterList = 
					[
						{
							string Name = "childId",
							string Type = "u64",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindChildByName",
					string Description = "Find a child object with the given name.",
					string ReturnType = "Cog",
					string Parameters = "(string name)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindLastDeepestChild",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindNearestArchetype",
					string Description = "Same as FindNearestParentArchetype except that it includes this Cog .",
					string ReturnType = "Cog",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindNearestParentArchetype",
					string Description = "Finds the nearest parent that has an Archetype (does not include itself).",
					string ReturnType = "Cog",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindNextInOrder",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindNextSibling",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindPreviousInOrder",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindPreviousSibling",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindRoot",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindRootArchetype",
					string Description = "Finds the top most Archetype in the Hierarchy .",
					string ReturnType = "Cog",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FinishComponentInit",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Component component)",
					Array ParameterList = 
					[
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ForceAddComponent",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(type component)",
					Array ParameterList = 
					[
						{
							string Name = "component",
							string Type = "type",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ForceAddComponentById",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(TypeIdType typeId, Component component, Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "typeId",
							string Type = "TypeIdType",
							string Description = "",
						},
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ForceDestroy",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ForceRemoveComponent",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Component component)",
					Array ParameterList = 
					[
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetArchetype",
					string Description = "",
					string ReturnType = "Archetype",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetComponentByName",
					string Description = "",
					string ReturnType = "Component",
					string Parameters = "(StringParam componentTypeName)",
					Array ParameterList = 
					[
						{
							string Name = "componentTypeName",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetComponents",
					string Description = "",
					string ReturnType = "CompRange",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDispatcher",
					string Description = "Event system.",
					string ReturnType = "EventDispatcher",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDispatcherObject",
					string Description = "",
					string ReturnType = "EventDispatcher",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetHierarchyIndex",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetHierarchyList",
					string Description = "",
					string ReturnType = "HierarchyList",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetId",
					string Description = "Get the game object's Id.",
					string ReturnType = "CogId",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetParentHierarchyList",
					string Description = "",
					string ReturnType = "HierarchyList",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetReceiver",
					string Description = "",
					string ReturnType = "EventReceiver",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetReceiverObject",
					string Description = "",
					string ReturnType = "EventReceiver",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleToObject",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "(const MetaHandleData handleData)",
					Array ParameterList = 
					[
						{
							string Name = "handleData",
							string Type = "const MetaHandleData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize all the components on the composition. The order of initialize is as follows: 1. Initialize 2. OnAllObjectsCreated 3. ScriptInitialize 4. The event 'AllObjectsInitialized' is sent out on the CogInitializer Generally script Initialize comes after ALL C++ initialization because it makes scripts safer and easier to debug (knowing all C++ components have been fully setup, can't access anything bad)",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsChildOfArchetype",
					string Description = "Whether or not this object is a child of an Archetype (not only direct child, but any child).",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsDescendant",
					string Description = "Returns whether or not the given cog is a descendant of us.",
					string ReturnType = "bool",
					string Parameters = "(Cog cog)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsDisassociatedFromArchetype",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsEditorMode",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsEditorOrPreviewMode",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsInitialized",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsModifiedFromArchetype",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsPreviewMode",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MarkedForDeletion",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ModifiedFromArchetype",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MoveComponentBefore",
					string Description = "This function assumes that the move is valid (meaning it's not moving a component before another component that it's dependent on).",
					string ReturnType = "void",
					string Parameters = "(Integer componentToMove, Integer destination)",
					Array ParameterList = 
					[
						{
							string Name = "componentToMove",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "destination",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "NotModified",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ObjectToHandle",
					string Description = "",
					string ReturnType = "MetaHandleData",
					string Parameters = "(Cog instance)",
					Array ParameterList = 
					[
						{
							string Name = "instance",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAllObjectsCreated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PlaceAfterSibling",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Cog sibling)",
					Array ParameterList = 
					[
						{
							string Name = "sibling",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PlaceBeforeSibling",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Cog sibling)",
					Array ParameterList = 
					[
						{
							string Name = "sibling",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PlaceInHierarchy",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "QueryComponentId",
					string Description = "Get a component on this composition by component's TypeId. This will return NULL if the component is not found.",
					string ReturnType = "Component",
					string Parameters = "(TypeIdType typeId)",
					Array ParameterList = 
					[
						{
							string Name = "typeId",
							string Type = "TypeIdType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "QueryComponentIndex",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(TypeIdType typeId)",
					Array ParameterList = 
					[
						{
							string Name = "typeId",
							string Type = "TypeIdType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "QueryComponentType",
					string Description = "Type safe way of accessing components.",
					string ReturnType = "type",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "QueryComponentTypeRange",
					string Description = "Typed based interface for accessing multiple components of the same type.",
					string ReturnType = "CastRangeAdapter<ComponentRange,type>",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveComponent",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(Component component)",
					Array ParameterList = 
					[
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveComponentByName",
					string Description = "Remove a component by name. Returns true if the component existed.",
					string ReturnType = "bool",
					string Parameters = "(string name)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveComponentInternal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Component component)",
					Array ParameterList = 
					[
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReplaceChild",
					string Description = "Places the new child at the same place as the old child in the Hierarchy . This detaches but does not destroy the old child.",
					string ReturnType = "void",
					string Parameters = "(Cog oldChild, Cog newChild)",
					Array ParameterList = 
					[
						{
							string Name = "oldChild",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "newChild",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RevertToArchetype",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SaveToDataBlock",
					string Description = "Used to copy cogs.",
					string ReturnType = "DataBlock",
					string Parameters = "(Cog cog)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SaveToString",
					string Description = "",
					string ReturnType = "string",
					string Parameters = "(Cog cog)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ScriptInitialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serialize a components data.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetEditorOnly",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TransformUpdate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(TransformUpdateInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "TransformUpdateInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UploadToArchetype",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WriteDescription",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType metaType, Cog cog, StringBuilder builder)",
					Array ParameterList = 
					[
						{
							string Name = "metaType",
							string Type = "MetaType",
							string Description = "",
						},
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "builder",
							string Type = "StringBuilder",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator=",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(const Cog)",
					Array ParameterList = 
					[
						{
							string Name = "",
							string Type = "const Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "CollisionGroupEvent",
			string BaseClass = "BaseCollisionEvent",
			string Description = "An event sent out when a collision happens between two groups with a filter. Used to write hook up messages based upon certain types colliding (ie. when a player is hit by a bullet, catch on fire or something).",
			Array Tags = 
			[
				"Physics",
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "FirstPoint",
					string Type = "ContactPoint",
					string Description = "",
				},
				{
					string Name = "TypeAName",
					string Type = "string",
					string Description = "Returns the collision group name of object A.",
				},
				{
					string Name = "TypeBName",
					string Type = "string",
					string Description = "Returns the collision group name of object B.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "GetEventName",
					string Description = "",
					string ReturnType = "string",
					string Parameters = "(BaseCollisionEvent::CollisionType type)",
					Array ParameterList = 
					[
						{
							string Name = "type",
							string Type = "BaseCollisionEvent::CollisionType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Set",
					string Description = "Sets the two colliders with the given pair. Takes care of making sure the collider ordering matches the filter order.",
					string ReturnType = "void",
					string Parameters = "(const Physics::Manifold manifold, const CollisionFilter pair, CollisionFilterBlock block, string eventType)",
					Array ParameterList = 
					[
						{
							string Name = "manifold",
							string Type = "const Physics::Manifold",
							string Description = "",
						},
						{
							string Name = "pair",
							string Type = "const CollisionFilter",
							string Description = "",
						},
						{
							string Name = "block",
							string Type = "CollisionFilterBlock",
							string Description = "",
						},
						{
							string Name = "eventType",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ObjectLink",
			string BaseClass = "Component",
			string Description = "Forms a link between two positions on two objects. ObjectLinks are used primarily by physics to represent joints, but can also be used by graphics, gameplay, etc... to represent some connection between two objects.",
			Array Tags = 
			[
				"Component",
				"Core",
			],
			Array Properties = 
			[
				{
					string Name = "LocalPointA",
					string Type = "Real3",
					string Description = "The Point on Object A in local space.",
				},
				{
					string Name = "LocalPointB",
					string Type = "Real3",
					string Description = "The Point on Object B in local space.",
				},
				{
					string Name = "ObjectA",
					string Type = "Cog",
					string Description = "The first object that is being connected to. Set this to null to clear the link.",
				},
				{
					string Name = "ObjectAPath",
					string Type = "CogPath",
					string Description = "CogPath to object A.",
				},
				{
					string Name = "ObjectB",
					string Type = "Cog",
					string Description = "The second object that is being connected to. Set this to null to clear the link.",
				},
				{
					string Name = "ObjectBPath",
					string Type = "CogPath",
					string Description = "CogPath to object B.",
				},
				{
					string Name = "WorldPointA",
					string Type = "Real3",
					string Description = "The point on object A in world space.",
				},
				{
					string Name = "WorldPointB",
					string Type = "Real3",
					string Description = "The point on object B in world space.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "GetCog",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "(ObjectIndex index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "ObjectIndex",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLocalPoint",
					string Description = "",
					string ReturnType = "Vec3",
					string Parameters = "(ObjectIndex index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "ObjectIndex",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetSaveFlags",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetTransform",
					string Description = "",
					string ReturnType = "Transform",
					string Parameters = "(ObjectIndex index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "ObjectIndex",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldPoint",
					string Description = "",
					string ReturnType = "Vec3",
					string Parameters = "(ObjectIndex index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "ObjectIndex",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldPosition",
					string Description = "",
					string ReturnType = "Vec3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "LinkCog",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Cog newCog, ObjectIndex index)",
					Array ParameterList = 
					[
						{
							string Name = "newCog",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "index",
							string Type = "ObjectIndex",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAllObjectsCreated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnObjectAChanged",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Event e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnObjectBChanged",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Event e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetCog",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Cog newCog, ObjectIndex index)",
					Array ParameterList = 
					[
						{
							string Name = "newCog",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "index",
							string Type = "ObjectIndex",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetCogAInternal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Cog cog)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetCogBInternal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Cog cog)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetCogInternal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Cog cog, ObjectIndex index)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "index",
							string Type = "ObjectIndex",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetLocalPoint",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Vec3 localPoint, ObjectIndex index)",
					Array ParameterList = 
					[
						{
							string Name = "localPoint",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "index",
							string Type = "ObjectIndex",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetWorldPoint",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Vec3 worldPoint, ObjectIndex index)",
					Array ParameterList = 
					[
						{
							string Name = "worldPoint",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "index",
							string Type = "ObjectIndex",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unlink",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "SoundEmitter",
			string BaseClass = "Component",
			string Description = "Sound Emitter component emits 3d sound at its location.",
			Array Tags = 
			[
				"Component",
				"Sound",
			],
			Array Properties = 
			[
				{
					string Name = "Attenuation",
					string Type = "SoundAttenuator",
					string Description = "",
				},
				{
					string Name = "Pitch",
					string Type = "Real",
					string Description = "Play a sound on this emitter.",
				},
				{
					string Name = "PitchSemitones",
					string Type = "Real",
					string Description = "Pitch adjustment of the sound in semitones.",
				},
				{
					string Name = "UseDecibels",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "UseFileStereoFor3D",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "UseSemitones",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Volume",
					string Type = "Real",
					string Description = "Volume scalar for emitter.",
				},
				{
					string Name = "VolumeDecibels",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddNode",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Audio::SoundNode node)",
					Array ParameterList = 
					[
						{
							string Name = "node",
							string Type = "Audio::SoundNode",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InterpolatePitch",
					string Description = "Interpolate the pitch over a certain time, in seconds.",
					string ReturnType = "void",
					string Parameters = "(Real pitch, Real interpolationTime)",
					Array ParameterList = 
					[
						{
							string Name = "pitch",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "interpolationTime",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InterpolatePitchSemitones",
					string Description = "Interpolate the pitch over a certain time, in seconds.",
					string ReturnType = "void",
					string Parameters = "(Real pitch, Real interpolationTime)",
					Array ParameterList = 
					[
						{
							string Name = "pitch",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "interpolationTime",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InterpolateVolume",
					string Description = "Interpolate the volume over a certain time, in seconds.",
					string ReturnType = "void",
					string Parameters = "(Real volume, Real interpolationTime)",
					Array ParameterList = 
					[
						{
							string Name = "volume",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "interpolationTime",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InterpolateVolumeDecibels",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Real decibels, Real interpolationTime)",
					Array ParameterList = 
					[
						{
							string Name = "decibels",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "interpolationTime",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsPlaying",
					string Description = "Is this emitter currently playing sound?",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Pause",
					string Description = "Pause this emitter.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PlayCue",
					string Description = "Play a cue by name on this emitter.",
					string ReturnType = "SoundInstance",
					string Parameters = "(SoundCue cue)",
					Array ParameterList = 
					[
						{
							string Name = "cue",
							string Type = "SoundCue",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Resume",
					string Description = "Resume this emitter.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendAudioEvent",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Audio::AudioEventType eventType)",
					Array ParameterList = 
					[
						{
							string Name = "eventType",
							string Type = "Audio::AudioEventType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Stop",
					string Description = "Stop all cues on this emitter.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Update",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "DynamicMesh",
			string BaseClass = "Component",
			string Description = "",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "DrawNormals",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "DrawTriangles",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "DrawVertices",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "GenerateNormals",
					string Type = "Boolean",
					string Description = "Setter and getter for generating normals.",
				},
				{
					string Name = "VertexCount",
					string Type = "Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddNormal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Vec3 normal)",
					Array ParameterList = 
					[
						{
							string Name = "normal",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddTriangleIndices",
					string Description = "Adds new triangle.",
					string ReturnType = "void",
					string Parameters = "(Integer index0, Integer index1, Integer index2)",
					Array ParameterList = 
					[
						{
							string Name = "index0",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "index1",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "index2",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddUV",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Vec2 uv)",
					Array ParameterList = 
					[
						{
							string Name = "uv",
							string Type = "Vec2",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddVertex",
					string Description = "Adds a new vertex.",
					string ReturnType = "void",
					string Parameters = "(Vec3 vertex)",
					Array ParameterList = 
					[
						{
							string Name = "vertex",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CenterAroundTransform",
					string Description = "",
					string ReturnType = "Vec3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Clear",
					string Description = "Clears out all data on the mesh.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Draws the wire frame mesh.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DrawNormals",
					string Description = "Draws the normals of each vertex (if generated).",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DrawTriangles",
					string Description = "Draws all triangles.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DrawVertices",
					string Description = "Draws each vertex.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DuplicateVertex",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Integer oldIndex)",
					Array ParameterList = 
					[
						{
							string Name = "oldIndex",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GenerateAabb",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GenerateNormals",
					string Description = "Generates normals of each vertex by averaging out the face normals touching each vertex.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAabb",
					string Description = "",
					string ReturnType = "Aabb",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetInWorld",
					string Description = "Mesh vertices are defined in world.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetIndices",
					string Description = "Index buffer.",
					string ReturnType = "IndexArray",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNormal",
					string Description = "",
					string ReturnType = "Vec3",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNormals",
					string Description = "Returns a reference to the array of Normals at each vertex.",
					string ReturnType = "NormalArray",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetTriangle",
					string Description = "",
					string ReturnType = "IndexTriangle",
					string Parameters = "(Integer triangleIndex)",
					Array ParameterList = 
					[
						{
							string Name = "triangleIndex",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetTriangleAdjacencies",
					string Description = "Returns a reference to the array of Triangle Adjacency info.",
					string ReturnType = "AdjacencyArray",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetTriangleCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetTriangles",
					string Description = "Triangles.",
					string ReturnType = "TriangleRange",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetTrianglesAdjacentToTriangle",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer triangleIndex, AdjacencyArray triangles)",
					Array ParameterList = 
					[
						{
							string Name = "triangleIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "triangles",
							string Type = "AdjacencyArray",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetTrianglesAdjacentToTriangle",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Integer triangleIndex)",
					Array ParameterList = 
					[
						{
							string Name = "triangleIndex",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetTrianglesAdjacentToVertex",
					string Description = "Fills out the passed in array with the triangles touching the vertex at the given index.",
					string ReturnType = "void",
					string Parameters = "(Integer vertexIndex, AdjacencyArray triangles)",
					Array ParameterList = 
					[
						{
							string Name = "vertexIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "triangles",
							string Type = "AdjacencyArray",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetTrianglesAdjacentToVertex",
					string Description = "Fills out the passed in array with the triangles touching the vertex at the given index.",
					string ReturnType = "Integer",
					string Parameters = "(Integer vertexIndex)",
					Array ParameterList = 
					[
						{
							string Name = "vertexIndex",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetUvs",
					string Description = "Returns a reference to the array of UV coordinates of each vertex.",
					string ReturnType = "UvArray",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetVertex",
					string Description = "Used for script access.",
					string ReturnType = "Vec3",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetVertexAdjacencies",
					string Description = "Returns a reference to the array of Vertex Adjacency info.",
					string ReturnType = "AdjacencyArray",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetVertices",
					string Description = "Returns a reference to the array of the meshes Vertices.",
					string ReturnType = "VertexArray",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "Initialization.",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsEmpty",
					string Description = "Returns whether or not there are any vertices on the mesh.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Modified",
					string Description = "Used to denote that the user has completed their modifications.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetAabb",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(const Aabb aabb)",
					Array ParameterList = 
					[
						{
							string Name = "aabb",
							string Type = "const Aabb",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetInWorld",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(bool value)",
					Array ParameterList = 
					[
						{
							string Name = "value",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetVertex",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer index, Vec3 position)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "position",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Update",
					string Description = "Draws the triangles of the mesh using the debug drawer.",
					string ReturnType = "void",
					string Parameters = "(UpdateEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "UpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "CollisionGroup",
			string BaseClass = "DataResource",
			string Description = "A collision group object. Most implementation data is handled in an instance. A collision group just maintains the user defined (and readable) name for the group.",
			Array Tags = 
			[
				"Resource",
				"Physics",
			],
			Array Properties = 
			[
			],
			Array Methods = 
			[
				{
					string Name = "GetNewInstance",
					string Description = "",
					string ReturnType = "CollisionGroupInstance",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetLinkConnected",
			string BaseClass = "",
			string Description = "Dispatched after sending or receiving a connect confirmation.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Direction",
					string Type = "TransmissionDirection",
					string Description = "",
				},
				{
					string Name = "TheirIpAddress",
					string Type = "IpAddress",
					string Description = "",
				},
				{
					string Name = "TheirNetPeerId",
					string Type = "Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "AnimationGraphEvent",
			string BaseClass = "",
			string Description = "",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Animation",
					string Type = "Animation",
					string Description = "Getters.",
				},
				{
					string Name = "Node",
					string Type = "AnimationNode",
					string Description = "",
				},
				{
					string Name = "PlayMode",
					string Type = "Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "SphericalParticleEmitter",
			string BaseClass = "ParticleEmitterShared",
			string Description = "Emits particles inside a sphere.",
			Array Tags = 
			[
				"Particle",
				"Component",
			],
			Array Properties = 
			[
			],
			Array Methods = 
			[
				{
					string Name = "EmitParticles",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(ParticleList particleList, Real dt, Mat4Ref transform, Vec3 velocity)",
					Array ParameterList = 
					[
						{
							string Name = "particleList",
							string Type = "ParticleList",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "transform",
							string Type = "Mat4Ref",
							string Description = "",
						},
						{
							string Name = "velocity",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ParticleAnimator",
			string BaseClass = "Component",
			string Description = "Particle Animator Interface. Particle Animators effect partices in the system.",
			Array Tags = 
			[
				"Particle",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "GraphicsSpace",
					string Type = "GraphicsSpace",
					string Description = "",
				},
				{
					string Name = "link",
					string Type = "Link<ParticleAnimator>",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Animate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ParticleList particleList, Real dt, Mat4Ref transform)",
					Array ParameterList = 
					[
						{
							string Name = "particleList",
							string Type = "ParticleList",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "transform",
							string Type = "Mat4Ref",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetHostRecord",
			string BaseClass = "",
			string Description = "NetHostRecord A record that contains the basic information of a game server. After a certain lifetime records expire on the master server.",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "BasicHostInfo",
					string Type = "EventBundle",
					string Description = "",
				},
				{
					string Name = "IpAddress",
					string Type = "IpAddress",
					string Description = "",
				},
				{
					string Name = "Lifetime",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator!=",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(const NetHostRecord rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const NetHostRecord",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator!=",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(const IpAddress rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const IpAddress",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator<",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(const NetHostRecord rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const NetHostRecord",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator<",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(const IpAddress rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const IpAddress",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator==",
					string Description = "Comparison Operators (compares IP addresses)",
					string ReturnType = "bool",
					string Parameters = "(const NetHostRecord rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const NetHostRecord",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator==",
					string Description = "Comparison Operators (compares IP addresses)",
					string ReturnType = "bool",
					string Parameters = "(const IpAddress rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const IpAddress",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ParticleSystem",
			string BaseClass = "Graphical",
			string Description = "",
			Array Tags = 
			[
				"Particle",
				"Component",
				"Graphical",
			],
			Array Properties = 
			[
				{
					string Name = "ChildMode",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "DrawOrder",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "SystemSpace",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "Tint",
					string Type = "Real4",
					string Description = "",
				},
				{
					string Name = "WarmUpTime",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddAnimator",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ParticleAnimator animator)",
					Array ParameterList = 
					[
						{
							string Name = "animator",
							string Type = "ParticleAnimator",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddChildSystem",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ParticleSystem child)",
					Array ParameterList = 
					[
						{
							string Name = "child",
							string Type = "ParticleSystem",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddEmitter",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ParticleEmitter emitter)",
					Array ParameterList = 
					[
						{
							string Name = "emitter",
							string Type = "ParticleEmitter",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ChildUpdate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Real dt, ParticleList parentList, Integer emitCount)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "parentList",
							string Type = "ParticleList",
							string Description = "",
						},
						{
							string Name = "emitCount",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAllObjectsCreated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TimeUpdate",
					string Description = "Particle System Interface.",
					string ReturnType = "void",
					string Parameters = "(Real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "VisibleUpdate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LinearParticleAnimator",
			string BaseClass = "ParticleAnimator",
			string Description = "Basic Particle Animation Effects.",
			Array Tags = 
			[
				"Particle",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Dampening",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "Force",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "Growth",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "RandomForce",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "Torque",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "Twist",
					string Type = "Real3",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Animate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ParticleList particleList, Real dt, Mat4Ref transform)",
					Array ParameterList = 
					[
						{
							string Name = "particleList",
							string Type = "ParticleList",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "transform",
							string Type = "Mat4Ref",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ParticleTwister",
			string BaseClass = "ParticleAnimator",
			string Description = "",
			Array Tags = 
			[
				"Particle",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Axis",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "MaxDistance",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "MinDistance",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "Strength",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Animate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ParticleList particleList, Real dt, Mat4Ref transform)",
					Array ParameterList = 
					[
						{
							string Name = "particleList",
							string Type = "ParticleList",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "transform",
							string Type = "Mat4Ref",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Resource",
			string BaseClass = "EventObject",
			string Description = "Base Resource class.",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Type = "string",
					string Description = "Name of resource for display.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddReference",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddTags",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HashSet<string> tags)",
					Array ParameterList = 
					[
						{
							string Name = "tags",
							string Type = "HashSet<string>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDependencies",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HashSet<ContentItem> dependencies, MetaObjectInstance instance)",
					Array ParameterList = 
					[
						{
							string Name = "dependencies",
							string Type = "HashSet<ContentItem>",
							string Description = "",
						},
						{
							string Name = "instance",
							string Type = "MetaObjectInstance",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetEditType",
					string Description = "",
					string ReturnType = "ResourceEditType::Type",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetManager",
					string Description = "",
					string ReturnType = "ResourceManager",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNameOrFilePath",
					string Description = "",
					string ReturnType = "string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetReferenceCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetTags",
					string Description = "Fills the given array with all tags associated with this resource.",
					string ReturnType = "void",
					string Parameters = "(Array<string> coreTags, Array<string> userTags)",
					Array ParameterList = 
					[
						{
							string Name = "coreTags",
							string Type = "Array<string>",
							string Description = "",
						},
						{
							string Name = "userTags",
							string Type = "Array<string>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetTags",
					string Description = "Fills the given array with all tags associated with this resource.",
					string ReturnType = "void",
					string Parameters = "(Array<string> tags)",
					Array ParameterList = 
					[
						{
							string Name = "tags",
							string Type = "Array<string>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetTags",
					string Description = "Fills the given array with all tags associated with this resource.",
					string ReturnType = "void",
					string Parameters = "(HashSet<string> tags)",
					Array ParameterList = 
					[
						{
							string Name = "tags",
							string Type = "HashSet<string>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleToObject",
					string Description = "",
					string ReturnType = "Resource",
					string Parameters = "(const MetaHandleData handleData)",
					Array ParameterList = 
					[
						{
							string Name = "handleData",
							string Type = "const MetaHandleData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HasTag",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(StringParam tag)",
					Array ParameterList = 
					[
						{
							string Name = "tag",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsRuntime",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsWritable",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ObjectToHandle",
					string Description = "",
					string ReturnType = "MetaHandleData",
					string Parameters = "(Resource instance)",
					Array ParameterList = 
					[
						{
							string Name = "instance",
							string Type = "Resource",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Release",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ResourceModified",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnType = "Resource",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Save",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(string filename)",
					Array ParameterList = 
					[
						{
							string Name = "filename",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendModified",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateContentItem",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ContentItem contentItem)",
					Array ParameterList = 
					[
						{
							string Name = "contentItem",
							string Type = "ContentItem",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator=",
					string Description = "",
					string ReturnType = "Resource",
					string Parameters = "(const Resource source)",
					Array ParameterList = 
					[
						{
							string Name = "source",
							string Type = "const Resource",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "SimpleSound",
			string BaseClass = "Component",
			string Description = "",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Cue",
					string Type = "SoundCue",
					string Description = "",
				},
				{
					string Name = "Positional",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "StartPlaying",
					string Type = "Boolean",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsPlaying",
					string Description = "Is this sound currently playing?",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Play",
					string Description = "Plays the sound.",
					string ReturnType = "SoundInstance",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Stop",
					string Description = "Stops the sound.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "TranslateGizmo",
			string BaseClass = "Component",
			string Description = "Updates the translation of the gizmo when it's being dragged.",
			Array Tags = 
			[
				"Component",
				"Gizmo",
			],
			Array Properties = 
			[
				{
					string Name = "SnapDistance",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "SnapMode",
					string Type = "GizmoSnapMode",
					string Description = "",
				},
				{
					string Name = "UpdateMode",
					string Type = "UpdateMode",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "GetStartPosition",
					string Description = "Start Position getter (we want it to be read only).",
					string ReturnType = "Vec3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnGizmoModified",
					string Description = "As the gizmo is being dragged, we want to update the Transform based on the current update mode.",
					string ReturnType = "void",
					string Parameters = "(GizmoUpdateEvent e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "GizmoUpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnMouseDragStart",
					string Description = "When the mouse drag starts, we want to store our position in order to calculate our new position when the gizmo is modified.",
					string ReturnType = "void",
					string Parameters = "(Event e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LockStepGameStartEvent",
			string BaseClass = "",
			string Description = "A lock-step game started event.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "PeerCount",
					string Type = "Integer",
					string Description = "The number of peers in the game.",
				},
				{
					string Name = "Peers",
					string Type = "PeerRange",
					string Description = "Store the peer range.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Sound",
			string BaseClass = "Resource",
			string Description = "Sound from an audio file.",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "SoundAsset",
					string Type = "Audio::SoundAssetNode",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "CreateAsset",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Status status, const string fileName, bool streaming)",
					Array ParameterList = 
					[
						{
							string Name = "status",
							string Type = "Status",
							string Description = "",
						},
						{
							string Name = "fileName",
							string Type = "const string",
							string Description = "",
						},
						{
							string Name = "streaming",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendAudioEvent",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Audio::AudioEventType eventType)",
					Array ParameterList = 
					[
						{
							string Name = "eventType",
							string Type = "Audio::AudioEventType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "CustomJoint",
			string BaseClass = "Joint",
			string Description = "",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "ConstraintCount",
					string Type = "Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddConstraint",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CustomConstraintInfo constraint)",
					Array ParameterList = 
					[
						{
							string Name = "constraint",
							string Type = "CustomConstraintInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "BatchEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ClearConstraints",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Commit",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePositionMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ConstraintInfoToMolecule",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CustomConstraintInfo constraint, ConstraintMolecule molecule)",
					Array ParameterList = 
					[
						{
							string Name = "constraint",
							string Type = "CustomConstraintInfo",
							string Description = "",
						},
						{
							string Name = "molecule",
							string Type = "ConstraintMolecule",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateConstraint",
					string Description = "",
					string ReturnType = "CustomConstraintInfo",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAtomIndexFilter",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Integer atomIndex, real desiredConstraintValue)",
					Array ParameterList = 
					[
						{
							string Name = "atomIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "desiredConstraintValue",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetConstraint",
					string Description = "",
					string ReturnType = "CustomConstraintInfo",
					string Parameters = "(size_t index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "size_t",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PositionMoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveConstraint",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CustomConstraintInfo constraint)",
					Array ParameterList = 
					[
						{
							string Name = "constraint",
							string Type = "CustomConstraintInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Solve",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAtoms",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateTransform",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer colliderIndex)",
					Array ParameterList = 
					[
						{
							string Name = "colliderIndex",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WarmStart",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "WheelJoint2d",
			string BaseClass = "Joint",
			string Description = "A joint that models a wheel with shocks. This is the 2d version of the wheel joint. This joint is used in 2d mode for increased speed and stability. The motor axis is automatically set to the z axis, as that is the only axis objects can rotate upon. Also, the translation on the z axis is ignored so that objects can be arbitrarily far apart. Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Motor: A motor will turn the objects about the motor axis. Spring: A spring will make the shock axis springy. A spring is attached by default to a wheel.",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "LocalAngleA",
					string Type = "Quaternion",
					string Description = "",
				},
				{
					string Name = "LocalAngleB",
					string Type = "Quaternion",
					string Description = "",
				},
				{
					string Name = "LocalPointA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "LocalPointB",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "ShockAxis",
					string Type = "Real3",
					string Description = "The shock axis of the wheel in object A's local space.",
				},
				{
					string Name = "WorldPointA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldPointB",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldShockAxis",
					string Type = "Real3",
					string Description = "The shock axis of the wheel in world space.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "BatchEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Commit",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComponentAdded",
					string Description = "Used to detect when motors/limits/springs are added dynamically.",
					string ReturnType = "void",
					string Parameters = "(TypeIdType typeId, Component component)",
					Array ParameterList = 
					[
						{
							string Name = "typeId",
							string Type = "TypeIdType",
							string Description = "",
						},
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeInitialConfiguration",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMoleculeData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeData moleculeData)",
					Array ParameterList = 
					[
						{
							string Name = "moleculeData",
							string Type = "MoleculeData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePositionMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAtomIndexFilter",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Integer atomIndex, real desiredConstraintValue)",
					Array ParameterList = 
					[
						{
							string Name = "atomIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "desiredConstraintValue",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultLimitIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultMotorIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultSpringIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAllObjectsCreated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PositionMoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Solve",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAtoms",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WarmStart",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LockStepMouseEvent",
			string BaseClass = "",
			string Description = "A synced mouse event.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "AltPressed",
					string Type = "bool",
					string Description = "Is alt pressed with this mouse action?",
				},
				{
					string Name = "CtrlPressed",
					string Type = "bool",
					string Description = "Is ctrl pressed with this mouse action?",
				},
				{
					string Name = "LeftPressed",
					string Type = "bool",
					string Description = "Is the left mouse button down?",
				},
				{
					string Name = "MiddlePressed",
					string Type = "bool",
					string Description = "Is the middle mouse button down?",
				},
				{
					string Name = "RightPressed",
					string Type = "bool",
					string Description = "Is the right mouse button down?",
				},
				{
					string Name = "ScreenDelta",
					string Type = "Vec2",
					string Description = "The motion of the mouse on the screen (see ScreenPosition)",
				},
				{
					string Name = "ScreenPosition",
					string Type = "Vec2",
					string Description = "A screen position of the mouse from [0, 1] on each axis where [0, 0] is the top left, [1, 1] is the bottom right.",
				},
				{
					string Name = "ShiftPressed",
					string Type = "bool",
					string Description = "Is shift pressed with this mouse action?",
				},
				{
					string Name = "WorldDirection",
					string Type = "Vec3",
					string Description = "The direction of the mouse position in world space.",
				},
				{
					string Name = "WorldStart",
					string Type = "Vec3",
					string Description = "The start of the mouse position in world space.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serialization of the event.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "CommandEvent",
			string BaseClass = "",
			string Description = "",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Space",
					string Type = "Space",
					string Description = "Gives context to where the command was executed.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "PositionJoint",
			string BaseClass = "Joint",
			string Description = "Represents a ball and socket joint. A position joint constrains the two anchor points on each object to be equal. Limits, motors and springs should most likely not be used on this. Add on definitions: Limit: A limit will provide a min/max translation on every axis (x,y,z) that the objects must be between. Motor: A motor will attempt to drive the translation in the positive direction on every axis. Spring: A spring will make the translation on every axis springy at the bounds.",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "LocalPointA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "LocalPointB",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldPointA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldPointB",
					string Type = "Real3",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "BatchEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Commit",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeInitialConfiguration",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMoleculeData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeData moleculeData)",
					Array ParameterList = 
					[
						{
							string Name = "moleculeData",
							string Type = "MoleculeData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePositionMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAtomIndexFilter",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Integer atomIndex, real desiredConstraintValue)",
					Array ParameterList = 
					[
						{
							string Name = "atomIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "desiredConstraintValue",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultLimitIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultMotorIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultSpringIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PositionMoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Solve",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAtoms",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WarmStart",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "PhysicsMeshVertexData",
			string BaseClass = "BoundMeshData< GenericPhysicsMesh, Vec3 >",
			string Description = "",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "Count",
					string Type = "Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetChannel",
			string BaseClass = "",
			string Description = "Network Channel Manages the replication of a set of properties on the network.",
			Array Tags = 
			[
				"Networking",
			],
			Array Properties = 
			[
				{
					string Name = "Authority",
					string Type = "Authority",
					string Description = "Controls which peer has the authority to observe and replicate property changes (Client: Indicates both the client and server are allowed to observe and replicate property changes) (Server: Indicates only the server is allowed to observe and replicate property changes) Only a single client, specified by NetObject::NetUserOwnerPeerId, may possess client authority at any given time The server is still responsible for relaying contained property changes to other clients, but will not replicate contained property changes back to the authority client However, the server is also still responsible for other replication commands (such as object creation/destruction), and these WILL be replicated to the authority client.",
				},
				{
					string Name = "ChangeFlag",
					string Type = "Boolean",
					string Description = "Manual change flag (checked upon manual change observation)",
				},
				{
					string Name = "IsNapping",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "IsScheduled",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "LastChangeTimePassed",
					string Type = "Real",
					string Description = "Elapsed time passed since this net channel was last changed, else 0.",
				},
				{
					string Name = "LastChangeTimestamp",
					string Type = "Real",
					string Description = "Timestamp indicating when this net channel was last changed, else 0.",
				},
				{
					string Name = "Name",
					string Type = "string",
					string Description = "Net channel name.",
				},
				{
					string Name = "NetChannelType",
					string Type = "NetChannelType",
					string Description = "Operating net channel type.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddBasicNetProperty",
					string Description = "",
					string ReturnType = "NetProperty",
					string Parameters = "(const string netPropertyName, T propertyData, NetPropertyConfig netPropertyConfig)",
					Array ParameterList = 
					[
						{
							string Name = "netPropertyName",
							string Type = "const string",
							string Description = "",
						},
						{
							string Name = "propertyData",
							string Type = "T",
							string Description = "",
						},
						{
							string Name = "netPropertyConfig",
							string Type = "NetPropertyConfig",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddBasicNetProperty",
					string Description = "",
					string ReturnType = "NetProperty",
					string Parameters = "(const string netPropertyName, const Variant propertyData, SerializeValueFn serializeValueFn, GetValueFn getValueFn, SetValueFn setValueFn, NetPropertyConfig netPropertyConfig)",
					Array ParameterList = 
					[
						{
							string Name = "netPropertyName",
							string Type = "const string",
							string Description = "",
						},
						{
							string Name = "propertyData",
							string Type = "const Variant",
							string Description = "",
						},
						{
							string Name = "serializeValueFn",
							string Type = "SerializeValueFn",
							string Description = "",
						},
						{
							string Name = "getValueFn",
							string Type = "GetValueFn",
							string Description = "",
						},
						{
							string Name = "setValueFn",
							string Type = "SetValueFn",
							string Description = "",
						},
						{
							string Name = "netPropertyConfig",
							string Type = "NetPropertyConfig",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddNetProperty",
					string Description = "[Client/Server] Adds the net property (Cannot be modified after net object component initialization) (Must not differ between client/server peers!) Returns the net property if successful, else nullptr (a net property of that name already exists)",
					string ReturnType = "NetProperty",
					string Parameters = "(Component component, MetaProperty metaProperty, const string netPropertyTypeName, NetPropertyConfig netPropertyConfig)",
					Array ParameterList = 
					[
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
						{
							string Name = "metaProperty",
							string Type = "MetaProperty",
							string Description = "",
						},
						{
							string Name = "netPropertyTypeName",
							string Type = "const string",
							string Description = "",
						},
						{
							string Name = "netPropertyConfig",
							string Type = "NetPropertyConfig",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ClearNetProperties",
					string Description = "[Client/Server] Removes all net properties (Cannot be modified after net object component initialization) (Must not differ between client/server peers!)",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetCombinedNetPropertyName",
					string Description = "Returns the combined net property name (""ComponentName_PropertyName""), else String()",
					string ReturnType = "string",
					string Parameters = "(Component component, StringParam propertyName)",
					Array ParameterList = 
					[
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
						{
							string Name = "propertyName",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNetObject",
					string Description = "Operating net object.",
					string ReturnType = "NetObject",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNetPeer",
					string Description = "Operating net peer.",
					string ReturnType = "NetPeer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNetProperty",
					string Description = "[Client/Server] Returns the specified net property, else nullptr",
					string ReturnType = "NetProperty",
					string Parameters = "(Component component, StringParam propertyName)",
					Array ParameterList = 
					[
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
						{
							string Name = "propertyName",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HasNetProperty",
					string Description = "[Client/Server] Returns true if the net object has the specified net property, else false",
					string ReturnType = "bool",
					string Parameters = "(Component component, StringParam propertyName)",
					Array ParameterList = 
					[
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
						{
							string Name = "propertyName",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsNapping",
					string Description = "Returns true if the net channel is currently napping (performing change detection on longer intervals), else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsScheduled",
					string Description = "Returns true if this net channel is scheduled for change observation, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveNetProperty",
					string Description = "[Client/Server] Removes the specified net property (Cannot be modified after net object component initialization) (Must not differ between client/server peers!) Returns true if successful, else false (a net property of that name could not be found)",
					string ReturnType = "bool",
					string Parameters = "(Component component, StringParam propertyName)",
					Array ParameterList = 
					[
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
						{
							string Name = "propertyName",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReplicateNow",
					string Description = "Replicates net property changes immediately (only if changes are detected) Will also update nap state as configured Returns true if changes were replicated, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TakeNap",
					string Description = "Forces the net channel to start napping immediately.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WakeUp",
					string Description = "Forces the net channel to stop napping immediately.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Motion",
			string BaseClass = "Component",
			string Description = "Motion component used for systems to communicate to physics changes in object velocity.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
			],
			Array Methods = 
			[
				{
					string Name = "ApplyObjectAngularVelocity",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Vec3 angularVelocity)",
					Array ParameterList = 
					[
						{
							string Name = "angularVelocity",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplyVelocity",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Vec3 velocity)",
					Array ParameterList = 
					[
						{
							string Name = "velocity",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetObjectAngularVelocity",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Vec3 newVelocity)",
					Array ParameterList = 
					[
						{
							string Name = "newVelocity",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetObjectVelocity",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Vec3 newVelocity)",
					Array ParameterList = 
					[
						{
							string Name = "newVelocity",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ContactHolder",
			string BaseClass = "BaseConstraintHolder< Physics::Contact, Physics::ContactEdge >",
			string Description = "A ""specialization"" of the Base Constraint Holder that has contact specific helpers.",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "ContactPointCount",
					string Type = "Integer",
					string Description = "Returns how many points of contact there are.",
				},
				{
					string Name = "ContactPoints",
					string Type = "ContactPointRange",
					string Description = "Returns a range to iterate through all of the contact points.",
				},
				{
					string Name = "FirstPoint",
					string Type = "ContactPoint",
					string Description = "Just a helper when we don't care about iterating through the points and we just want a point to sample.",
				},
				{
					string Name = "IsGhost",
					string Type = "Boolean",
					string Description = "Returns whether or not this was a ghost collision.",
				},
				{
					string Name = "IsNew",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Object",
					string Type = "Cog",
					string Description = "",
				},
				{
					string Name = "OtherObject",
					string Type = "Cog",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "GetContact",
					string Description = "",
					string ReturnType = "Contact",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetSkipsResolution",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetPeerClosed",
			string BaseClass = "",
			string Description = "Dispatched before gracefully closing the net peer.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Joysticks",
			string BaseClass = "EventObject",
			string Description = "Joysticks is a collection of all joysticks available.",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "JoystickCount",
					string Type = "Integer",
					string Description = "Get the number of joysticks.",
				},
				{
					string Name = "Joysticks",
					string Type = "JoystickRange",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddJoystickDevice",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer deviceHandle, Integer hardwardGuid, string name, RawControlMapping map)",
					Array ParameterList = 
					[
						{
							string Name = "deviceHandle",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "hardwardGuid",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "name",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "map",
							string Type = "RawControlMapping",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DeactivateAll",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetJoystickByDevice",
					string Description = "Get the joystick for a given hardware id.",
					string ReturnType = "Joystick",
					string Parameters = "(Integer id)",
					Array ParameterList = 
					[
						{
							string Name = "id",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "JoysticksChanged",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Feelers",
			string BaseClass = "MovementBase",
			string Description = "Rotates the object away from obstacles by using feeler sensors that detect walls.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "FeelerMode",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "LocalOffset",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "PrimaryFeelerDistance",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "PrimaryFeelerMaxAngle",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "SideFeelerAngle",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "SideFeelerDistance",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ComputeAngleChangeRadians",
					string Description = "",
					string ReturnType = "Real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ObjectLinkEdge",
			string BaseClass = "",
			string Description = "A directed edge between a cog and an object link.",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "ObjectLink",
					string Type = "ObjectLink",
					string Description = "The object link that this edge is connected to.",
				},
				{
					string Name = "OtherCog",
					string Type = "Cog",
					string Description = "The other cog that the object link is connected to (the one not part of this edge).",
				},
				{
					string Name = "SelfCog",
					string Type = "Cog",
					string Description = "The cog that this edge on the object link is connected to.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Clear",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsValid",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Set",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ObjectLink link, Cog cog)",
					Array ParameterList = 
					[
						{
							string Name = "link",
							string Type = "ObjectLink",
							string Description = "",
						},
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ParticleSystemCommonData",
			string BaseClass = "ParticleSystem",
			string Description = "",
			Array Tags = 
			[
				"Particle",
				"Component",
				"Graphical",
			],
			Array Properties = 
			[
				{
					string Name = "Animators",
					string Type = "AnimatorList",
					string Description = "All animators affecting this system.",
				},
				{
					string Name = "ChildSystems",
					string Type = "ParticleSystemList",
					string Description = "Particle Systems.",
				},
				{
					string Name = "Emitters",
					string Type = "EmitterList",
					string Description = "All emitters affecting this system.",
				},
				{
					string Name = "ParticleList",
					string Type = "ParticleList",
					string Description = "Particles on this system.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddAnimator",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ParticleAnimator animator)",
					Array ParameterList = 
					[
						{
							string Name = "animator",
							string Type = "ParticleAnimator",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddChildSystem",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ParticleSystem child)",
					Array ParameterList = 
					[
						{
							string Name = "child",
							string Type = "ParticleSystem",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddEmitter",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ParticleEmitter emitter)",
					Array ParameterList = 
					[
						{
							string Name = "emitter",
							string Type = "ParticleEmitter",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AllParticles",
					string Description = "Allows direct editing of particles.",
					string ReturnType = "ParticleListRange",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "BaseInitialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "BaseUpdate",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ChildUpdate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Real dt, ParticleList parentList, Integer parentEmitCount)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "parentList",
							string Type = "ParticleList",
							string Description = "",
						},
						{
							string Name = "parentEmitCount",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateLifetimes",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "VisibleUpdate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetPeerOpened",
			string BaseClass = "",
			string Description = "Dispatched after successfully opening the net peer.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LightningPluginConfig",
			string BaseClass = "Component",
			string Description = "",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "AttemptedIdeToolsInstall",
					string Type = "Boolean",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Blocking",
			string BaseClass = "Component",
			string Description = "Responsible for determining whether or not the object blocks path finding.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "TimeSpace",
			string BaseClass = "Component",
			string Description = "Time space component controls time for a Space .",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Dt",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "DtOrZero",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "Frame",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "GloballyPaused",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "MaxDt",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "MinDt",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "Paused",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "RealDt",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "RealTimePassed",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "StepCount",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "TimeMode",
					string Type = "Integer",
					string Description = "When set to fixed framerate the Dt/frame time will never change (it will send whatever the project frame-rate-limiter is set to) This means it is important to run with a frame-rate limiter of some kind otherwise the game will appear to run much faster/slower Note: For determinism, you should always run in FixedFrametime mode When set to actual framerate we will send out the real time that the engine is encountering (clamped by MinDt / MaxDt)",
				},
				{
					string Name = "TimePassed",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "TimeScale",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Step",
					string Description = "Allows the engine to be advance one frame forward. Useful for debugging one frame at a time.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TogglePause",
					string Description = "Toggles the state of paused.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Update",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetPeerSentUserAddResponse",
			string BaseClass = "",
			string Description = "Dispatched after sending a net user add response.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "OurAddResponse",
					string Type = "NetUserAddResponse",
					string Description = "",
				},
				{
					string Name = "OurResponseBundle",
					string Type = "EventBundle",
					string Description = "",
				},
				{
					string Name = "TheirIpAddress",
					string Type = "IpAddress",
					string Description = "",
				},
				{
					string Name = "TheirNetPeerId",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "TheirNetUser",
					string Type = "Cog",
					string Description = "",
				},
				{
					string Name = "TheirNetUserId",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "TheirRequestBundle",
					string Type = "EventBundle",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "TextEditorConfig",
			string BaseClass = "Component",
			string Description = "",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "AutoCompleteOnEnter",
					string Type = "bool",
					string Description = "Whether or not the auto-complete allows enter (similar to Tab) to be used as an auto-completer If the user manually scrolls through the list of suggestions, Enter will always complete regardless of this option.",
				},
				{
					string Name = "CodeFolding",
					string Type = "bool",
					string Description = "Is code folding enabled?",
				},
				{
					string Name = "ColorScheme",
					string Type = "string",
					string Description = "Name of color scheme to use.",
				},
				{
					string Name = "ConfidentAutoCompleteOnSymbols",
					string Type = "bool",
					string Description = "When the auto-complete is confident in its results (green), this controls whether or not we will finish completion on any symbol rather than just Tab Non-confident results (red) always require the user to press Tab (or Enter if AutoCompleteOnEnter is set)",
				},
				{
					string Name = "FontSize",
					string Type = "Integer",
					string Description = "Default Font Size.",
				},
				{
					string Name = "KeywordAndTypeCompletion",
					string Type = "bool",
					string Description = "Whether we include keywords and types from the languages.",
				},
				{
					string Name = "LineNumbers",
					string Type = "bool",
					string Description = "Show Line numbers.",
				},
				{
					string Name = "LocalWordCompletion",
					string Type = "bool",
					string Description = "Whether we include local words from the current document / language.",
				},
				{
					string Name = "ShowWhiteSpace",
					string Type = "bool",
					string Description = "If we show whitespace as special symbols in the text editor.",
				},
				{
					string Name = "TabWidth",
					string Type = "TabWidth::Type",
					string Description = "Number of spaces inserted for tabs.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Archetype",
			string BaseClass = "Resource",
			string Description = "An archetype is a resource contains the serialized data definition of an object. The archetype stores a binary cache of the serialization data and the source file for debugging and for archetype updating.",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "BinaryCache",
					string Type = "DataBlock",
					string Description = "Cached Binary Archetype Data.",
				},
				{
					string Name = "CacheHeap",
					string Type = "Memory::Heap",
					string Description = "",
				},
				{
					string Name = "CachedObject",
					string Type = "CogId",
					string Description = "",
				},
				{
					string Name = "Category",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "LoadPath",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "StoredType",
					string Type = "MetaType",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "BinaryCache",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Cog cog, CreationContext context)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "context",
							string Type = "CreationContext",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDependencies",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HashSet<ContentItem> dependencies, MetaObjectInstance instance)",
					Array ParameterList = 
					[
						{
							string Name = "dependencies",
							string Type = "HashSet<ContentItem>",
							string Description = "",
						},
						{
							string Name = "instance",
							string Type = "MetaObjectInstance",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetStringData",
					string Description = "",
					string ReturnType = "string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Save",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(string filename)",
					Array ParameterList = 
					[
						{
							string Name = "filename",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Uncache",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateContentItem",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ContentItem contentItem)",
					Array ParameterList = 
					[
						{
							string Name = "contentItem",
							string Type = "ContentItem",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NavMeshSource",
			string BaseClass = "",
			string Description = "",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "Data",
					string Type = "NavMeshData",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Initialize",
					string Description = "Initializes the curve.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Save",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(string filename)",
					Array ParameterList = 
					[
						{
							string Name = "filename",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serialize the curve to/from a file.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "Set default data.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "RenderGroup",
			string BaseClass = "DataResource",
			string Description = "",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "AddExcludeFragment",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "AddExcludeTag",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "AddIncludeFragment",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "AddIncludeTag",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "ExclusionFragments",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "ExclusionTags",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "GraphicalSortMethod",
					string Type = "GraphicalSortMethod",
					string Description = "",
				},
				{
					string Name = "InclusionFragments",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "InclusionTags",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "RemoveExcludeFragment",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "RemoveExcludeTag",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "RemoveIncludeFragment",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "RemoveIncludeTag",
					string Type = "string",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddMaterial",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Material material)",
					Array ParameterList = 
					[
						{
							string Name = "material",
							string Type = "Material",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveMaterial",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Material material)",
					Array ParameterList = 
					[
						{
							string Name = "material",
							string Type = "Material",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendModified",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TestMaterial",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(Material material)",
					Array ParameterList = 
					[
						{
							string Name = "material",
							string Type = "Material",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "CollisionEvent",
			string BaseClass = "BaseCollisionEvent",
			string Description = "Collision event for when a contact begins, ends, or is persisted. Contains the point that triggered the begin/end (IncidentPoint). If it is a persistent collision, the point is just point 0 from the manifold.",
			Array Tags = 
			[
				"Physics",
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "FirstPoint",
					string Type = "ContactPoint",
					string Description = "Returns the point that caused the begin/end to happen.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "GetEventName",
					string Description = "",
					string ReturnType = "string",
					string Parameters = "(BaseCollisionEvent::CollisionType type)",
					Array ParameterList = 
					[
						{
							string Name = "type",
							string Type = "BaseCollisionEvent::CollisionType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Set",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(const Physics::Manifold manifold, const Physics::ManifoldPoint point, string eventType)",
					Array ParameterList = 
					[
						{
							string Name = "manifold",
							string Type = "const Physics::Manifold",
							string Description = "",
						},
						{
							string Name = "point",
							string Type = "const Physics::ManifoldPoint",
							string Description = "",
						},
						{
							string Name = "eventType",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdatePoint",
					string Description = "Used to update the values in the event for the incident point before we send the event (some values might have changed after solving)",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Transform",
			string BaseClass = "Component",
			string Description = "Transform component class. The transform component provides the position, rotation and scale of an object.",
			Array Tags = 
			[
				"Component",
				"Core",
			],
			Array Properties = 
			[
				{
					string Name = "EulerAngles",
					string Type = "Real3",
					string Description = "The rotation of the transform as an Euler angle vector in radians.",
				},
				{
					string Name = "LocalRotation",
					string Type = "Quaternion",
					string Description = "Local rotation relative to parent.",
				},
				{
					string Name = "LocalScale",
					string Type = "Real3",
					string Description = "Local Scale relative to parent.",
				},
				{
					string Name = "LocalTranslation",
					string Type = "Real3",
					string Description = "Local Translation relative to parent.",
				},
				{
					string Name = "Rotation",
					string Type = "Quat",
					string Description = "Local rotation relative to parent.",
				},
				{
					string Name = "Scale",
					string Type = "Vec3",
					string Description = "Local Scale relative to parent.",
				},
				{
					string Name = "Translation",
					string Type = "Vec3",
					string Description = "Local Translation relative to parent.",
				},
				{
					string Name = "WorldRotation",
					string Type = "Quaternion",
					string Description = "Rotation in World Space .",
				},
				{
					string Name = "WorldScale",
					string Type = "Real3",
					string Description = "Scale in World Space .",
				},
				{
					string Name = "WorldTranslation",
					string Type = "Real3",
					string Description = "Translation in World Space .",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AttachTo",
					string Description = "Signal that the Cog has been attached to another Cog .",
					string ReturnType = "void",
					string Parameters = "(AttachmentInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "AttachmentInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ClampTranslation",
					string Description = "Clamps a translation value between the max values on the space. This will display a notification if any value was clamped.",
					string ReturnType = "Vec3",
					string Parameters = "(Space space, Cog owner, Vec3 translation)",
					Array ParameterList = 
					[
						{
							string Name = "space",
							string Type = "Space",
							string Description = "",
						},
						{
							string Name = "owner",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "translation",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeDeltaTransform",
					string Description = "Sets up the TransformUpdateInfo with the delta transformation that goes from oldWorldMat to newWorldMat.",
					string ReturnType = "void",
					string Parameters = "(TransformUpdateInfo info, Mat4Param oldWorldMat, Mat4Param newWorldMat)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "TransformUpdateInfo",
							string Description = "",
						},
						{
							string Name = "oldWorldMat",
							string Type = "Mat4Param",
							string Description = "",
						},
						{
							string Name = "newWorldMat",
							string Type = "Mat4Param",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Detached",
					string Description = "Signal that the Cog has been detached from another Cog .",
					string ReturnType = "void",
					string Parameters = "(AttachmentInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "AttachmentInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetInWorld",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLocalMatrix",
					string Description = "",
					string ReturnType = "Mat4",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetParent",
					string Description = "",
					string ReturnType = "Transform",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetParentWorldMatrix",
					string Description = "",
					string ReturnType = "Mat4",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetSaveFlags",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldMatrix",
					string Description = "",
					string ReturnType = "Mat4",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "NormalizeRotation",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Reset",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RotateAnglesLocal",
					string Description = "Rotate object in local space by the given Euler angle vector (in radians).",
					string ReturnType = "void",
					string Parameters = "(Vec3 angles)",
					Array ParameterList = 
					[
						{
							string Name = "angles",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RotateAnglesWorld",
					string Description = "Rotate object in world space by the given Euler angle vector (in radians).",
					string ReturnType = "void",
					string Parameters = "(Vec3 angles)",
					Array ParameterList = 
					[
						{
							string Name = "angles",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RotateAround",
					string Description = "Rotate around a given point with the given rotation.",
					string ReturnType = "void",
					string Parameters = "(Vec3 point, Quat rotation)",
					Array ParameterList = 
					[
						{
							string Name = "point",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "rotation",
							string Type = "Quat",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RotateLocal",
					string Description = "Rotate object in local space.",
					string ReturnType = "void",
					string Parameters = "(Quat rotation)",
					Array ParameterList = 
					[
						{
							string Name = "rotation",
							string Type = "Quat",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RotateWorld",
					string Description = "Rotate object in world space.",
					string ReturnType = "void",
					string Parameters = "(Quat rotation)",
					Array ParameterList = 
					[
						{
							string Name = "rotation",
							string Type = "Quat",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDirty",
					string Description = "Free's the cached world matrix for this and all child objects.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetEulerAnglesXYZ",
					string Description = "Sets the rotation of the transform by the given Euler angles in radians.",
					string ReturnType = "void",
					string Parameters = "(Real xRadians, Real yRadians, Real zRadians)",
					Array ParameterList = 
					[
						{
							string Name = "xRadians",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "yRadians",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "zRadians",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetInWorld",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(bool state)",
					Array ParameterList = 
					[
						{
							string Name = "state",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetLocalRotationInternal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(QuatParam localRotation)",
					Array ParameterList = 
					[
						{
							string Name = "localRotation",
							string Type = "QuatParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetLocalScaleInternal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Vec3 localScale)",
					Array ParameterList = 
					[
						{
							string Name = "localScale",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetLocalTranslationInternal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Vec3 localTranslation)",
					Array ParameterList = 
					[
						{
							string Name = "localTranslation",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetRotationBases",
					string Description = "Generates a rotation matrix from the given bases.",
					string ReturnType = "void",
					string Parameters = "(Vec3 facing, Vec3 up, Vec3 right)",
					Array ParameterList = 
					[
						{
							string Name = "facing",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "up",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "right",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetWorldRotationInternal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(QuatParam worldRotation)",
					Array ParameterList = 
					[
						{
							string Name = "worldRotation",
							string Type = "QuatParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetWorldScaleInternal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Vec3 worldScale)",
					Array ParameterList = 
					[
						{
							string Name = "worldScale",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetWorldTranslationInternal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Vec3 worldTranslation)",
					Array ParameterList = 
					[
						{
							string Name = "worldTranslation",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TransformNormal",
					string Description = "Transforms a local normal (direction) into world space.",
					string ReturnType = "Vec3",
					string Parameters = "(Vec3 normal)",
					Array ParameterList = 
					[
						{
							string Name = "normal",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TransformNormalInverse",
					string Description = "Transforms a world normal (direction) into local space.",
					string ReturnType = "Vec3",
					string Parameters = "(Vec3 normal)",
					Array ParameterList = 
					[
						{
							string Name = "normal",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TransformNormalLocal",
					string Description = "Transforms a normal by the local matrix (ignores parent's transform) Needed now because there is no quaternion times vector in script.",
					string ReturnType = "Vec3",
					string Parameters = "(Vec3 normal)",
					Array ParameterList = 
					[
						{
							string Name = "normal",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TransformPoint",
					string Description = "Transforms a local point into world space.",
					string ReturnType = "Vec3",
					string Parameters = "(Vec3 point)",
					Array ParameterList = 
					[
						{
							string Name = "point",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TransformPointInverse",
					string Description = "Transforms a world point into local space.",
					string ReturnType = "Vec3",
					string Parameters = "(Vec3 point)",
					Array ParameterList = 
					[
						{
							string Name = "point",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TransformPointLocal",
					string Description = "Transforms a point by the local matrix (ignores parent's transform)",
					string ReturnType = "Vec3",
					string Parameters = "(Vec3 point)",
					Array ParameterList = 
					[
						{
							string Name = "point",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TransformUpdate",
					string Description = "Special function for transform updating from editor.",
					string ReturnType = "void",
					string Parameters = "(TransformUpdateInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "TransformUpdateInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Update",
					string Description = "Send the TransformUpdateInfo and compute the delta transform from the old transform to the current transform (mostly for the gizmo).",
					string ReturnType = "void",
					string Parameters = "(Integer flags, Mat4Param oldMat)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "oldMat",
							string Type = "Mat4Param",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Update",
					string Description = "Send the TransformUpdateInfo and compute the delta transform from the old transform to the current transform (mostly for the gizmo).",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAll",
					string Description = "Same as the above update function but it also auto sets the scale, rotation, and translation flags. Currently used for attach/detach.",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAll",
					string Description = "Same as the above update function but it also auto sets the scale, rotation, and translation flags. Currently used for attach/detach.",
					string ReturnType = "void",
					string Parameters = "(Mat4Param oldMat, Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "oldMat",
							string Type = "Mat4Param",
							string Description = "",
						},
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ResourceTable",
			string BaseClass = "DataResource",
			string Description = "A table of resources (or strings) that can be indexed, searched by name or sampled randomly. The table can be sampled to return a string or a resource pointer. If other info about the sampled value is needed, the table can be sampled for an index that can then be used to fetch the name, value, resource and weight at that index. This index can also be used to randomly sample arrays that are created along-side this resource.",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "All",
					string Type = "ResourceTableEntryListrange",
					string Description = "Range to iterate over all entries.",
				},
				{
					string Name = "Count",
					string Type = "Integer",
					string Description = "How many items are stored in the table.",
				},
				{
					string Name = "MaxWeight",
					string Type = "Real",
					string Description = "The maximum probability weight value that can be stored in the table. Setting this will clamp all weight values.",
				},
				{
					string Name = "ResourceType",
					string Type = "string",
					string Description = "The kind of resource contained in this table. This is either a resource type or ""String"".",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddNewEntry",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(const ValueType name, const ValueType value, const WeightType prob)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "const ValueType",
							string Description = "",
						},
						{
							string Name = "value",
							string Type = "const ValueType",
							string Description = "",
						},
						{
							string Name = "prob",
							string Type = "const WeightType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddNewEntry",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(StringParam value)",
					Array ParameterList = 
					[
						{
							string Name = "value",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddOrError",
					string Description = "Add the given entry. If another entry with the same name exists then an error is thrown.",
					string ReturnType = "void",
					string Parameters = "(ResourceTableEntry entry)",
					Array ParameterList = 
					[
						{
							string Name = "entry",
							string Type = "ResourceTableEntry",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddOrIgnore",
					string Description = "Add the given entry. If another entry with the same name exists then no operation is performed.",
					string ReturnType = "bool",
					string Parameters = "(ResourceTableEntry entry)",
					Array ParameterList = 
					[
						{
							string Name = "entry",
							string Type = "ResourceTableEntry",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddOrOverwrite",
					string Description = "Add the given entry. If another entry with the same name exists then it is overwritten.",
					string ReturnType = "bool",
					string Parameters = "(ResourceTableEntry entry)",
					Array ParameterList = 
					[
						{
							string Name = "entry",
							string Type = "ResourceTableEntry",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "BuildIfOutOfDate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Clear",
					string Description = "Clear all items in the table.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Contains",
					string Description = "Returns if the given key is contained.",
					string ReturnType = "bool",
					string Parameters = "(StringParam key)",
					Array ParameterList = 
					[
						{
							string Name = "key",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CopyTo",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ResourceTable destination)",
					Array ParameterList = 
					[
						{
							string Name = "destination",
							string Type = "ResourceTable",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ForceRebuild",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Get",
					string Description = "Access an item at the given index.",
					string ReturnType = "ResourceTableEntry",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Get",
					string Description = "Hash-Set interface. Gets/Sets the item with the same name as the entry.",
					string ReturnType = "ResourceTableEntry",
					string Parameters = "(ResourceTableEntry entry)",
					Array ParameterList = 
					[
						{
							string Name = "entry",
							string Type = "ResourceTableEntry",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Get",
					string Description = "Hash-Map interface. Gets/Sets the via the provided key.",
					string ReturnType = "ResourceTableEntry",
					string Parameters = "(StringParam key)",
					Array ParameterList = 
					[
						{
							string Name = "key",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetOrDefault",
					string Description = "Returns the entry associated with the given key. If no entry matches the key then the provided default is returned.",
					string ReturnType = "ResourceTableEntry",
					string Parameters = "(StringParam key, ResourceTableEntry defaultValue)",
					Array ParameterList = 
					[
						{
							string Name = "key",
							string Type = "StringParam",
							string Description = "",
						},
						{
							string Name = "defaultValue",
							string Type = "ResourceTableEntry",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetOrError",
					string Description = "Returns the entry associated with the given key. If no entry matches the key then an exception is thrown.",
					string ReturnType = "ResourceTableEntry",
					string Parameters = "(StringParam key)",
					Array ParameterList = 
					[
						{
							string Name = "key",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetOrNull",
					string Description = "Returns the entry associated with the given key. If no entry matches the null is returned.",
					string ReturnType = "ResourceTableEntry",
					string Parameters = "(StringParam key)",
					Array ParameterList = 
					[
						{
							string Name = "key",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetResource",
					string Description = "",
					string ReturnType = "Resource",
					string Parameters = "(StringParam resourceIdName, ResourceNotFound::Enum notFoundMode)",
					Array ParameterList = 
					[
						{
							string Name = "resourceIdName",
							string Type = "StringParam",
							string Description = "",
						},
						{
							string Name = "notFoundMode",
							string Type = "ResourceNotFound::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RebuildMap",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RebuildTable",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveAt",
					string Description = "Removes the item at the given index.",
					string ReturnType = "void",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveOrError",
					string Description = "Removes the entry associated with the given key. If no entry matches an exception is thrown.",
					string ReturnType = "void",
					string Parameters = "(StringParam key)",
					Array ParameterList = 
					[
						{
							string Name = "key",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveOrIgnore",
					string Description = "Removes the entry associated with the given key. If no entry matches then no operation is performed.",
					string ReturnType = "bool",
					string Parameters = "(StringParam key)",
					Array ParameterList = 
					[
						{
							string Name = "key",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnType = "ResourceTable",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Sample",
					string Description = "Samples the table to return a random entry. Takes two (different) random floats from [0,1) in order to sample. Returns an empty string if the table is empty.",
					string ReturnType = "ResourceTableEntry",
					string Parameters = "(Real random1, Real random2)",
					Array ParameterList = 
					[
						{
							string Name = "random1",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "random2",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Sample",
					string Description = "Samples the table to return a random entry given a random context.",
					string ReturnType = "ResourceTableEntry",
					string Parameters = "(RandomContext random)",
					Array ParameterList = 
					[
						{
							string Name = "random",
							string Type = "RandomContext",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SampleIndex",
					string Description = "Samples the table to return a random index into the table. Takes two (different) random floats from [0,1) in order to sample.",
					string ReturnType = "Integer",
					string Parameters = "(Real random1, Real random2)",
					Array ParameterList = 
					[
						{
							string Name = "random1",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "random2",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SampleIndex",
					string Description = "Samples the table to return a random index into the table given a random context.",
					string ReturnType = "Integer",
					string Parameters = "(RandomContext random)",
					Array ParameterList = 
					[
						{
							string Name = "random",
							string Type = "RandomContext",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Set",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(StringParam key, ResourceTableEntry entry)",
					Array ParameterList = 
					[
						{
							string Name = "key",
							string Type = "StringParam",
							string Description = "",
						},
						{
							string Name = "entry",
							string Type = "ResourceTableEntry",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Set",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ResourceTableEntry entry)",
					Array ParameterList = 
					[
						{
							string Name = "entry",
							string Type = "ResourceTableEntry",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Set",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer index, ResourceTableEntry entry)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "entry",
							string Type = "ResourceTableEntry",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetOutOfDate",
					string Description = "Mark the table as having changes that need to be processed on the next sample.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Size",
					string Description = "How many items are stored in the table.",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ValidateEntries",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ValidateEntry",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(ResourceTableEntry entry)",
					Array ParameterList = 
					[
						{
							string Name = "entry",
							string Type = "ResourceTableEntry",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ValidateEntryType",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(ResourceTableEntry entry, bool throwException)",
					Array ParameterList = 
					[
						{
							string Name = "entry",
							string Type = "ResourceTableEntry",
							string Description = "",
						},
						{
							string Name = "throwException",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator[]",
					string Description = "",
					string ReturnType = "ResourceTableEntry",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "GravityEffect",
			string BaseClass = "BasicDirectionEffect",
			string Description = "A constant acceleration that is applied in the given direction (mass is ignored). This is useful for creating gravity (either on the entire world or in a region) that will push/pull objects in a given direction at a constant acceleration.",
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
			Array Properties = 
			[
			],
			Array Methods = 
			[
				{
					string Name = "ApplyEffect",
					string Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force).",
					string ReturnType = "void",
					string Parameters = "(RigidBody obj, real dt)",
					Array ParameterList = 
					[
						{
							string Name = "obj",
							string Type = "RigidBody",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplyEffect",
					string Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force).",
					string ReturnType = "void",
					string Parameters = "(SpringSystem obj, real dt)",
					Array ParameterList = 
					[
						{
							string Name = "obj",
							string Type = "SpringSystem",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "PhysicsSpace",
			string BaseClass = "Component",
			string Description = "The PhysicsSpace is an ""instance"" of a world. This world manages and stores all of the other physical components of this world. PhysicSpaces act independently of each other.",
			Array Tags = 
			[
				"Physics",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "AllowSleep",
					string Type = "Boolean",
					string Description = "Determines if anything in the space is allowed to sleep or not.",
				},
				{
					string Name = "CollisionTable",
					string Type = "CollisionTable",
					string Description = "The collision table resource being used to filter collisions in this space.",
				},
				{
					string Name = "ContactTangentType",
					string Type = "Integer",
					string Description = "How should tangents be calculated? Don't use if you don't know what this is.",
				},
				{
					string Name = "Deterministic",
					string Type = "Boolean",
					string Description = "Does some extra work to help enforce determinism in the simulation.",
				},
				{
					string Name = "DynamicBroadphaseType",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "IsSolverShared",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "IslandCount",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "IslandType",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "Mode2D",
					string Type = "Boolean",
					string Description = "Determines if all new objects should operate in 2d mode.",
				},
				{
					string Name = "PhysicsSolverConfig",
					string Type = "PhysicsSolverConfig",
					string Description = "",
				},
				{
					string Name = "PostProcessIslands",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "PreProcessing",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "StaticBroadphaseType",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "SubStepCount",
					string Type = "Integer",
					string Description = "The number of iterations the physics space will take every frame. Used to achieve higher accuracy and visual results.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ActivateKinematic",
					string Description = "Takes a kinematic object and moves it to the moving kinematic list.",
					string ReturnType = "void",
					string Parameters = "(RigidBody body)",
					Array ParameterList = 
					[
						{
							string Name = "body",
							string Type = "RigidBody",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddComponent",
					string Description = "Adds the component to the appropriate list based on it's type.",
					string ReturnType = "void",
					string Parameters = "(Region region)",
					Array ParameterList = 
					[
						{
							string Name = "region",
							string Type = "Region",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddComponent",
					string Description = "Adds the component to the appropriate list based on it's type.",
					string ReturnType = "void",
					string Parameters = "(RigidBody body)",
					Array ParameterList = 
					[
						{
							string Name = "body",
							string Type = "RigidBody",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddComponent",
					string Description = "Adds the component to the appropriate list based on it's type.",
					string ReturnType = "void",
					string Parameters = "(Joint joint)",
					Array ParameterList = 
					[
						{
							string Name = "joint",
							string Type = "Joint",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddComponent",
					string Description = "Adds the component to the appropriate list based on it's type.",
					string ReturnType = "void",
					string Parameters = "(SpringSystem system)",
					Array ParameterList = 
					[
						{
							string Name = "system",
							string Type = "SpringSystem",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddComponent",
					string Description = "Adds the component to the appropriate list based on it's type.",
					string ReturnType = "void",
					string Parameters = "(Collider collider)",
					Array ParameterList = 
					[
						{
							string Name = "collider",
							string Type = "Collider",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddComponent",
					string Description = "Adds the component to the appropriate list based on it's type.",
					string ReturnType = "void",
					string Parameters = "(PhysicsCar car)",
					Array ParameterList = 
					[
						{
							string Name = "car",
							string Type = "PhysicsCar",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddGlobalEffect",
					string Description = "For adding effects to all objects in a space.",
					string ReturnType = "void",
					string Parameters = "(PhysicsEffect effect)",
					Array ParameterList = 
					[
						{
							string Name = "effect",
							string Type = "PhysicsEffect",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddHierarchyPairFilter",
					string Description = "Adds a filter to ignore collision between both trees passed in. See AddPairFilter for more info.",
					string ReturnType = "void",
					string Parameters = "(Cog cog1, Cog cog2)",
					Array ParameterList = 
					[
						{
							string Name = "cog1",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "cog2",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddHierarchyPairFilterInternal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Cog heirarchyCog, Cog normalCog)",
					Array ParameterList = 
					[
						{
							string Name = "heirarchyCog",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "normalCog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddPairFilter",
					string Description = "Filters these two cogs to not resolve collision. This is a runtime only feature and will not be saved.",
					string ReturnType = "void",
					string Parameters = "(Cog cog1, Cog cog2)",
					Array ParameterList = 
					[
						{
							string Name = "cog1",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "cog2",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddPairFilterInternal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Collider collider1, Collider collider2)",
					Array ParameterList = 
					[
						{
							string Name = "collider1",
							string Type = "Collider",
							string Description = "",
						},
						{
							string Name = "collider2",
							string Type = "Collider",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddToInactive",
					string Description = "Adds and removes from the inactive body list so that it is not updated.",
					string ReturnType = "void",
					string Parameters = "(RigidBody body)",
					Array ParameterList = 
					[
						{
							string Name = "body",
							string Type = "RigidBody",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplyGlobalEffects",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(RigidBody body, real dt)",
					Array ParameterList = 
					[
						{
							string Name = "body",
							string Type = "RigidBody",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplyHierarchyEffects",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "BroadPhase",
					string Description = "Updates all the BroadPhases then gets all possible collisions from them.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CastAabb",
					string Description = "Returns all the objects in a given volume.",
					string ReturnType = "void",
					string Parameters = "(const Aabb aabb, CastResults results)",
					Array ParameterList = 
					[
						{
							string Name = "aabb",
							string Type = "const Aabb",
							string Description = "",
						},
						{
							string Name = "results",
							string Type = "CastResults",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CastAabbResults",
					string Description = "Returns the results of the filtered Aabb cast. The amount of objects returned is based on the count passed in.",
					string ReturnType = "CastResultsRange",
					string Parameters = "(Vec3 center, Vec3 size, Integer count, CastFilter filter)",
					Array ParameterList = 
					[
						{
							string Name = "center",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "size",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "count",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "filter",
							string Type = "CastFilter",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CastCollider",
					string Description = "Currently a hack function for player controller sweeping.",
					string ReturnType = "void",
					string Parameters = "(Vec3 offset, Collider testCollider, Physics::ManifoldArray results, CastFilter filter)",
					Array ParameterList = 
					[
						{
							string Name = "offset",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "testCollider",
							string Type = "Collider",
							string Description = "",
						},
						{
							string Name = "results",
							string Type = "Physics::ManifoldArray",
							string Description = "",
						},
						{
							string Name = "filter",
							string Type = "CastFilter",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CastColliderResults",
					string Description = "Cast out a collider to see what it's colliding with.",
					string ReturnType = "CastResultsRange",
					string Parameters = "(Vec3 offset, Collider testCollider, CastFilter filter)",
					Array ParameterList = 
					[
						{
							string Name = "offset",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "testCollider",
							string Type = "Collider",
							string Description = "",
						},
						{
							string Name = "filter",
							string Type = "CastFilter",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CastFrustum",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(const Frustum frustum, CastResults results)",
					Array ParameterList = 
					[
						{
							string Name = "frustum",
							string Type = "const Frustum",
							string Description = "",
						},
						{
							string Name = "results",
							string Type = "CastResults",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CastRay",
					string Description = "Returns the results of a Ray Cast. The results of the ray cast are stored in the passed in vector sorted by time of collision. The number of results given is based on the size of the CastResults passed in.",
					string ReturnType = "void",
					string Parameters = "(Ray worldRay, CastResults results)",
					Array ParameterList = 
					[
						{
							string Name = "worldRay",
							string Type = "Ray",
							string Description = "",
						},
						{
							string Name = "results",
							string Type = "CastResults",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CastRayFirst",
					string Description = "Performs a ray cast and returns the first object that is collided with.",
					string ReturnType = "CastResult",
					string Parameters = "(Ray worldRay)",
					Array ParameterList = 
					[
						{
							string Name = "worldRay",
							string Type = "Ray",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CastRayFirstFiltered",
					string Description = "Performs a ray cast and returns the first object that is collided with.",
					string ReturnType = "CastResult",
					string Parameters = "(Ray worldRay, CastFilter filter)",
					Array ParameterList = 
					[
						{
							string Name = "worldRay",
							string Type = "Ray",
							string Description = "",
						},
						{
							string Name = "filter",
							string Type = "CastFilter",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CastRayResults",
					string Description = "Returns the results of the ray cast. The number of objects returned is based on the count passed in.",
					string ReturnType = "CastResultsRange",
					string Parameters = "(Ray worldRay, Integer count)",
					Array ParameterList = 
					[
						{
							string Name = "worldRay",
							string Type = "Ray",
							string Description = "",
						},
						{
							string Name = "count",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CastRayResultsFiltered",
					string Description = "Returns the results of the filtered ray cast. The number of objects returned is based on the count passed in.",
					string ReturnType = "CastResultsRange",
					string Parameters = "(Ray worldRay, Integer count, CastFilter filter)",
					Array ParameterList = 
					[
						{
							string Name = "worldRay",
							string Type = "Ray",
							string Description = "",
						},
						{
							string Name = "count",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "filter",
							string Type = "CastFilter",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CastSegment",
					string Description = "Returns the results of a Segment Cast. The results of the segment cast are stored in the passed in vector sorted by time of collision. The number of results given is based on the size of the CastResults passed in.",
					string ReturnType = "void",
					string Parameters = "(Vec3 start, Vec3 end, CastResults results)",
					Array ParameterList = 
					[
						{
							string Name = "start",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "end",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "results",
							string Type = "CastResults",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CastSegmentResults",
					string Description = "Returns the results of the segment cast. The amount of objects returned is based on the count passed in.",
					string ReturnType = "CastResultsRange",
					string Parameters = "(Vec3 start, Vec3 end, Integer count)",
					Array ParameterList = 
					[
						{
							string Name = "start",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "end",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "count",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CastSegmentResultsFiltered",
					string Description = "Returns the results of the filtered segment cast. The number of objects returned is based on the count passed in.",
					string ReturnType = "CastResultsRange",
					string Parameters = "(Vec3 start, Vec3 end, Integer count, CastFilter filter)",
					Array ParameterList = 
					[
						{
							string Name = "start",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "end",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "count",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "filter",
							string Type = "CastFilter",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CastSphere",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(const Sphere sphere, CastResults results)",
					Array ParameterList = 
					[
						{
							string Name = "sphere",
							string Type = "const Sphere",
							string Description = "",
						},
						{
							string Name = "results",
							string Type = "CastResults",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CastSphereResults",
					string Description = "Returns the results of the filtered Sphere cast. The amount of objects returned is based on the count passed in.",
					string ReturnType = "CastResultsRange",
					string Parameters = "(Vec3 center, real radius, Integer count, CastFilter filter)",
					Array ParameterList = 
					[
						{
							string Name = "center",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "radius",
							string Type = "real",
							string Description = "",
						},
						{
							string Name = "count",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "filter",
							string Type = "CastFilter",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ColliderToBroadPhaseData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Collider collider, BroadPhaseData data)",
					Array ParameterList = 
					[
						{
							string Name = "collider",
							string Type = "Collider",
							string Description = "",
						},
						{
							string Name = "data",
							string Type = "BroadPhaseData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComponentStateChange",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(RigidBody body)",
					Array ParameterList = 
					[
						{
							string Name = "body",
							string Type = "RigidBody",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComponentStateChange",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Collider collider)",
					Array ParameterList = 
					[
						{
							string Name = "collider",
							string Type = "Collider",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePushImpulse",
					string Description = "Computes the velocity to push a rigid body based upon a velocity, normal and world point. The normal is assumed to point from the other body to the pushing object.",
					string ReturnType = "Vec3",
					string Parameters = "(Vec3 pushVelocity, Vec3 pushNormal, RigidBody otherBody, Vec3 worldPoint)",
					Array ParameterList = 
					[
						{
							string Name = "pushVelocity",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "pushNormal",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "otherBody",
							string Type = "RigidBody",
							string Description = "",
						},
						{
							string Name = "worldPoint",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ContinuousCollider",
					string Description = "",
					string ReturnType = "ContinuousResultRange",
					string Parameters = "(Collider collider, Vec3 velocity, real dt, CastFilter filter)",
					Array ParameterList = 
					[
						{
							string Name = "collider",
							string Type = "Collider",
							string Description = "",
						},
						{
							string Name = "velocity",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
						{
							string Name = "filter",
							string Type = "CastFilter",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateDefaultCastFilter",
					string Description = "Returns a defaulted CastFilter for use in script.",
					string ReturnType = "CastFilter",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateJoint",
					string Description = "Creates a joint of jointName between the two cogs passed in. The anchor of the joint is set to the world point passed in.",
					string ReturnType = "Cog",
					string Parameters = "(Cog cog0, Cog cog1, StringParam jointName, Vec3 worldPoint)",
					Array ParameterList = 
					[
						{
							string Name = "cog0",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "cog1",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "jointName",
							string Type = "StringParam",
							string Description = "",
						},
						{
							string Name = "worldPoint",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DecrementDrawLevel",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DispatchWithinBox",
					string Description = "Dispatches an event to all objects within the given box.",
					string ReturnType = "void",
					string Parameters = "(Vec3 center, Vec3 size, string eventId, Event event)",
					Array ParameterList = 
					[
						{
							string Name = "center",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "size",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "eventId",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "event",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DispatchWithinSphere",
					string Description = "Dispatches an event to all objects within the given sphere.",
					string ReturnType = "void",
					string Parameters = "(Vec3 center, real radius, string eventId, Event event)",
					Array ParameterList = 
					[
						{
							string Name = "center",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "radius",
							string Type = "real",
							string Description = "",
						},
						{
							string Name = "eventId",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "event",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DrawColliders",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DrawInactiveObjects",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DrawRigidBodies",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FixColliderCollisionGroups",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ColliderList colliders)",
					Array ParameterList = 
					[
						{
							string Name = "colliders",
							string Type = "ColliderList",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FixCollisionTable",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CollisionTable table)",
					Array ParameterList = 
					[
						{
							string Name = "table",
							string Type = "CollisionTable",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FlushPhysicsQueue",
					string Description = "Debug.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ForceAwakeRigidBodies",
					string Description = "Wakes up all inactive objects.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FrameUpdate",
					string Description = "Debug draws and makes sure broadphase is up-to-date.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAllDynamicColliders",
					string Description = "For debug purposes (select all).",
					string ReturnType = "ColliderList::range",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAllInIsland",
					string Description = "",
					string ReturnType = "IslandColliderList::range",
					string Parameters = "(Collider collider)",
					Array ParameterList = 
					[
						{
							string Name = "collider",
							string Type = "Collider",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAllStaticColliders",
					string Description = "",
					string ReturnType = "ColliderList::range",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetCollisionGroupInstance",
					string Description = "Helper for a collider. Returns the instance for this space of the given group name.",
					string ReturnType = "CollisionGroupInstance",
					string Parameters = "(ResourceId groupId)",
					Array ParameterList = 
					[
						{
							string Name = "groupId",
							string Type = "ResourceId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetCollisionManager",
					string Description = "",
					string ReturnType = "Physics::CollisionManager",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetGlobalEffects",
					string Description = "Returns all global effects.",
					string ReturnType = "PhysicsEffectList::range",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetIslandPreProcessType",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetIslandingType",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetObjectsInIsland",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Collider collider, ColliderArray objects)",
					Array ParameterList = 
					[
						{
							string Name = "collider",
							string Type = "Collider",
							string Description = "",
						},
						{
							string Name = "objects",
							string Type = "ColliderArray",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IncrementDrawLevel",
					string Description = "Draw level for broad phase.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IntegrateBodiesPosition",
					string Description = "Integrates the position of all of the bodies.",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IntegrateBodiesVelocity",
					string Description = "Adds global effect to all of the bodies then integrates their velocities.",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IterateTimestep",
					string Description = "Iterates one timestep of the physics engine with the given dt. Does not take care of batch insertion/removal in broadphases or debug drawing.",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "NarrowPhase",
					string Description = "Takes the possible collisions from the BroadPhase step and checks if they actually do collide. If they do collide then they are added to the contact graph for further refinement.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PreCalculateEffects",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PreSolve",
					string Description = "Temp fix.",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Publish",
					string Description = "Tells the engine where the new position of the objects are.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PublishEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PushBroadPhaseQueue",
					string Description = "Pushes all of the objects in the broadphase queue. Before hand, it also recomputes the world matrix values so that everything is in the right spot.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PushBroadPhaseQueueProfiled",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "QueuePhysicsNode",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(PhysicsNode node)",
					Array ParameterList = 
					[
						{
							string Name = "node",
							string Type = "PhysicsNode",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveComponent",
					string Description = "Removes the component from the appropriate list based on it's type.",
					string ReturnType = "void",
					string Parameters = "(Joint joint)",
					Array ParameterList = 
					[
						{
							string Name = "joint",
							string Type = "Joint",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveComponent",
					string Description = "Removes the component from the appropriate list based on it's type.",
					string ReturnType = "void",
					string Parameters = "(Region region)",
					Array ParameterList = 
					[
						{
							string Name = "region",
							string Type = "Region",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveComponent",
					string Description = "Removes the component from the appropriate list based on it's type.",
					string ReturnType = "void",
					string Parameters = "(Collider collider)",
					Array ParameterList = 
					[
						{
							string Name = "collider",
							string Type = "Collider",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveComponent",
					string Description = "Removes the component from the appropriate list based on it's type.",
					string ReturnType = "void",
					string Parameters = "(RigidBody body)",
					Array ParameterList = 
					[
						{
							string Name = "body",
							string Type = "RigidBody",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveComponent",
					string Description = "Removes the component from the appropriate list based on it's type.",
					string ReturnType = "void",
					string Parameters = "(PhysicsCar car)",
					Array ParameterList = 
					[
						{
							string Name = "car",
							string Type = "PhysicsCar",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveComponent",
					string Description = "Removes the component from the appropriate list based on it's type.",
					string ReturnType = "void",
					string Parameters = "(SpringSystem system)",
					Array ParameterList = 
					[
						{
							string Name = "system",
							string Type = "SpringSystem",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveFromInactive",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(RigidBody body)",
					Array ParameterList = 
					[
						{
							string Name = "body",
							string Type = "RigidBody",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveGlobalEffect",
					string Description = "Removes a global effect (region).",
					string ReturnType = "void",
					string Parameters = "(PhysicsEffect effect)",
					Array ParameterList = 
					[
						{
							string Name = "effect",
							string Type = "PhysicsEffect",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveHierarchyPairFilter",
					string Description = "Removes the filters between both trees. See RemovePairFilter for more info.",
					string ReturnType = "void",
					string Parameters = "(Cog cog1, Cog cog2)",
					Array ParameterList = 
					[
						{
							string Name = "cog1",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "cog2",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveHierarchyPairFilterInternal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Cog heirarchyCog, Cog normalCog)",
					Array ParameterList = 
					[
						{
							string Name = "heirarchyCog",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "normalCog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemovePairFilter",
					string Description = "Removes the filter between these two cogs so they can collide again.",
					string ReturnType = "void",
					string Parameters = "(Cog cog1, Cog cog2)",
					Array ParameterList = 
					[
						{
							string Name = "cog1",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "cog2",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemovePairFilterInternal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Collider collider1, Collider collider2)",
					Array ParameterList = 
					[
						{
							string Name = "collider1",
							string Type = "Collider",
							string Description = "",
						},
						{
							string Name = "collider2",
							string Type = "Collider",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReplaceBroadPhase",
					string Description = "",
					string ReturnType = "BroadPhasePackage",
					string Parameters = "(BroadPhasePackage newBroadPhase)",
					Array ParameterList = 
					[
						{
							string Name = "newBroadPhase",
							string Type = "BroadPhasePackage",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ResolutionPhase",
					string Description = "Takes the manifolds from the contact graph and inserts them into a contact graph where all constraints are solved simultaneously.",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SerializeBroadPhases",
					string Description = "Serializes the broad phase information.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetIslandPreProcessType",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer preProcessType)",
					Array ParameterList = 
					[
						{
							string Name = "preProcessType",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetIslandingType",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer islandingType)",
					Array ParameterList = 
					[
						{
							string Name = "islandingType",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetKinematic",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(RigidBody body, bool state)",
					Array ParameterList = 
					[
						{
							string Name = "body",
							string Type = "RigidBody",
							string Description = "",
						},
						{
							string Name = "state",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SolvePositions",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SolveSprings",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SweepCollider",
					string Description = "Generate sweep data from the current position to a new location (stop at the first contact).",
					string ReturnType = "SweepResult",
					string Parameters = "(Collider collider, Vec3 worldOffset, CastFilter filter)",
					Array ParameterList = 
					[
						{
							string Name = "collider",
							string Type = "Collider",
							string Description = "",
						},
						{
							string Name = "worldOffset",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "filter",
							string Type = "CastFilter",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SystemLogicUpdate",
					string Description = "Updates every object in the space (integration, collision detection / resolution, etc...).",
					string ReturnType = "void",
					string Parameters = "(UpdateEvent updateEvent)",
					Array ParameterList = 
					[
						{
							string Name = "updateEvent",
							string Type = "UpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ToggleDebugFlag",
					string Description = "Enable or disable debug flags.",
					string ReturnType = "void",
					string Parameters = "(Integer flag)",
					Array ParameterList = 
					[
						{
							string Name = "flag",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ToggleKinematic",
					string Description = "Toggles an object as being kinematic.",
					string ReturnType = "void",
					string Parameters = "(RigidBody body, bool kinematic)",
					Array ParameterList = 
					[
						{
							string Name = "body",
							string Type = "RigidBody",
							string Description = "",
						},
						{
							string Name = "kinematic",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateKinematicState",
					string Description = "Clears the old values from all kinematic objects so it will be static the next frame.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateKinematicVelocities",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateModifiedResources",
					string Description = "Updates any modified resource (typically from script) that physics cares about.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdatePhysicsCars",
					string Description = "Updates all the physics cars. (needs to happen before resolution)",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdatePhysicsCarsTransforms",
					string Description = "Updates the positions of the wheels for the cars. (Needs to happen after position integration)",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateRegions",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateTransformAndMassOfTree",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(PhysicsNode node)",
					Array ParameterList = 
					[
						{
							string Name = "node",
							string Type = "PhysicsNode",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WakeInactiveMovingBodies",
					string Description = "Checks all inactive objects to see if they should be woken up.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WhyAreTheyNotColliding",
					string Description = "",
					string ReturnType = "string",
					string Parameters = "(Cog cog1, Cog cog2)",
					Array ParameterList = 
					[
						{
							string Name = "cog1",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "cog2",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetObjectOnline",
			string BaseClass = "",
			string Description = "Dispatched after the net object is brought online.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "GameSession",
					string Type = "GameSession",
					string Description = "",
				},
				{
					string Name = "IsStartOfLifespan",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Object",
					string Type = "Cog",
					string Description = "",
				},
				{
					string Name = "Space",
					string Type = "Space",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LightningPluginSource",
			string BaseClass = "DataResource",
			string Description = "",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "CompileTask",
					string Type = "BackgroundTask",
					string Description = "",
				},
				{
					string Name = "InstallCounter",
					string Type = "const Integer",
					string Description = "",
				},
				{
					string Name = "OpenIdeAfterToolsInstallCounter",
					string Type = "Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "CheckIdeAndInformUser",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Clean",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CompileConfiguration",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(StringParam configuration)",
					Array ParameterList = 
					[
						{
							string Name = "configuration",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CompileDebug",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CompileRelease",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CopyPluginDependencies",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CopyPluginDependenciesOnce",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "EditorInitialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ForceCopyPluginDependencies",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetCodeDirectory",
					string Description = "",
					string ReturnType = "string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetConfig",
					string Description = "",
					string ReturnType = "LightningPluginConfig",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetContentDirectory",
					string Description = "",
					string ReturnType = "string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetCurrentVersionDirectory",
					string Description = "",
					string ReturnType = "string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetVersionsDirectory",
					string Description = "",
					string ReturnType = "string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InstallIdeTools",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsIdeInstalled",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsIdeToolInstalled",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MarkAttemptedIdeToolsInstAll",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnEngineUpdate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(UpdateEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "UpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OpenDirectory",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OpenIde",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ShouldInstallIdeTools",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WriteCurrentVersionFile",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LinearAxisJoint",
			string BaseClass = "Joint",
			string Description = "A linear axis joint is used to keep an object locked on a plane that is defined by a normal. Special case use is for the dynamic controller. Should not be created by anyone else! If it is absolutely desired for movement, then the constraint should be turned off and a motor should be added. This will then push the objects in the direction of the normal of the plane.",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "WorldAxis",
					string Type = "Real3",
					string Description = "The axis in world space that the object will move along.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "BatchEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Commit",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMoleculeData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeData moleculeData)",
					Array ParameterList = 
					[
						{
							string Name = "moleculeData",
							string Type = "MoleculeData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePositionMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAtomIndexFilter",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Integer atomIndex, real desiredConstraintValue)",
					Array ParameterList = 
					[
						{
							string Name = "atomIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "desiredConstraintValue",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultLimitIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultMotorIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultSpringIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAllObjectsCreated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PositionMoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Solve",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAtoms",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WarmStart",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Skeleton",
			string BaseClass = "Resource",
			string Description = "Skeleton resource stores the bind posed used for skinned animation.",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "Bones",
					string Type = "Array<Bone>",
					string Description = "",
				},
				{
					string Name = "RootBones",
					string Type = "Array<Bone>",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Initialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Sprite",
			string BaseClass = "BaseSprite",
			string Description = "Sprite component. Sprite component is a 2d sprite class used for 2d sprites 3d billboarding.",
			Array Tags = 
			[
				"Component",
				"Graphical",
			],
			Array Properties = 
			[
				{
					string Name = "AnimationActive",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "AnimationSpeed",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "CurrentFrame",
					string Type = "Integer",
					string Description = "Current frame of animation.",
				},
				{
					string Name = "FlipX",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "FlipY",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "SpriteSource",
					string Type = "SpriteSource",
					string Description = "The SpriteSource for this sprite.",
				},
				{
					string Name = "StartFrame",
					string Type = "Integer",
					string Description = "Start Frame of animation.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ExtractFrameData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(FrameNode frameNode, FrameBlock frameBlock, Array<Mat4> matrixBuffer)",
					Array ParameterList = 
					[
						{
							string Name = "frameNode",
							string Type = "FrameNode",
							string Description = "",
						},
						{
							string Name = "frameBlock",
							string Type = "FrameBlock",
							string Description = "",
						},
						{
							string Name = "matrixBuffer",
							string Type = "Array<Mat4>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ExtractViewData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ViewNode viewNode, ViewBlock viewBlock, FrameBlock frameBlock)",
					Array ParameterList = 
					[
						{
							string Name = "viewNode",
							string Type = "ViewNode",
							string Description = "",
						},
						{
							string Name = "viewBlock",
							string Type = "ViewBlock",
							string Description = "",
						},
						{
							string Name = "frameBlock",
							string Type = "FrameBlock",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLocalAabb",
					string Description = "",
					string ReturnType = "Aabb",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLocalCenter",
					string Description = "",
					string ReturnType = "Vec2",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLocalWidths",
					string Description = "",
					string ReturnType = "Vec2",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnLogicUpdate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(UpdateEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "UpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAnimation",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WrapIndex",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "PhyGunJoint",
			string BaseClass = "Joint",
			string Description = "A Physics gun joint is just a tool for the editor. This acts as a weld between an object and the world.",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "LocalPoint",
					string Type = "Real3",
					string Description = "The body point on the object that should match the target point.",
				},
				{
					string Name = "TargetPoint",
					string Type = "Real3",
					string Description = "The point in space that the object's point should match.",
				},
				{
					string Name = "TargetRotation",
					string Type = "Quaternion",
					string Description = "The world space rotation that the basis of the object should match. Used to set the desired rotation of the object in world space.",
				},
				{
					string Name = "WorldPoint",
					string Type = "Real3",
					string Description = "The world point on the object that should match the target point.",
				},
				{
					string Name = "WorldRotation",
					string Type = "Quaternion",
					string Description = "Used to set the world rotation basis of the object that should be matched to the target rotation.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "BatchEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Commit",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMoleculeData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeData moleculeData)",
					Array ParameterList = 
					[
						{
							string Name = "moleculeData",
							string Type = "MoleculeData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePositionMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAtomIndexFilter",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Integer atomIndex, real desiredConstraintValue)",
					Array ParameterList = 
					[
						{
							string Name = "atomIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "desiredConstraintValue",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PositionMoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Solve",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAtoms",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WarmStart",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "HeightMapCollider",
			string BaseClass = "Collider",
			string Description = "Used to represent a height map for collision.",
			Array Tags = 
			[
				"Physics",
				"Collider",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Thickness",
					string Type = "Real",
					string Description = "How thick the surface of the height map is. Used to avoid tunneling problems.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "CacheWorldValues",
					string Description = "Gives any derived collider a chance to cache world-space values (e.g. SphereCollider.WorldRadius)",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Cast",
					string Description = "This is a specialization of Ray vs. HeightMap that goes through the internal mid-phase with an optimized ray-tracing algorithm instead of the generic GetOverlapAabb function. Note: the ray here is expected to be in this cog's local space.",
					string ReturnType = "bool",
					string Parameters = "(const Ray localRay, ProxyResult result, BaseCastFilter filter)",
					Array ParameterList = 
					[
						{
							string Name = "localRay",
							string Type = "const Ray",
							string Description = "",
						},
						{
							string Name = "result",
							string Type = "ProxyResult",
							string Description = "",
						},
						{
							string Name = "filter",
							string Type = "BaseCastFilter",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeLocalInverseInertiaTensor",
					string Description = "Computes the local space (as in not rotated, the scale is still necessary but the translation is assumed to be zero) inertia tensor from the passed in mass.",
					string ReturnType = "void",
					string Parameters = "(real mass, Mat3Ref localInvInertia)",
					Array ParameterList = 
					[
						{
							string Name = "mass",
							string Type = "real",
							string Description = "",
						},
						{
							string Name = "localInvInertia",
							string Type = "Mat3Ref",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldAabbInternal",
					string Description = "Computes the world-space aabb. This is always called after CacheWorldValues has been called. This must be implemented on each collider type. The helper function 'SetWorldAabbFromHalfExtents' exists to compute the aabb from the current rotation and translation with the given world scale half-extent of an aabb.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldVolumeInternal",
					string Description = "Compute the volume of this collider in world space. This must be calculated in world space as there's no generic way to scale volume after-the-fact. All colliders that contain a volume should implement this. Some colliders (e.g. HeightMap or Mesh ) don't as they aren't meant to work with rigid bodies. This is an internal function, meaning that it assumes the transform data is already up-to-date (should rarely be called by the outside).",
					string ReturnType = "real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetHeightMap",
					string Description = "",
					string ReturnType = "HeightMap",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetInfoMap",
					string Description = "",
					string ReturnType = "TriangleInfoMap",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetOverlapRange",
					string Description = "Returns a range of local-space triangles that overlap the passed in local-space aabb.",
					string ReturnType = "HeightMapRangeWrapper",
					string Parameters = "(Aabb localAabb)",
					Array ParameterList = 
					[
						{
							string Name = "localAabb",
							string Type = "Aabb",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetTriangle",
					string Description = "Returns the triangle associated with the given key (the key should come from our own range).",
					string ReturnType = "Triangle",
					string Parameters = "(Integer key)",
					Array ParameterList = 
					[
						{
							string Name = "key",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "KeyToTriangleIndex",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer key, AbsoluteIndex absolueIndex, Integer triIndex)",
					Array ParameterList = 
					[
						{
							string Name = "key",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "absolueIndex",
							string Type = "AbsoluteIndex",
							string Description = "",
						},
						{
							string Name = "triIndex",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "LoadPatch",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HeightMap map, HeightPatch mapPatch)",
					Array ParameterList = 
					[
						{
							string Name = "map",
							string Type = "HeightMap",
							string Description = "",
						},
						{
							string Name = "mapPatch",
							string Type = "HeightPatch",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnHeightMapPatchAdded",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HeightMapEvent hEvent)",
					Array ParameterList = 
					[
						{
							string Name = "hEvent",
							string Type = "HeightMapEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnHeightMapPatchModified",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HeightMapEvent hEvent)",
					Array ParameterList = 
					[
						{
							string Name = "hEvent",
							string Type = "HeightMapEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnHeightMapPatchRemoved",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HeightMapEvent hEvent)",
					Array ParameterList = 
					[
						{
							string Name = "hEvent",
							string Type = "HeightMapEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RebuildModifiedResources",
					string Description = "Check all resources used by this collider to see if they need to be updated. Called by several ""Get"" functions to force up-to-date information.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReloadAllPatches",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TriangleIndexToKey",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(const AbsoluteIndex absolueIndex, Integer triIndex, Integer key)",
					Array ParameterList = 
					[
						{
							string Name = "absolueIndex",
							string Type = "const AbsoluteIndex",
							string Description = "",
						},
						{
							string Name = "triIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "key",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Path",
			string BaseClass = "DataResource",
			string Description = "A resource for a path object. Bakes out the curve and figures out how to interpolate with a constant speed across all of the points.",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "BakedPointCount",
					string Type = "Integer",
					string Description = "The number of points used to approximate the curve as linear line segments.",
				},
				{
					string Name = "Closed",
					string Type = "Boolean",
					string Description = "Does the path loop back on itself?",
				},
				{
					string Name = "ControlPointCount",
					string Type = "Integer",
					string Description = "The number of control points currently making up the curve.",
				},
				{
					string Name = "Error",
					string Type = "Real",
					string Description = "The max number of units that a line segment is allowed to deviate from the curve.",
				},
				{
					string Name = "PathType",
					string Type = "Integer",
					string Description = "The kind of path (Linear, BSpline, CatmulRom). Determines how the control points affect the curve.",
				},
				{
					string Name = "TotalDistance",
					string Type = "Real",
					string Description = "The total arc-length of the curve. Use to normalize the curve if you wish.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddControlPoint",
					string Description = "Adds a new control point to the end of the path. Recomputes the baked curve.",
					string ReturnType = "void",
					string Parameters = "(Vec3 point)",
					Array ParameterList = 
					[
						{
							string Name = "point",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Copy",
					string Description = "Used to deep copy a path resource (download/upload).",
					string ReturnType = "void",
					string Parameters = "(Path path)",
					Array ParameterList = 
					[
						{
							string Name = "path",
							string Type = "Path",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DrawPoints",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Vec3 offset, real drawSize)",
					Array ParameterList = 
					[
						{
							string Name = "offset",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "drawSize",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetBakedCurve",
					string Description = "Get the actual baked curve. Used to store, modify and copy the results.",
					string ReturnType = "Math::BakedCurve",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetBakedPoint",
					string Description = "Get a point on the baked-out curve. Primarily used for debug drawing.",
					string ReturnType = "Vec3",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetControlPoint",
					string Description = "Get the n-th control point's position.",
					string ReturnType = "Vec3",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetCurve",
					string Description = "Get the actual spline curve. Used to store, modify and copy the curve.",
					string ReturnType = "Math::SplineCurve",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReBake",
					string Description = "Recompute the baked curve from the current spline curve.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReCreate",
					string Description = "Remake the spline curve and baked curve from the given control points.",
					string ReturnType = "void",
					string Parameters = "(const Array<Vec3> controlPoints, Integer curveType, real error, bool closed)",
					Array ParameterList = 
					[
						{
							string Name = "controlPoints",
							string Type = "const Array<Vec3>",
							string Description = "",
						},
						{
							string Name = "curveType",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "error",
							string Type = "real",
							string Description = "",
						},
						{
							string Name = "closed",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveControlPoint",
					string Description = "Removes the control point at the given index. Recomputes the baked curve.",
					string ReturnType = "void",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SampleDistance",
					string Description = "Samples the curve at a given arc-length distance.",
					string ReturnType = "SampleData",
					string Parameters = "(Real distance)",
					Array ParameterList = 
					[
						{
							string Name = "distance",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetControlPoint",
					string Description = "Set the n-th control point's position. Recomputes the baked curve.",
					string ReturnType = "void",
					string Parameters = "(Integer index, Vec3 point)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "point",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetChannelType",
			string BaseClass = "",
			string Description = "Network Channel Type Configures the replication of a set of properties on the network.",
			Array Tags = 
			[
				"Networking",
			],
			Array Properties = 
			[
				{
					string Name = "AcceptIncomingChanges",
					string Type = "Boolean",
					string Description = "Controls whether or not net channels should accept incoming changes.",
				},
				{
					string Name = "AccurateTimestampOnChange",
					string Type = "Boolean",
					string Description = "Controls whether or not the net channel will serialize an accurate timestamp value when changed, or will instead accept an estimated timestamp value (This setting may be overridden for net channels belonging to a specific net object by enabling the corresponding net object setting)",
				},
				{
					string Name = "AllowNapping",
					string Type = "Boolean",
					string Description = "Controls whether or not net channels may nap (perform change detection on longer intervals) if they haven't changed in a while.",
				},
				{
					string Name = "AllowRelay",
					string Type = "Boolean",
					string Description = "Controls whether or not net channels will have their changes immediately broadcast to all relevant, incidental peers (if any) once received (Enabling this allows a server to automatically relay client authoritative changes to other clients, otherwise this must be done manually using NetChannel::ReplicateNow )",
				},
				{
					string Name = "AuthorityDefault",
					string Type = "Authority",
					string Description = "Controls which peer has the authority to observe and replicate property changes on each net channel by default (Client: Indicates both the client and server are allowed to observe and replicate property changes) (Server: Indicates only the server is allowed to observe and replicate property changes) Only a single client, specified by NetObject::NetUserOwnerPeerId, may possess client authority at any given time The server is still responsible for relaying contained property changes to other clients, but will not replicate contained property changes back to the authority client However, the server is also still responsible for other replication commands (such as object creation/destruction), and these WILL be replicated to the authority client.",
				},
				{
					string Name = "AuthorityMode",
					string Type = "AuthorityMode",
					string Description = "Controls when net channels can modify their change authority (Dynamic: Authority may be modified at any time, even after a net object is brought online) (Fixed: Authority may be modified only before a net object is brought online) (Cannot be modified at game runtime)",
				},
				{
					string Name = "AwakeDetectionInterval",
					string Type = "Integer",
					string Description = "Controls the frame interval in which awake net channels are observed for changes (Cannot be modified at game runtime)",
				},
				{
					string Name = "AwakeDuration",
					string Type = "Integer",
					string Description = "Controls the frame duration following the last detected change in which net channels are considered actively changing and will be kept awake.",
				},
				{
					string Name = "DetectOutgoingChanges",
					string Type = "Boolean",
					string Description = "Controls whether or not net channels should detect outgoing changes.",
				},
				{
					string Name = "DetectionMode",
					string Type = "DetectionMode",
					string Description = "Controls how net channel changes are detected (Assume: Assumes something has changed) (Manual: Detects changes manually using change flags) (Automatic: Detects changes automatically using comparisons) (Manumatic: Detects changes manually using change flags and automatically using comparisons)",
				},
				{
					string Name = "EventOnIncomingPropertyChange",
					string Type = "Boolean",
					string Description = "Controls whether or not net channels should dispatch NetChannelIncomingPropertyChange when an incoming net property change is accepted.",
				},
				{
					string Name = "EventOnOutgoingPropertyChange",
					string Type = "Boolean",
					string Description = "Controls whether or not net channels should dispatch NetChannelOutgoingPropertyChange when an outgoing net property change is detected.",
				},
				{
					string Name = "Name",
					string Type = "string",
					string Description = "Net channel type name.",
				},
				{
					string Name = "NapDetectionInterval",
					string Type = "Integer",
					string Description = "Controls the frame interval in which napping net channels are observed for changes (Cannot be modified at game runtime)",
				},
				{
					string Name = "ReliabilityMode",
					string Type = "ReliabilityMode",
					string Description = "Controls whether or not net channel changes will be retransmitted should they get lost over the network (Unreliable: Lost changes are not retransmitted) (Reliable: Lost changes are retransmitted)",
				},
				{
					string Name = "ReplicateOnOffline",
					string Type = "Boolean",
					string Description = "Controls whether or not the net channel will be replicated when the net object goes offline If enabled, all net channel property values are guaranteed to be set immediately before the NetObjectOffline event (Cannot be modified at game runtime)",
				},
				{
					string Name = "ReplicateOnOnline",
					string Type = "Boolean",
					string Description = "Controls whether or not the net channel will be replicated when the net object comes online If enabled, all net channel property values are guaranteed to be set immediately before the NetObjectOnline event (Cannot be modified at game runtime)",
				},
				{
					string Name = "SerializationMode",
					string Type = "SerializationMode",
					string Description = "Controls how net channels are serialized (All: Serialize all net properties) (Changed: Serialize only net properties that have changed, using bit flags in between) (Cannot be modified at game runtime)",
				},
				{
					string Name = "TransferMode",
					string Type = "TransferMode",
					string Description = "Controls how net channel changes are to be ordered and released once received (Immediate: Changes are released immediately once received, including late changes) (Sequenced: Changes are released immediately once received, discarding late changes) (Ordered: Changes are released immediately once preceding late changes have been received; forces all changes to be sent reliably) (Cannot be modified at game runtime)",
				},
			],
			Array Methods = 
			[
				{
					string Name = "GetReplicateOnChange",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ResetConfig",
					string Description = "Resets all configuration settings.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetConfig",
					string Description = "Sets all configuration settings according to the specified NetChannelConfig resource.",
					string ReturnType = "void",
					string Parameters = "(NetChannelConfig netChannelConfig)",
					Array ParameterList = 
					[
						{
							string Name = "netChannelConfig",
							string Type = "NetChannelConfig",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetReplicateOnChange",
					string Description = "Controls whether or not the net channel will be replicated on net property change (Cannot be modified at game runtime)",
					string ReturnType = "void",
					string Parameters = "(bool replicateOnChange)",
					Array ParameterList = 
					[
						{
							string Name = "replicateOnChange",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Component",
			string BaseClass = "",
			string Description = "A component is an atomic piece of functionality that is composed into a Cogs to form game objects.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "GameSession",
					string Type = "GameSession",
					string Description = "Get the GameSession that owns us and our space.",
				},
				{
					string Name = "LevelSettings",
					string Type = "Cog",
					string Description = "Get the object named 'LevelSettings', a special object where we can put components for our level.",
				},
				{
					string Name = "Owner",
					string Type = "Cog",
					string Description = "Get the Object this component is owned/composed. Not the parent of this composition.",
				},
				{
					string Name = "Space",
					string Type = "Space",
					string Description = "The Space where the object is located.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AttachTo",
					string Description = "Signal that the Cog has been attached to another Cog .",
					string ReturnType = "void",
					string Parameters = "(AttachmentInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "AttachmentInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComponentAdded",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(TypeIdType typeId, Component component)",
					Array ParameterList = 
					[
						{
							string Name = "typeId",
							string Type = "TypeIdType",
							string Description = "",
						},
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComponentRemoved",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(TypeIdType typeId, Component component)",
					Array ParameterList = 
					[
						{
							string Name = "typeId",
							string Type = "TypeIdType",
							string Description = "",
						},
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Delete",
					string Description = "Deletes the object. This allows the component to be responsible.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Detached",
					string Description = "Signal that the Cog has been detached from another Cog .",
					string ReturnType = "void",
					string Parameters = "(AttachmentInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "AttachmentInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DispatchEvent",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(string eventId, Event event)",
					Array ParameterList = 
					[
						{
							string Name = "eventId",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "event",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDispatcher",
					string Description = "",
					string ReturnType = "EventDispatcher",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDispatcherObject",
					string Description = "",
					string ReturnType = "EventDispatcher",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetEventThisObject",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetReceiver",
					string Description = "Returns the parent objects event tracker.",
					string ReturnType = "EventReceiver",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetReceiverObject",
					string Description = "",
					string ReturnType = "EventReceiver",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetSaveFlags",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleToObject",
					string Description = "",
					string ReturnType = "Component",
					string Parameters = "(const MetaHandleData handleData)",
					Array ParameterList = 
					[
						{
							string Name = "handleData",
							string Type = "const MetaHandleData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsInitialized",
					string Description = "Returns whether or not the owning Cog is initialized.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ObjectToHandle",
					string Description = "",
					string ReturnType = "MetaHandleData",
					string Parameters = "(Component instance)",
					Array ParameterList = 
					[
						{
							string Name = "instance",
							string Type = "Component",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAllObjectsCreated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ScriptInitialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ShouldSerialize",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TransformUpdate",
					string Description = "Special function for transform updating from editor.",
					string ReturnType = "void",
					string Parameters = "(TransformUpdateInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "TransformUpdateInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LockStepSpace",
			string BaseClass = "Component",
			string Description = "Manages object sync testing as well as time manipulation in lock-step.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Checkers",
					string Type = "InList<LockStepSyncChecker>",
					string Description = "An intrusive list into the components.",
				},
				{
					string Name = "Connected",
					string Type = "bool",
					string Description = "Are we safely connected to a lock step game.",
				},
				{
					string Name = "SyncedTimeAlive",
					string Type = "Real",
					string Description = "The amount of time passed (takes into account the time scale per frame)",
				},
				{
					string Name = "TimeSpace",
					string Type = "TimeSpace",
					string Description = "The time space (which we use to grab frame rate and time scale)",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Initialize",
					string Description = "Component Interface.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetChannelConfig",
			string BaseClass = "DataResource",
			string Description = "Network Channel Configuration Defines a configuration for the replication of a set of properties on the network.",
			Array Tags = 
			[
				"Resource",
				"Networking",
			],
			Array Properties = 
			[
				{
					string Name = "AcceptIncomingChanges",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "AccurateTimestampOnChange",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "AllowNapping",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "AllowRelay",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "AuthorityDefault",
					string Type = "Authority",
					string Description = "",
				},
				{
					string Name = "AuthorityMode",
					string Type = "AuthorityMode",
					string Description = "",
				},
				{
					string Name = "AwakeDetectionInterval",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "AwakeDuration",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "DetectOutgoingChanges",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "DetectionMode",
					string Type = "DetectionMode",
					string Description = "",
				},
				{
					string Name = "EventOnIncomingPropertyChange",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "EventOnOutgoingPropertyChange",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "NapDetectionInterval",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "ReliabilityMode",
					string Type = "ReliabilityMode",
					string Description = "",
				},
				{
					string Name = "ReplicateOnChange",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "ReplicateOnOffline",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "ReplicateOnOnline",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "SerializationMode",
					string Type = "SerializationMode",
					string Description = "",
				},
				{
					string Name = "TransferMode",
					string Type = "TransferMode",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "GetName",
					string Description = "Net channel configuration name.",
					string ReturnType = "const string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serializes the net channel configuration resource.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "Unloads the net channel configuration resource.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "AnimationNode",
			string BaseClass = "",
			string Description = "",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "CollapseToPoseOnFinish",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Duration",
					string Type = "Real",
					string Description = "The duration of the node.",
				},
				{
					string Name = "Paused",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Time",
					string Type = "Real",
					string Description = "Time getter/setter.",
				},
				{
					string Name = "TimeScale",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Clone",
					string Description = "",
					string ReturnType = "AnimationNode",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CollapseToPose",
					string Description = "Collapses all children to a pose node on the next Update.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDisplayName",
					string Description = "",
					string ReturnType = "string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNormalizedTime",
					string Description = "",
					string ReturnType = "Real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetParent",
					string Description = "",
					string ReturnType = "AnimationNode",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HasUpdatedAtLeastOnce",
					string Description = "Whether or not this node has ever been updated.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HasUpdatedThisFrame",
					string Description = "If this node has already been updated, we shouldn't do anything.",
					string ReturnType = "bool",
					string Parameters = "(Integer frameId)",
					Array ParameterList = 
					[
						{
							string Name = "frameId",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsActive",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsPlayingInNode",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(string animName)",
					Array ParameterList = 
					[
						{
							string Name = "animName",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PrintNode",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer tabs)",
					Array ParameterList = 
					[
						{
							string Name = "tabs",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReLinkAnimations",
					string Description = "Used when the meta database has changed.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetNormalizedTime",
					string Description = "A value between [0-1].",
					string ReturnType = "void",
					string Parameters = "(Real normalizedTime)",
					Array ParameterList = 
					[
						{
							string Name = "normalizedTime",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Update",
					string Description = "",
					string ReturnType = "AnimationNode",
					string Parameters = "(AnimationGraph animGraph, Real dt, Integer frameId, EventList eventsToSend)",
					Array ParameterList = 
					[
						{
							string Name = "animGraph",
							string Type = "AnimationGraph",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "frameId",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "eventsToSend",
							string Type = "EventList",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "SizerGizmo",
			string BaseClass = "Component",
			string Description = "",
			Array Tags = 
			[
				"Component",
				"Gizmo",
			],
			Array Properties = 
			[
				{
					string Name = "AnchorColor",
					string Type = "Real4",
					string Description = "",
				},
				{
					string Name = "AnchorGizmo",
					string Type = "Archetype",
					string Description = "Each of these will be created for the anchor points.",
				},
				{
					string Name = "AnchorHoverColor",
					string Type = "Real4",
					string Description = "",
				},
				{
					string Name = "ArrowColor",
					string Type = "Real4",
					string Description = "",
				},
				{
					string Name = "BoxColor",
					string Type = "Real4",
					string Description = "",
				},
				{
					string Name = "Size",
					string Type = "Real3",
					string Description = "Size setter / getter.",
				},
				{
					string Name = "SnapDistance",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "SnapMode",
					string Type = "SizerSnapMode",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "CreateAnchors",
					string Description = "Creates all the anchors with the current Archetype.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDragDirection",
					string Description = "Will return which direction to drag in given the anchors position.",
					string ReturnType = "Vec3",
					string Parameters = "(Vec3 gizmoPosLocal, ViewState viewState)",
					Array ParameterList = 
					[
						{
							string Name = "gizmoPosLocal",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "viewState",
							string Type = "ViewState",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAllObjectsInitialized",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializerEvent e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "CogInitializerEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnFrameUpdate",
					string Description = "Draw the gizmo every frame.",
					string ReturnType = "void",
					string Parameters = "(Event)",
					Array ParameterList = 
					[
						{
							string Name = "",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnGizmoModified",
					string Description = "As the gizmo is being dragged, we want to update the Transform based on the current update mode.",
					string ReturnType = "void",
					string Parameters = "(GizmoUpdateEvent e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "GizmoUpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnMouseDragStart",
					string Description = "When the mouse drag starts, we want to store our position in order to calculate our new position when the gizmo is modified.",
					string ReturnType = "void",
					string Parameters = "(Event e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnMouseEnterGizmo",
					string Description = "We want to draw the drag direction when the mouse enters a gizmo.",
					string ReturnType = "void",
					string Parameters = "(GizmoEvent e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "GizmoEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnMouseExitGizmo",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(GizmoEvent e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "GizmoEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnPreRender",
					string Description = "We want to hide the anchors on the back side of the cube. To do this, we need to get the view state before the space is rendered.",
					string ReturnType = "void",
					string Parameters = "(RenderEvent e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "RenderEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDragModeFromDirection",
					string Description = "Updates the gizmo's GizmoDrag Component .",
					string ReturnType = "void",
					string Parameters = "(Cog gizmo, Vec3 dragDirection)",
					Array ParameterList = 
					[
						{
							string Name = "gizmo",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "dragDirection",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAnchorPositions",
					string Description = "Updates the position of all the anchors based on mActiveExtents.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAnchorVisibility",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ViewState viewState)",
					Array ParameterList = 
					[
						{
							string Name = "viewState",
							string Type = "ViewState",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "JointDebugDrawConfig",
			string BaseClass = "Component",
			string Description = "Allows the user to override some parameters for debug drawing of joints. Used to debug draw more from different object perspectives and to change the size of drawn data. This class is nothing more than a piece of data that each joint looks at to determine how it draws itself.",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "Active",
					string Type = "Boolean",
					string Description = "Whether or not this component is active.",
				},
				{
					string Name = "Detail",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "Object1Perspective",
					string Type = "Boolean",
					string Description = "If we draw the joint's debug info from the perspective of object 1. This is most useful when object 1 is marked as a static object and object 2 has free movement.",
				},
				{
					string Name = "Object2Perspective",
					string Type = "Boolean",
					string Description = "If we draw the joint's debug info from the perspective of object 2. This is most useful when object 2 is marked as a static object and object 1 has free movement.",
				},
				{
					string Name = "Size",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NavGrid",
			string BaseClass = "PathFinderComponent< NavGridData, NavGridData::NodeType >",
			string Description = "",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "CurveType",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "Draw",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Heuristic",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "HeuristicWeight",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "PathResolution",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "RemoveCoLinearPoints",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Rubberbanding",
					string Type = "Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNode",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Vec3 worldPos)",
					Array ParameterList = 
					[
						{
							string Name = "worldPos",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetPathObject",
					string Description = "PathFinderComponent Interface.",
					string ReturnType = "PathFinderBase",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "Component Interface.",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "Component Interface.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "MovementBase",
			string BaseClass = "Component",
			string Description = "Base class for movement components.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Active",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "DebugDraw",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "MaxAngleChange",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "QueryOnly",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Strength",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ApplyStrengthAndMax",
					string Description = "",
					string ReturnType = "Real",
					string Parameters = "(Real angle)",
					Array ParameterList = 
					[
						{
							string Name = "angle",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeAngleChangeRadians",
					string Description = "",
					string ReturnType = "Real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAngle",
					string Description = "",
					string ReturnType = "Real",
					string Parameters = "(Vec3 up, Vec3 forward, Vec3 newVector)",
					Array ParameterList = 
					[
						{
							string Name = "up",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "forward",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "newVector",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "QueryAngleChangeDegrees",
					string Description = "",
					string ReturnType = "Real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "QueryAngleChangeRadians",
					string Description = "",
					string ReturnType = "Real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Update",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(UpdateEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "UpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "UniversalJoint",
			string BaseClass = "Joint",
			string Description = "A universal joint locks positional movement of two points together as well as locks rotation about 1 axis. This means it is a joint that constrains 4 axes and leaves 2 free rotational axes. This joint is most useful to model something like a arm or leg that has a nice range of rotational movement.",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "LocalAxis0OfBodyA",
					string Type = "Real3",
					string Description = "One of the two axes in local space of object A that the objects are allowed to rotate about.",
				},
				{
					string Name = "LocalAxis0OfBodyB",
					string Type = "Real3",
					string Description = "One of the two axes in local space of object B that the objects are allowed to rotate about.",
				},
				{
					string Name = "LocalAxis1OfBodyA",
					string Type = "Real3",
					string Description = "One of the two axes in local space of object A that the objects are allowed to rotate about.",
				},
				{
					string Name = "LocalAxis1OfBodyB",
					string Type = "Real3",
					string Description = "One of the two axes in local space of object B that the objects are allowed to rotate about.",
				},
				{
					string Name = "LocalPointA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "LocalPointB",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldPointA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldPointB",
					string Type = "Real3",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "BatchEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Commit",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeInitialConfiguration",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMoleculeData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeData moleculeData)",
					Array ParameterList = 
					[
						{
							string Name = "moleculeData",
							string Type = "MoleculeData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePositionMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAtomIndexFilter",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Integer atomIndex, real desiredConstraintValue)",
					Array ParameterList = 
					[
						{
							string Name = "atomIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "desiredConstraintValue",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultLimitIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultMotorIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultSpringIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PositionMoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Solve",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAtoms",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WarmStart",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "PrismaticJoint",
			string BaseClass = "Joint",
			string Description = "A prismatic joint is used to create something similar to a piston. This joint fixes all degrees of rotation and leaves one linear axis free. Therefore, the bodies will rotate with each other and move with each other, except on one axis they can slide in and out. Add on definitions: Limit: A limit will provide a min/max translational distance for the two objects on the slider axis. Motor: A motor will push/pull the objects on the slider axis. Spring: A spring will make the slider axis springy at its limits.",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "LocalAngleA",
					string Type = "Quaternion",
					string Description = "",
				},
				{
					string Name = "LocalAngleB",
					string Type = "Quaternion",
					string Description = "",
				},
				{
					string Name = "LocalAxisA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "LocalAxisB",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "LocalPointA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "LocalPointB",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldAxis",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldPointA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldPointB",
					string Type = "Real3",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "BatchEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Commit",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeInitialConfiguration",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMoleculeData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeData moleculeData)",
					Array ParameterList = 
					[
						{
							string Name = "moleculeData",
							string Type = "MoleculeData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePositionMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAtomIndexFilter",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Integer atomIndex, real desiredConstraintValue)",
					Array ParameterList = 
					[
						{
							string Name = "atomIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "desiredConstraintValue",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultLimitIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultMotorIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultSpringIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetJointTranslation",
					string Description = "",
					string ReturnType = "real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PositionMoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Solve",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAtoms",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WarmStart",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "RandomContext",
			string BaseClass = "Component",
			string Description = "A random object that Contains its own unique random state apart from all other instances of this class.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "MaxInt",
					string Type = "Integer",
					string Description = "The max integer value that can be returned.",
				},
				{
					string Name = "RandomSeed",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Seed",
					string Type = "Integer",
					string Description = "Seeds the the random number generator.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "BellCurve",
					string Description = "Samples a bell curve with standard normal distribution in the range [0,1] This is equivalent to a Gaussian distribution with standard deviation of 1.",
					string ReturnType = "Real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "BellCurveDistribution",
					string Description = "Samples a bell curve in the range [center - range, center + range] with the given standard deviation. Around 68% will lie within the 1st standard deviation.",
					string ReturnType = "Real",
					string Parameters = "(Real center, Real range, Real standardDeviation)",
					Array ParameterList = 
					[
						{
							string Name = "center",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "range",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "standardDeviation",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "BellCurveRange",
					string Description = "Samples a bell curve with in the range [center - range, center + range] This uses a standard deviation of 1.",
					string ReturnType = "Real",
					string Parameters = "(Real center, Real range)",
					Array ParameterList = 
					[
						{
							string Name = "center",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "range",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Bool",
					string Description = "Returns a random bool value.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CoinFlip",
					string Description = "Returns true if the coin flips heads.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DieRoll",
					string Description = "Randomly rolls a number in the range [1, sides].",
					string ReturnType = "Integer",
					string Parameters = "(Integer sides)",
					Array ParameterList = 
					[
						{
							string Name = "sides",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Float",
					string Description = "Returns a random float in the range [0,1].",
					string ReturnType = "Real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FloatVariance",
					string Description = "Returns a float in the range [base - variance, base + variance].",
					string ReturnType = "Real",
					string Parameters = "(Real base, Real variance)",
					Array ParameterList = 
					[
						{
							string Name = "base",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "variance",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Int",
					string Description = "Returns a random int in the range of [0, MaxInt].",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IntVariance",
					string Description = "Int in the range [base - variance, base + variance].",
					string ReturnType = "Integer",
					string Parameters = "(Integer base, Integer variance)",
					Array ParameterList = 
					[
						{
							string Name = "base",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "variance",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Probability",
					string Description = "Takes a given probability that we get a true value.",
					string ReturnType = "bool",
					string Parameters = "(Real probOfTrue)",
					Array ParameterList = 
					[
						{
							string Name = "probOfTrue",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Quaternion",
					string Description = "Random unit length quaternion. This is also a unit quaternion.",
					string ReturnType = "Quat",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Range",
					string Description = "A random float in the range [min,max].",
					string ReturnType = "Real",
					string Parameters = "(Real min, Real max)",
					Array ParameterList = 
					[
						{
							string Name = "min",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "max",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RangeExclusiveMax",
					string Description = "Int in the range [min, max)",
					string ReturnType = "Integer",
					string Parameters = "(Integer min, Integer max)",
					Array ParameterList = 
					[
						{
							string Name = "min",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "max",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RangeInclusiveMax",
					string Description = "Int in the range [min, max].",
					string ReturnType = "Integer",
					string Parameters = "(Integer min, Integer max)",
					Array ParameterList = 
					[
						{
							string Name = "min",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "max",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Real",
					string Description = "Returns a random real in the range [0,1].",
					string ReturnType = "Real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RealVariance",
					string Description = "Returns a real in the range [base - variance, base + variance].",
					string ReturnType = "Real",
					string Parameters = "(Real base, Real variance)",
					Array ParameterList = 
					[
						{
							string Name = "base",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "variance",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Rotation",
					string Description = "Random rotation quaternion. This is the same as calling Quaternion()",
					string ReturnType = "Quat",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UnitVector2",
					string Description = "Generates a unit length Vec2.",
					string ReturnType = "Vec2",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UnitVector3",
					string Description = "Generates a unit length Vec3.",
					string ReturnType = "Vec3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Vector2",
					string Description = "Randomly generates a Vec2 with its length between min and max.",
					string ReturnType = "Vec2",
					string Parameters = "(Real minLength, Real maxLength)",
					Array ParameterList = 
					[
						{
							string Name = "minLength",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "maxLength",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Vector3",
					string Description = "Randomly generates a Vec3 with its length between min and max.",
					string ReturnType = "Vec3",
					string Parameters = "(Real minLength, Real maxLength)",
					Array ParameterList = 
					[
						{
							string Name = "minLength",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "maxLength",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ConvexMesh",
			string BaseClass = "GenericPhysicsMesh",
			string Description = "A convex mesh meant for use on dynamic rigid bodies. Computes efficient contact information compared to a regular physics mesh.",
			Array Tags = 
			[
				"Resource",
				"Physics",
			],
			Array Properties = 
			[
			],
			Array Methods = 
			[
				{
					string Name = "BuildFromPointSet",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(const Vec3Array points)",
					Array ParameterList = 
					[
						{
							string Name = "points",
							string Type = "const Vec3Array",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CastRay",
					string Description = "Finds the first triangle hit by the local-space ray.",
					string ReturnType = "bool",
					string Parameters = "(const Ray localRay, ProxyResult result, BaseCastFilter filter)",
					Array ParameterList = 
					[
						{
							string Name = "localRay",
							string Type = "const Ray",
							string Description = "",
						},
						{
							string Name = "result",
							string Type = "ProxyResult",
							string Description = "",
						},
						{
							string Name = "filter",
							string Type = "BaseCastFilter",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Draw",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Mat4Param transform)",
					Array ParameterList = 
					[
						{
							string Name = "transform",
							string Type = "Mat4Param",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnResourceModified",
					string Description = "Called when a mesh is modified. This is typically done when the vertices/indices are modified in script.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnType = "Resource",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Joystick",
			string BaseClass = "EventObject",
			string Description = "A Joystick is associated with a hardware joystick, and provides the ability to query axes and buttons.",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "AxisCount",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "ButtonCount",
					string Type = "Integer",
					string Description = "Get the number of buttons or axes.",
				},
				{
					string Name = "IsActive",
					string Type = "Boolean",
					string Description = "Gets whether or not the joystick is active.",
				},
				{
					string Name = "Name",
					string Type = "string",
					string Description = "Get the name of the Joystick .",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Calibrating",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "EndCalibration",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAxisIndex",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(string name)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAxisName",
					string Description = "",
					string ReturnType = "string",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAxisValue",
					string Description = "Queries an axes and returns a value between [-1, 1] The valid range of axes is between 0 and 'GetMaxAxes' If the axis is not valid, then the value returned is 0.",
					string ReturnType = "Real",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAxisValueByName",
					string Description = "",
					string ReturnType = "Real",
					string Parameters = "(string name)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetButtonValue",
					string Description = "Queries a button and returns true if it is down, false if it is up The valid range of buttons is between 0 and 'GetMaxButtons' If the button is not valid, then the value returned is false.",
					string ReturnType = "bool",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetInputMapping",
					string Description = "",
					string ReturnType = "RawControlMapping",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InactiveClear",
					string Description = "Clears out the joystick the joystick state when the controller is inactive.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InternalSetInputMapping",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(RawControlMapping map)",
					Array ParameterList = 
					[
						{
							string Name = "map",
							string Type = "RawControlMapping",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InternalSetInputMappingIfDifferent",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(RawControlMapping map)",
					Array ParameterList = 
					[
						{
							string Name = "map",
							string Type = "RawControlMapping",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsParsedInput",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "LoadInputMapping",
					string Description = "Load an input mapping.",
					string ReturnType = "void",
					string Parameters = "(string name)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RawProcess",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(DataBlock data)",
					Array ParameterList = 
					[
						{
							string Name = "data",
							string Type = "DataBlock",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RawSetAxis",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer index, Integer rawValue)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "rawValue",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RawSetButtons",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer newStates)",
					Array ParameterList = 
					[
						{
							string Name = "newStates",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SaveInputMapping",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(string name)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SignalUpdated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "StartCalibration",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetPropertyType",
			string BaseClass = "",
			string Description = "Network Property Type Configures the replication of a single property on the network.",
			Array Tags = 
			[
				"Networking",
			],
			Array Properties = 
			[
				{
					string Name = "Name",
					string Type = "string",
					string Description = "Net property type name.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ResetConfig",
					string Description = "Resets all configuration settings (Cannot be modified at game runtime)",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetConfig",
					string Description = "Sets all configuration settings according to the specified NetPropertyConfig resource (Cannot be modified at game runtime)",
					string ReturnType = "void",
					string Parameters = "(NetPropertyConfig netPropertyConfig)",
					Array ParameterList = 
					[
						{
							string Name = "netPropertyConfig",
							string Type = "NetPropertyConfig",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "PrismaticJoint2d",
			string BaseClass = "Joint",
			string Description = "A prismatic joint is used to create something similar to a piston. This is the 2d version of the prismatic joint. This joint is used in 2d mode for increased speed and stability. The slider axis is projected onto the z axis (the z component is ignored) so that the objects can be arbitrarily far apart. The x and y rotations are also ignored since the objects are only allowed to rotate about the z axis. Add on definitions: Limit: A limit will provide a min/max translational distance for the two objects on the slider axis. Motor: A motor will push/pull the objects on the slider axis. Spring: A spring will make the slider axis springy at its limits.",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "LocalAngleA",
					string Type = "Quaternion",
					string Description = "",
				},
				{
					string Name = "LocalAngleB",
					string Type = "Quaternion",
					string Description = "",
				},
				{
					string Name = "LocalAxisA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "LocalAxisB",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "LocalPointA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "LocalPointB",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldAxis",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldPointA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldPointB",
					string Type = "Real3",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "BatchEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Commit",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeInitialConfiguration",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMoleculeData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeData moleculeData)",
					Array ParameterList = 
					[
						{
							string Name = "moleculeData",
							string Type = "MoleculeData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePositionMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAtomIndexFilter",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Integer atomIndex, real desiredConstraintValue)",
					Array ParameterList = 
					[
						{
							string Name = "atomIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "desiredConstraintValue",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultLimitIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultMotorIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultSpringIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetJointTranslation",
					string Description = "",
					string ReturnType = "real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PositionMoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Solve",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAtoms",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WarmStart",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Ribbon",
			string BaseClass = "Component",
			string Description = "",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "CurveResolution",
					string Type = "Real",
					string Description = "These are needed because EditorRange doesn't support integers.",
				},
				{
					string Name = "CurveType",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "DecayCurve",
					string Type = "SampleCurve",
					string Description = "Decay curve setter/getter.",
				},
				{
					string Name = "FlipTextureX",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "FlipTextureY",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "LengthBetweenSpawn",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "LocalSpawnPointA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "LocalSpawnPointB",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "MaxLength",
					string Type = "Integer",
					string Description = "The maximum length of the ribbon.",
				},
				{
					string Name = "Spawning",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "TextureScalar",
					string Type = "Real2",
					string Description = "",
				},
				{
					string Name = "TimeBetweenSpawn",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "UseDecayCurve",
					string Type = "Boolean",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddVertices",
					string Description = "Adds the given vertices to the front of the ribbon.",
					string ReturnType = "void",
					string Parameters = "(Vec3 a, Vec3 b)",
					Array ParameterList = 
					[
						{
							string Name = "a",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "b",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Draw the object.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetFinalPaths",
					string Description = "Builds the final inner and outer curves based on the curve type.",
					string ReturnType = "void",
					string Parameters = "(Vec3Array outerCurve, Vec3Array innerCurve)",
					Array ParameterList = 
					[
						{
							string Name = "outerCurve",
							string Type = "Vec3Array",
							string Description = "",
						},
						{
							string Name = "innerCurve",
							string Type = "Vec3Array",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetPositions",
					string Description = "Gets the modified position of inner and outer curves based on the active decay curve.",
					string ReturnType = "void",
					string Parameters = "(Integer index, Integer size, Vec3Ptr outer, Vec3Ptr inner)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "size",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "outer",
							string Type = "Vec3Ptr",
							string Description = "",
						},
						{
							string Name = "inner",
							string Type = "Vec3Ptr",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetUvs",
					string Description = "Gets the UVs of the inner and outer vertices.",
					string ReturnType = "void",
					string Parameters = "(Integer index, Integer currSize, Integer maxSize, Vec2Ptr outer, Vec2Ptr inner)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "currSize",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "maxSize",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "outer",
							string Type = "Vec2Ptr",
							string Description = "",
						},
						{
							string Name = "inner",
							string Type = "Vec2Ptr",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldSpawnPoints",
					string Description = "Gets the two spawn points in world.",
					string ReturnType = "void",
					string Parameters = "(Vec3Ptr worldA, Vec3Ptr worldB)",
					Array ParameterList = 
					[
						{
							string Name = "worldA",
							string Type = "Vec3Ptr",
							string Description = "",
						},
						{
							string Name = "worldB",
							string Type = "Vec3Ptr",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the object.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "Bind methods and members for this object.",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnUpdate",
					string Description = "We need to create new vertices as we move.",
					string ReturnType = "void",
					string Parameters = "(UpdateEvent updateEvent)",
					Array ParameterList = 
					[
						{
							string Name = "updateEvent",
							string Type = "UpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RebuildMesh",
					string Description = "Rebuilds the dynamic mesh.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serialize the object.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "Set the default values.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ShouldSpawn",
					string Description = "Determines whether or not we should spawn a new segment based on our current position.",
					string ReturnType = "bool",
					string Parameters = "(Vec3 currentCenter)",
					Array ParameterList = 
					[
						{
							string Name = "currentCenter",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "MainConfig",
			string BaseClass = "Component",
			string Description = "Main configuration component.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "ApplicationName",
					string Type = "string",
					string Description = "Name of the application for separating config files.",
				},
				{
					string Name = "BuildDate",
					string Type = "string",
					string Description = "Build date.",
				},
				{
					string Name = "BuildVersion",
					string Type = "string",
					string Description = "Repository version.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LockStepGame",
			string BaseClass = "Component",
			string Description = "Manages all the client/server/peer connections.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "BufferFramesAllowed",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "DebugMode",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "UnsafeLocalPeer",
					string Type = "LockStepPeer",
					string Description = "",
				},
				{
					string Name = "UnsafeLocalPeerGuid",
					string Type = "Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddBufferedEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ActiveFrameEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "ActiveFrameEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddClientSyncedEvent",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(targetType dispatcher, string eventID)",
					Array ParameterList = 
					[
						{
							string Name = "dispatcher",
							string Type = "targetType",
							string Description = "",
						},
						{
							string Name = "eventID",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AttemptActiveStep",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AttemptSyncStep",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Real frameTime)",
					Array ParameterList = 
					[
						{
							string Name = "frameTime",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetFramesAhead",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetPeerByGuid",
					string Description = "",
					string ReturnType = "LockStepPeer",
					string Parameters = "(NetGuid guid)",
					Array ParameterList = 
					[
						{
							string Name = "guid",
							string Type = "NetGuid",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleInitialUpdates",
					string Description = "Create the lock step update event and handle logic updates.",
					string ReturnType = "LockStepUpdateEvent",
					string Parameters = "(Real frameTime)",
					Array ParameterList = 
					[
						{
							string Name = "frameTime",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsPeerValid",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(NetGuid guid)",
					Array ParameterList = 
					[
						{
							string Name = "guid",
							string Type = "NetGuid",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnClientReceiveOtherClientActiveFrameEvent",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ActiveFrameEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "ActiveFrameEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDesyncDebugRequest",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(DesyncDebugRequest event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "DesyncDebugRequest",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnGenericExternalEventForThisActiveFrame",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(LockStepEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "LockStepEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnUpdate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(UpdateEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "UpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "QueueSyncedEvent",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(string eventId, LockStepEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "eventId",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "event",
							string Type = "LockStepEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetupClientServer",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(TcpSocket client, LockStepServerHolder server)",
					Array ParameterList = 
					[
						{
							string Name = "client",
							string Type = "TcpSocket",
							string Description = "",
						},
						{
							string Name = "server",
							string Type = "LockStepServerHolder",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UnsyncedLocalStep",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Real frameTime)",
					Array ParameterList = 
					[
						{
							string Name = "frameTime",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateDebugSyncedState",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ThrustEffect",
			string BaseClass = "PhysicsEffect",
			string Description = "Applies a directional force at the thrust effects center. When applied to a rigid body, this force will cause the rigid body to torque if the force's direction does not go through the center of mass. Useful for modeling any sort of a thruster.",
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "ForceDirection",
					string Type = "Real3",
					string Description = "The direction that the force should be applied.",
				},
				{
					string Name = "ForceStrength",
					string Type = "Real",
					string Description = "The strength of the force being applied in the force direction.",
				},
				{
					string Name = "LocalSpaceDirection",
					string Type = "Boolean",
					string Description = "Determines if this force is to be applied in local or in world space.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ApplyEffect",
					string Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force).",
					string ReturnType = "void",
					string Parameters = "(RigidBody obj, real dt)",
					Array ParameterList = 
					[
						{
							string Name = "obj",
							string Type = "RigidBody",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PreCalculate",
					string Description = "Some values can be pre-calculated once per frame instead of per body/object (local to world space directions, etc...)",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Gamepad",
			string BaseClass = "EventObject",
			string Description = "Game pad is a object for getting game pad input.",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "GamepadIndex",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "IsActive",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "LeftStick",
					string Type = "Real2",
					string Description = "",
				},
				{
					string Name = "LeftStickDelta",
					string Type = "Real2",
					string Description = "",
				},
				{
					string Name = "LeftTrigger",
					string Type = "Real",
					string Description = "Value of how much the Left Trigger is down. Range [0,1].",
				},
				{
					string Name = "RightStick",
					string Type = "Real2",
					string Description = "",
				},
				{
					string Name = "RightStickDelta",
					string Type = "Real2",
					string Description = "",
				},
				{
					string Name = "RightTrigger",
					string Type = "Real",
					string Description = "Value of how much the Right Trigger is down. Range [0,1].",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Clear",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Gamepads gamepads, Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "gamepads",
							string Type = "Gamepads",
							string Description = "",
						},
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsButtonHeld",
					string Description = "Is the button currently being held down.",
					string ReturnType = "bool",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsButtonPressed",
					string Description = "Has the button just been pressed this frame.",
					string ReturnType = "bool",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsButtonReleased",
					string Description = "Is the button just been released.",
					string ReturnType = "bool",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TimeButtonHeld",
					string Description = "How long has this button been held down.",
					string ReturnType = "Real",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Update",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Real elasped)",
					Array ParameterList = 
					[
						{
							string Name = "elasped",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Vibrate",
					string Description = "Vibrate this controller for a given time. Speed is a value between zero and one.",
					string ReturnType = "void",
					string Parameters = "(Real time, Real LeftSpeed, Real RightSpeed)",
					Array ParameterList = 
					[
						{
							string Name = "time",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "LeftSpeed",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "RightSpeed",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LockStepGamepadStatusEvent",
			string BaseClass = "LockStepGamepadEvent",
			string Description = "A synced gamepad status event.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Active",
					string Type = "bool",
					string Description = "Whether or not the gamepad was active.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serialization of the event.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetLevelStarted",
			string BaseClass = "",
			string Description = "Dispatched after fully loading and synchronizing a level in a net space.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "GameSession",
					string Type = "GameSession",
					string Description = "",
				},
				{
					string Name = "LevelName",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "Space",
					string Type = "Space",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "GameSession",
			string BaseClass = "Cog",
			string Description = "The GameSession manages all spaces and data for a a game.",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "AllSpaces",
					string Type = "SpaceMapvalueRange",
					string Description = "",
				},
				{
					string Name = "Editing",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Focused",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "FullScreen",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Resolution",
					string Type = "Real2",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ChangeResolution",
					string Description = "Change display mode of primary window.",
					string ReturnType = "void",
					string Parameters = "(bool fullscreen, Vec2 resolution)",
					Array ParameterList = 
					[
						{
							string Name = "fullscreen",
							string Type = "bool",
							string Description = "",
						},
						{
							string Name = "resolution",
							string Type = "Vec2",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Clone",
					string Description = "Game Session cannot be cloned, so throw an exception.",
					string ReturnType = "Cog",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateEditorSpace",
					string Description = "Create a space for use in the editor. Scripts without the [RunInEditor] attribute will be proxied (will not run).",
					string ReturnType = "Space",
					string Parameters = "(Archetype archetype)",
					Array ParameterList = 
					[
						{
							string Name = "archetype",
							string Type = "Archetype",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateNamedSpace",
					string Description = "Create a space from an archetype with the given name.",
					string ReturnType = "Space",
					string Parameters = "(StringParam name, Archetype archetype)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "StringParam",
							string Description = "",
						},
						{
							string Name = "archetype",
							string Type = "Archetype",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateSpace",
					string Description = "Create a space in the game. Use the archetype's name.",
					string ReturnType = "Space",
					string Parameters = "(Archetype archetype)",
					Array ParameterList = 
					[
						{
							string Name = "archetype",
							string Type = "Archetype",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateSpaceFlags",
					string Description = "",
					string ReturnType = "Space",
					string Parameters = "(Archetype archetype, CreationFlags::Type flags)",
					Array ParameterList = 
					[
						{
							string Name = "archetype",
							string Type = "Archetype",
							string Description = "",
						},
						{
							string Name = "flags",
							string Type = "CreationFlags::Type",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Destroy",
					string Description = "Destroy an object removing it from the Space .",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DispatchOnSpaces",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(string eventName, Event event)",
					Array ParameterList = 
					[
						{
							string Name = "eventName",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "event",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "EditSpaces",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(bool allSpaces)",
					Array ParameterList = 
					[
						{
							string Name = "allSpaces",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindAllSpacesByName",
					string Description = "",
					string ReturnType = "SpaceMap::valueRange",
					string Parameters = "(StringParam name)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindSpaceByName",
					string Description = "Find a named space.",
					string ReturnType = "Space",
					string Parameters = "(StringParam name)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetGameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string ReturnType = "GameSession",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Cog Interface.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InternalAdd",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Space space)",
					Array ParameterList = 
					[
						{
							string Name = "space",
							string Type = "Space",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InternalRemove",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Space space)",
					Array ParameterList = 
					[
						{
							string Name = "space",
							string Type = "Space",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InternalRenamed",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Space space)",
					Array ParameterList = 
					[
						{
							string Name = "space",
							string Type = "Space",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsEditorMode",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnClose",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(OsWindowEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "OsWindowEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnFocusGained",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(OsWindowEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "OsWindowEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnFocusLost",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(OsWindowEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "OsWindowEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnSpaceLoaded",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ObjectEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "ObjectEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Pause",
					string Description = "Pause all space on game.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Quit",
					string Description = "Quit the game and exit the engine if not in editor.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RequestQuit",
					string Description = "Request to quit sending out the GameRequestQuit event.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetInEditor",
					string Description = "Set the in editor flag.",
					string ReturnType = "void",
					string Parameters = "(bool inEditor)",
					Array ParameterList = 
					[
						{
							string Name = "inEditor",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Start",
					string Description = "Start the game.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Step",
					string Description = "Step the game one frame.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "TcpSocket",
			string BaseClass = "EventObject",
			string Description = "Manages all the client/server/peer connections.",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "ConnectionCount",
					string Type = "Integer",
					string Description = "Get the number of connections we have.",
				},
				{
					string Name = "IncomingConnectionCount",
					string Type = "Integer",
					string Description = "Get the number of incoming connections.",
				},
				{
					string Name = "OutgoingConnectionCount",
					string Type = "Integer",
					string Description = "Get the number of outgoing connections.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Close",
					string Description = "Close all activity (whether listening or connected to a server)",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CloseConnection",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Connect",
					string Description = "Attempt to connect to a host on the given port.",
					string ReturnType = "void",
					string Parameters = "(string host, Integer port)",
					Array ParameterList = 
					[
						{
							string Name = "host",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "port",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateSocket",
					string Description = "",
					string ReturnType = "SocketHandle",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DispatchError",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ExtractIntoBuffer",
					string Description = "",
					string ReturnType = "size_t",
					string Parameters = "(const BinaryBufferSaver message, byte buffer, size_t bufferSize)",
					Array ParameterList = 
					[
						{
							string Name = "message",
							string Type = "const BinaryBufferSaver",
							string Description = "",
						},
						{
							string Name = "buffer",
							string Type = "byte",
							string Description = "",
						},
						{
							string Name = "bufferSize",
							string Type = "size_t",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FinalizePacket",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(PodArray<byte> dataOut)",
					Array ParameterList = 
					[
						{
							string Name = "dataOut",
							string Type = "PodArray<byte>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindOpenOrCreateSocketData",
					string Description = "",
					string ReturnType = "SocketData",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetErrorString",
					string Description = "",
					string ReturnType = "string",
					string Parameters = "(Integer errorCode)",
					Array ParameterList = 
					[
						{
							string Name = "errorCode",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetGuid",
					string Description = "Get the Guid for this client.",
					string ReturnType = "NetGuid",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetTrackedGuids",
					string Description = "Get a range of all tracked guids.",
					string ReturnType = "Array<NetGuid>::range",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleChunks",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(SocketData socketData, const byte buffer, size_t size)",
					Array ParameterList = 
					[
						{
							string Name = "socketData",
							string Type = "SocketData",
							string Description = "",
						},
						{
							string Name = "buffer",
							string Type = "const byte",
							string Description = "",
						},
						{
							string Name = "size",
							string Type = "size_t",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleEventProtocol",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(const SocketData socketData, const byte buffer, size_t size)",
					Array ParameterList = 
					[
						{
							string Name = "socketData",
							string Type = "const SocketData",
							string Description = "",
						},
						{
							string Name = "buffer",
							string Type = "const byte",
							string Description = "",
						},
						{
							string Name = "size",
							string Type = "size_t",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleGuidProtocol",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(const SocketData socketData, const byte buffer, size_t size)",
					Array ParameterList = 
					[
						{
							string Name = "socketData",
							string Type = "const SocketData",
							string Description = "",
						},
						{
							string Name = "buffer",
							string Type = "const byte",
							string Description = "",
						},
						{
							string Name = "size",
							string Type = "size_t",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleIncomingConnections",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleIncomingData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleOutgoingConnections",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleOutgoingData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleProtocols",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(const SocketData socketData, const byte buffer, size_t size)",
					Array ParameterList = 
					[
						{
							string Name = "socketData",
							string Type = "const SocketData",
							string Description = "",
						},
						{
							string Name = "buffer",
							string Type = "const byte",
							string Description = "",
						},
						{
							string Name = "size",
							string Type = "size_t",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleReceivedData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(const SocketData socketData, const byte buffer, size_t size)",
					Array ParameterList = 
					[
						{
							string Name = "socketData",
							string Type = "const SocketData",
							string Description = "",
						},
						{
							string Name = "buffer",
							string Type = "const byte",
							string Description = "",
						},
						{
							string Name = "size",
							string Type = "size_t",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "Declare our type.",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InternalConnect",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(const ConnectionData info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "const ConnectionData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsConnected",
					string Description = "Check if we are currently connected to anyone.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsError",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(Integer result)",
					Array ParameterList = 
					[
						{
							string Name = "result",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Listen",
					string Description = "Listen for incoming connections.",
					string ReturnType = "bool",
					string Parameters = "(Integer port, Integer maxConnections)",
					Array ParameterList = 
					[
						{
							string Name = "port",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "maxConnections",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Listen",
					string Description = "Listen for incoming connections.",
					string ReturnType = "bool",
					string Parameters = "(Integer port, Integer maxConnections, TcpSocketBind::Enum bindTo)",
					Array ParameterList = 
					[
						{
							string Name = "port",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "maxConnections",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "bindTo",
							string Type = "TcpSocketBind::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MakeEventPacket",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(SendableEvent event, PodArray<byte> dataOut)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "SendableEvent",
							string Description = "",
						},
						{
							string Name = "dataOut",
							string Type = "PodArray<byte>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MakeGuidPacket",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(NetGuid guid, PodArray<byte> dataOut)",
					Array ParameterList = 
					[
						{
							string Name = "guid",
							string Type = "NetGuid",
							string Description = "",
						},
						{
							string Name = "dataOut",
							string Type = "PodArray<byte>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MakeUserPacket",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(const byte data, size_t size, PodArray<byte> dataOut)",
					Array ParameterList = 
					[
						{
							string Name = "data",
							string Type = "const byte",
							string Description = "",
						},
						{
							string Name = "size",
							string Type = "size_t",
							string Description = "",
						},
						{
							string Name = "dataOut",
							string Type = "PodArray<byte>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PrintData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(const char mode, const byte data, size_t size)",
					Array ParameterList = 
					[
						{
							string Name = "mode",
							string Type = "const char",
							string Description = "",
						},
						{
							string Name = "data",
							string Type = "const byte",
							string Description = "",
						},
						{
							string Name = "size",
							string Type = "size_t",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RawSend",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(SocketData socketData, const byte data, size_t size)",
					Array ParameterList = 
					[
						{
							string Name = "socketData",
							string Type = "SocketData",
							string Description = "",
						},
						{
							string Name = "data",
							string Type = "const byte",
							string Description = "",
						},
						{
							string Name = "size",
							string Type = "size_t",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReceiveData",
					string Description = "",
					string ReturnType = "ReceiveState",
					string Parameters = "(SocketData socketData, size_t index)",
					Array ParameterList = 
					[
						{
							string Name = "socketData",
							string Type = "SocketData",
							string Description = "",
						},
						{
							string Name = "index",
							string Type = "size_t",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ResolveHost",
					string Description = "",
					string ReturnType = "unsignedlong",
					string Parameters = "(string host)",
					Array ParameterList = 
					[
						{
							string Name = "host",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendBufferTo",
					string Description = "Send a message to a specific connection index.",
					string ReturnType = "void",
					string Parameters = "(const byte buffer, size_t size, size_t index)",
					Array ParameterList = 
					[
						{
							string Name = "buffer",
							string Type = "const byte",
							string Description = "",
						},
						{
							string Name = "size",
							string Type = "size_t",
							string Description = "",
						},
						{
							string Name = "index",
							string Type = "size_t",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendBufferToAll",
					string Description = "Send a message to all connections.",
					string ReturnType = "void",
					string Parameters = "(const byte buffer, size_t size)",
					Array ParameterList = 
					[
						{
							string Name = "buffer",
							string Type = "const byte",
							string Description = "",
						},
						{
							string Name = "size",
							string Type = "size_t",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendBufferToAllExcept",
					string Description = "Send a message to all connections except a particular connection index.",
					string ReturnType = "void",
					string Parameters = "(const byte buffer, size_t size, size_t exceptIndex)",
					Array ParameterList = 
					[
						{
							string Name = "buffer",
							string Type = "const byte",
							string Description = "",
						},
						{
							string Name = "size",
							string Type = "size_t",
							string Description = "",
						},
						{
							string Name = "exceptIndex",
							string Type = "size_t",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendTo",
					string Description = "Send an event to a specific connection index.",
					string ReturnType = "void",
					string Parameters = "(StringParam eventId, SendableEvent event, Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "eventId",
							string Type = "StringParam",
							string Description = "",
						},
						{
							string Name = "event",
							string Type = "SendableEvent",
							string Description = "",
						},
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendToAll",
					string Description = "Send an event to all connections.",
					string ReturnType = "void",
					string Parameters = "(StringParam eventId, SendableEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "eventId",
							string Type = "StringParam",
							string Description = "",
						},
						{
							string Name = "event",
							string Type = "SendableEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendToAllAndSelf",
					string Description = "Send an event to all connections and dispatch on self.",
					string ReturnType = "void",
					string Parameters = "(StringParam eventId, SendableEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "eventId",
							string Type = "StringParam",
							string Description = "",
						},
						{
							string Name = "event",
							string Type = "SendableEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendToAllExcept",
					string Description = "Send an event to all connections except a particular connection index.",
					string ReturnType = "void",
					string Parameters = "(StringParam eventId, SendableEvent event, Integer exceptIndex)",
					Array ParameterList = 
					[
						{
							string Name = "eventId",
							string Type = "StringParam",
							string Description = "",
						},
						{
							string Name = "event",
							string Type = "SendableEvent",
							string Description = "",
						},
						{
							string Name = "exceptIndex",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetSocketOptions",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(SocketHandle socket)",
					Array ParameterList = 
					[
						{
							string Name = "socket",
							string Type = "SocketHandle",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetupPacket",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(TCPSocketMessageType::Enum messageType, PodArray<byte> dataOut)",
					Array ParameterList = 
					[
						{
							string Name = "messageType",
							string Type = "TCPSocketMessageType::Enum",
							string Description = "",
						},
						{
							string Name = "dataOut",
							string Type = "PodArray<byte>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TrackReceive",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(const byte data, size_t size, SocketHandle socket)",
					Array ParameterList = 
					[
						{
							string Name = "data",
							string Type = "const byte",
							string Description = "",
						},
						{
							string Name = "size",
							string Type = "size_t",
							string Description = "",
						},
						{
							string Name = "socket",
							string Type = "SocketHandle",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TrackSend",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(const byte data, size_t size, SocketHandle socket)",
					Array ParameterList = 
					[
						{
							string Name = "data",
							string Type = "const byte",
							string Description = "",
						},
						{
							string Name = "size",
							string Type = "size_t",
							string Description = "",
						},
						{
							string Name = "socket",
							string Type = "SocketHandle",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Update",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(UpdateEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "UpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ValidateServer",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "VerifyResult",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer result)",
					Array ParameterList = 
					[
						{
							string Name = "result",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LogicGraph",
			string BaseClass = "DataResource",
			string Description = "",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
			],
			Array Methods = 
			[
				{
					string Name = "Initialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "Resource interface.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "SoundListener",
			string BaseClass = "Component",
			string Description = "The SoundListener component uses the transform to compute all 3d sound effects. /Doppler, Falloff, Reverb regions, etc.",
			Array Tags = 
			[
				"Component",
				"Sound",
			],
			Array Properties = 
			[
				{
					string Name = "Active",
					string Type = "Boolean",
					string Description = "Controls whether or not the SoundListener processes audio.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddNode",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Audio::SoundNode node)",
					Array ParameterList = 
					[
						{
							string Name = "node",
							string Type = "Audio::SoundNode",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveNode",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Audio::SoundNode node)",
					Array ParameterList = 
					[
						{
							string Name = "node",
							string Type = "Audio::SoundNode",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendAudioEvent",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Audio::AudioEventType eventType)",
					Array ParameterList = 
					[
						{
							string Name = "eventType",
							string Type = "Audio::AudioEventType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "RevoluteJoint",
			string BaseClass = "Joint",
			string Description = "A revolute joint is used to create a wheel or a hinge. A revolute joint bring the two locally defined axes together and allows free rotation on only that axis. This axis is also where the motor is applied. The two axes that are orthogonal to the motor axis have their rotation locked (objects rotate together unless on the motor axis). Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Motor: A motor will turn the objects about the motor axis. Spring: A spring will make the motor axis springy at the limits.",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "LocalPointA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "LocalPointB",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "UseFrameA",
					string Type = "Boolean",
					string Description = "Should the default frame of the constraint be object A or B? This determines which object's world axis is used when constructing the basis for the constraint. In the case of a dynamic and static object, the static object is generally the better choice. As a general rule of thumb, it should be the heavier/most important object.",
				},
				{
					string Name = "WorldPointA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldPointB",
					string Type = "Real3",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "BatchEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "BuildFrameFromAxis",
					string Description = "",
					string ReturnType = "Quat",
					string Parameters = "(QuatParam oldWorldFrame, Vec3 axis)",
					Array ParameterList = 
					[
						{
							string Name = "oldWorldFrame",
							string Type = "QuatParam",
							string Description = "",
						},
						{
							string Name = "axis",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Commit",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComponentAdded",
					string Description = "Used to detect when motors/limits/springs are added dynamically.",
					string ReturnType = "void",
					string Parameters = "(TypeIdType typeId, Component component)",
					Array ParameterList = 
					[
						{
							string Name = "typeId",
							string Type = "TypeIdType",
							string Description = "",
						},
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeInitialConfiguration",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMoleculeData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeData moleculeData)",
					Array ParameterList = 
					[
						{
							string Name = "moleculeData",
							string Type = "MoleculeData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePositionMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "EditBasisA",
					string Description = "Spawns a proxy transform widget that allows the user to configure the basis for object A. The basis is used to specify the rotation basis and the other two axes used for computing the reference angles for limits.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "EditBasisB",
					string Description = "Spawns a proxy transform widget that allows the user to configure the basis for object B. The basis is used to specify the rotation basis and the other two axes used for computing the reference angles for limits.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "EditWorldBasis",
					string Description = "Same as Basis1 except this sets the basis for both objects simultaneously.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAtomIndexFilter",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Integer atomIndex, real desiredConstraintValue)",
					Array ParameterList = 
					[
						{
							string Name = "atomIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "desiredConstraintValue",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultLimitIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultMotorIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultSpringIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetJointAngle",
					string Description = "",
					string ReturnType = "real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldAxis",
					string Description = "The axis of freedom for the joint in world space. This is the axis that rotational movement is allowed on. Which object's axis is used to compute this is determined by UseFrameA.",
					string ReturnType = "Vec3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PositionMoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetBodyAxisInternal",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer objIndex, Vec3 axis)",
					Array ParameterList = 
					[
						{
							string Name = "objIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "axis",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetObjectBasis",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Vec3 pos, QuatParam rot, StringParam callback)",
					Array ParameterList = 
					[
						{
							string Name = "pos",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "rot",
							string Type = "QuatParam",
							string Description = "",
						},
						{
							string Name = "callback",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetWorldAxis",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Vec3 axis)",
					Array ParameterList = 
					[
						{
							string Name = "axis",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetWorldFrame",
					string Description = "Used to set the entire frame in world space for this joint. The x and y axes are used as a basis for limiting the joint. The x axis is at angle 0 and the y axis is at angle 90. The z axis is the axis of rotational freedom.",
					string ReturnType = "void",
					string Parameters = "(QuatParam rot)",
					Array ParameterList = 
					[
						{
							string Name = "rot",
							string Type = "QuatParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Solve",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAtoms",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateFrame",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer objIndex, TransformProxyObjectEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "objIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "event",
							string Type = "TransformProxyObjectEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateFrameA",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(TransformProxyObjectEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "TransformProxyObjectEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateFrameB",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(TransformProxyObjectEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "TransformProxyObjectEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateWorldFrame",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(TransformProxyObjectEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "TransformProxyObjectEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WarmStart",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ParticleColorAnimator",
			string BaseClass = "ParticleAnimator",
			string Description = "",
			Array Tags = 
			[
				"Particle",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Color0",
					string Type = "Real4",
					string Description = "",
				},
				{
					string Name = "Color1",
					string Type = "Real4",
					string Description = "",
				},
				{
					string Name = "Color2",
					string Type = "Real4",
					string Description = "",
				},
				{
					string Name = "Color3",
					string Type = "Real4",
					string Description = "",
				},
				{
					string Name = "Color4",
					string Type = "Real4",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Animate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ParticleList particleList, Real dt, Mat4Ref transform)",
					Array ParameterList = 
					[
						{
							string Name = "particleList",
							string Type = "ParticleList",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "transform",
							string Type = "Mat4Ref",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetEventReceived",
			string BaseClass = "",
			string Description = "Dispatched before a received net event is dispatched.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Destination",
					string Type = "Cog",
					string Description = "",
				},
				{
					string Name = "NetEvent",
					string Type = "Event",
					string Description = "",
				},
				{
					string Name = "ReturnAllow",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "TheirNetPeerId",
					string Type = "Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "PointForceEffect",
			string BaseClass = "BasicPointEffect",
			string Description = "A force effect who's direction and strength is based upon the distance from a central point. The direction of the force will always point to the center of the field, but the strength will vary depending on the min/max distance and strength values. Useful to make planetary force field like effects.",
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
			Array Properties = 
			[
			],
			Array Methods = 
			[
				{
					string Name = "ApplyEffect",
					string Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force).",
					string ReturnType = "void",
					string Parameters = "(RigidBody obj, real dt)",
					Array ParameterList = 
					[
						{
							string Name = "obj",
							string Type = "RigidBody",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Joint",
			string BaseClass = "Component",
			string Description = "A base joint class. Joints are used to connect two objects together with some sort of a mathematical rule in terms of an object's position and velocity.",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "Active",
					string Type = "Boolean",
					string Description = "Determines if this joint is currently active. Used for runtime enabling/disabling of joints.",
				},
				{
					string Name = "AutoSnaps",
					string Type = "Boolean",
					string Description = "Determines if this joint will automatically delete itself if it reaches the max force value. This will still send an event if it snaps.",
				},
				{
					string Name = "CollideConnected",
					string Type = "Boolean",
					string Description = "Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide.",
				},
				{
					string Name = "MaxForce",
					string Type = "Real",
					string Description = "The maximum force that this joint can apply to correct itself.",
				},
				{
					string Name = "SendsEvents",
					string Type = "Boolean",
					string Description = "Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "BatchEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "BatchEventsVirtual",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Commit",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Physics::MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "Physics::MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CommitVirtual",
					string Description = "Commit is where each joint has a change to copy any data from the temp buffer of the molecules back into it's internal storage (such as the total impulse for each constraint atom).",
					string ReturnType = "void",
					string Parameters = "(Physics::MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "Physics::MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComponentAdded",
					string Description = "Used to detect when motors/limits/springs are added dynamically.",
					string ReturnType = "void",
					string Parameters = "(TypeIdType typeId, Component component)",
					Array ParameterList = 
					[
						{
							string Name = "typeId",
							string Type = "TypeIdType",
							string Description = "",
						},
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComponentRemoved",
					string Description = "Used to detect when motors/limits/springs are removed dynamically.",
					string ReturnType = "void",
					string Parameters = "(TypeIdType typeId, Component component)",
					Array ParameterList = 
					[
						{
							string Name = "typeId",
							string Type = "TypeIdType",
							string Description = "",
						},
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeCurrentAnchors",
					string Description = "Helper to grab the current anchors from the object link.",
					string ReturnType = "void",
					string Parameters = "(Physics::AnchorAtom anchors)",
					Array ParameterList = 
					[
						{
							string Name = "anchors",
							string Type = "Physics::AnchorAtom",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeCurrentReferenceAngle",
					string Description = "Helper to compute a reference angle from the current object's rotations.",
					string ReturnType = "void",
					string Parameters = "(Physics::AngleAtom referenceAngle)",
					Array ParameterList = 
					[
						{
							string Name = "referenceAngle",
							string Type = "Physics::AngleAtom",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeInitialConfiguration",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Physics::MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "Physics::MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMoleculesVirtual",
					string Description = "Fills out the fragments for the solver. Must increment the walker. Compute molecules actually fills out the fragments for the solver. This step will actually compute the jacobian, mass terms, error values, etc... to be used during the solving step.",
					string ReturnType = "void",
					string Parameters = "(Physics::MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "Physics::MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePositionMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Physics::MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "Physics::MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePositionMoleculesVirtual",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Physics::MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "Physics::MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDrawVirtual",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetActiveFilter",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAngularBaumgarte",
					string Description = "",
					string ReturnType = "real",
					string Parameters = "(Integer type)",
					Array ParameterList = 
					[
						{
							string Name = "type",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAngularErrorCorrection",
					string Description = "",
					string ReturnType = "real",
					string Parameters = "(Integer type)",
					Array ParameterList = 
					[
						{
							string Name = "type",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAngularErrorCorrection",
					string Description = "",
					string ReturnType = "real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAtomIndexFilter",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Integer atomIndex, real desiredConstraintValue)",
					Array ParameterList = 
					[
						{
							string Name = "atomIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "desiredConstraintValue",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAtomIndexFilterVirtual",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Integer atomIndex, real desiredConstraintValue)",
					Array ParameterList = 
					[
						{
							string Name = "atomIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "desiredConstraintValue",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetCog",
					string Description = "Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop.",
					string ReturnType = "Cog",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetCollider",
					string Description = "",
					string ReturnType = "Collider",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultFilter",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultLimitIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultMotorIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultSpringIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetGhost",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetJointName",
					string Description = "",
					string ReturnType = "cstr",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetJointType",
					string Description = "",
					string ReturnType = "JointEnums::JointTypes",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLinearBaumgarte",
					string Description = "",
					string ReturnType = "real",
					string Parameters = "(Integer type)",
					Array ParameterList = 
					[
						{
							string Name = "type",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLinearErrorCorrection",
					string Description = "This function is so that the base Joint can have this called on it without knowing what type the joint is.",
					string ReturnType = "real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLinearErrorCorrection",
					string Description = "This function is so that the base Joint can have this called on it without knowing what type the joint is.",
					string ReturnType = "real",
					string Parameters = "(Integer type)",
					Array ParameterList = 
					[
						{
							string Name = "type",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetOnIsland",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetOtherObject",
					string Description = "If the passed in object is ObjectA, returns ObjectB. Prevents the user from having to write the if case all the time.",
					string ReturnType = "Cog",
					string Parameters = "(Cog cog)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetShouldBaumgarteBeUsed",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(Integer type)",
					Array ParameterList = 
					[
						{
							string Name = "type",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetSlop",
					string Description = "",
					string ReturnType = "real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetValid",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "LinkPair",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MoleculeCountVirtual",
					string Description = "Returns the number of fragments for the solver.",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ObjectLinkPointUpdated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(size_t edgeIndex, Vec3 localPoint)",
					Array ParameterList = 
					[
						{
							string Name = "edgeIndex",
							string Type = "size_t",
							string Description = "",
						},
						{
							string Name = "localPoint",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAllObjectsCreated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnObjectLinkChanged",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ObjectLinkEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "ObjectLinkEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnObjectLinkPointChanged",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ObjectLinkPointChangedEvent e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "ObjectLinkPointChangedEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PositionMoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PositionMoleculeCountVirtual",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Relink",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer index, Cog cog)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ResetFilter",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetGhost",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(bool ghost)",
					Array ParameterList = 
					[
						{
							string Name = "ghost",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetOnIsland",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(bool onIsland)",
					Array ParameterList = 
					[
						{
							string Name = "onIsland",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetPair",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Physics::ColliderPair pair)",
					Array ParameterList = 
					[
						{
							string Name = "pair",
							string Type = "Physics::ColliderPair",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetValid",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(bool valid)",
					Array ParameterList = 
					[
						{
							string Name = "valid",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Solve",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Physics::MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "Physics::MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SolveVirtual",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Physics::MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "Physics::MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SpecificJointRelink",
					string Description = "Used for a specific joint type (eg PulleyJoint) to reject a relink. This is the last step that happens when relinking, after the joint has set valid to true/false.",
					string ReturnType = "void",
					string Parameters = "(Integer index, Collider collider)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "collider",
							string Type = "Collider",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UnLinkPair",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAtoms",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAtomsVirtual",
					string Description = "Update atoms is the step where a constraint compute the values (position difference, angle difference, etc...) of all of it's atoms. This info is then used to determine which atoms are actually active (dealing with limits). A solver can use this total count to efficient create it's molecule ""array"".",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateColliderCachedTransforms",
					string Description = "Helper function that forces the collider's cached body to world transforms to be up-to-date.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WarmStart",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Physics::MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "Physics::MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WarmStartVirtual",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Physics::MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "Physics::MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "PhysicsEffect",
			string BaseClass = "Component",
			string Description = "A common interface for all effects in physics. An effect is something that can be attached to a collider, rigid body, region or even a space. This effect will then perform its action every frame according to the rules of the object it is attached to.",
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Active",
					string Type = "Boolean",
					string Description = "Enable/disable this effect.",
				},
				{
					string Name = "EffectType",
					string Type = "EffectType",
					string Description = "What kind of effect this is.",
				},
				{
					string Name = "WakeUpOnChange",
					string Type = "Boolean",
					string Description = "Whether the object associated with this is woken up when any property is changed.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddEffect",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplyEffect",
					string Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force).",
					string ReturnType = "void",
					string Parameters = "(RigidBody obj, real dt)",
					Array ParameterList = 
					[
						{
							string Name = "obj",
							string Type = "RigidBody",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplyEffect",
					string Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force).",
					string ReturnType = "void",
					string Parameters = "(SpringSystem obj, real dt)",
					Array ParameterList = 
					[
						{
							string Name = "obj",
							string Type = "SpringSystem",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "BodyAdd",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(RigidBody body)",
					Array ParameterList = 
					[
						{
							string Name = "body",
							string Type = "RigidBody",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "BodyRemove",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(RigidBody body)",
					Array ParameterList = 
					[
						{
							string Name = "body",
							string Type = "RigidBody",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CheckWakeUp",
					string Description = "If the property is set, tell the associated object ( RigidBody , Region , etc...) to wake up.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ColliderAdd",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Collider collider)",
					Array ParameterList = 
					[
						{
							string Name = "collider",
							string Type = "Collider",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ColliderRemove",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Collider collider)",
					Array ParameterList = 
					[
						{
							string Name = "collider",
							string Type = "Collider",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComponentAdded",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(TypeIdType typeId, Component component)",
					Array ParameterList = 
					[
						{
							string Name = "typeId",
							string Type = "TypeIdType",
							string Description = "",
						},
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComponentRemoved",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(TypeIdType typeId, Component component)",
					Array ParameterList = 
					[
						{
							string Name = "typeId",
							string Type = "TypeIdType",
							string Description = "",
						},
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HierarchyAdd",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HierarchyRemove",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "LevelAdd",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(PhysicsSpace space)",
					Array ParameterList = 
					[
						{
							string Name = "space",
							string Type = "PhysicsSpace",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "LevelRemove",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(PhysicsSpace space)",
					Array ParameterList = 
					[
						{
							string Name = "space",
							string Type = "PhysicsSpace",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PreCalculate",
					string Description = "Some values can be pre-calculated once per frame instead of per body/object (local to world space directions, etc...)",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RegionAdd",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Region region)",
					Array ParameterList = 
					[
						{
							string Name = "region",
							string Type = "Region",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RegionRemove",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Region region)",
					Array ParameterList = 
					[
						{
							string Name = "region",
							string Type = "Region",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveEffect",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SpaceAdd",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(PhysicsSpace space)",
					Array ParameterList = 
					[
						{
							string Name = "space",
							string Type = "PhysicsSpace",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SpaceRemove",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(PhysicsSpace space)",
					Array ParameterList = 
					[
						{
							string Name = "space",
							string Type = "PhysicsSpace",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Toggle",
					string Description = "Toggles whether or not this effect is active.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TransformLocalDirectionAndPointToWorld",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Vec3 localPoint, Vec3 localDir)",
					Array ParameterList = 
					[
						{
							string Name = "localPoint",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "localDir",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TransformLocalDirectionToWorld",
					string Description = "",
					string ReturnType = "Vec3",
					string Parameters = "(Vec3 localDir, bool preserveLength)",
					Array ParameterList = 
					[
						{
							string Name = "localDir",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "preserveLength",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TransformLocalDirectionToWorld",
					string Description = "",
					string ReturnType = "Vec3",
					string Parameters = "(Vec3 localDir)",
					Array ParameterList = 
					[
						{
							string Name = "localDir",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TransformLocalPointToWorld",
					string Description = "",
					string ReturnType = "Vec3",
					string Parameters = "(Vec3 localPoint)",
					Array ParameterList = 
					[
						{
							string Name = "localPoint",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "PhysicsMesh",
			string BaseClass = "GenericPhysicsMesh",
			string Description = "A mesh used to represent static world geometry. All geometry is stored and tested as a collection of triangles.",
			Array Tags = 
			[
				"Resource",
				"Physics",
			],
			Array Properties = 
			[
				{
					string Name = "Tree",
					string Type = "StaticAabbTree<Integer>",
					string Description = "Aabb Tree used for fast ray casts and triangle lookups.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "CastRay",
					string Description = "Finds the first triangle hit by the local-space ray.",
					string ReturnType = "bool",
					string Parameters = "(const Ray localRay, ProxyResult result, BaseCastFilter filter)",
					Array ParameterList = 
					[
						{
							string Name = "localRay",
							string Type = "const Ray",
							string Description = "",
						},
						{
							string Name = "result",
							string Type = "ProxyResult",
							string Description = "",
						},
						{
							string Name = "filter",
							string Type = "BaseCastFilter",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CopyTo",
					string Description = "Copy all relevant info for runtime clone.",
					string ReturnType = "void",
					string Parameters = "(PhysicsMesh destination)",
					Array ParameterList = 
					[
						{
							string Name = "destination",
							string Type = "PhysicsMesh",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ForceRebuild",
					string Description = "Recomputes mass, volume, the local space aabb, and internal edge information. If a mesh wants to do something special (such as a mid-phase) then it should override this. Note: Inertia is not calculated as it cannot be (non-uniformly) scaled afterwards.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GenerateInternalEdgeData",
					string Description = "Generates the voronoi region data for internal edge catching prevention. Virtual so that any mesh can use its appropriate mid-phase for optimization.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GenerateTree",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAabbTree",
					string Description = "Returns the mesh's Aabb tree.",
					string ReturnType = "StaticAabbTree<Integer>",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetOverlappingTriangles",
					string Description = "Fills out the given array with all overlapping triangles.",
					string ReturnType = "void",
					string Parameters = "(Aabb aabb, TriangleArray triangles, Array<Integer> triangleIds)",
					Array ParameterList = 
					[
						{
							string Name = "aabb",
							string Type = "Aabb",
							string Description = "",
						},
						{
							string Name = "triangles",
							string Type = "TriangleArray",
							string Description = "",
						},
						{
							string Name = "triangleIds",
							string Type = "Array<Integer>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnResourceModified",
					string Description = "Called when a mesh is modified. This is typically done when the vertices/indices are modified in script.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnType = "Resource",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "UiFocusEvent",
			string BaseClass = "",
			string Description = "",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "CancelFocus",
					string Type = "bool",
					string Description = "On UiFocusGainedPreview, allows you to cancel the focus gain.",
				},
				{
					string Name = "LostFocus",
					string Type = "CogId",
					string Description = "The object that has lost focus, or will lose focus (in the case of preview).",
				},
				{
					string Name = "ReceivedFocus",
					string Type = "CogId",
					string Description = "The object that is gaining focus.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "HeightMapModel",
			string BaseClass = "Graphical",
			string Description = "",
			Array Tags = 
			[
				"Component",
				"Graphical",
			],
			Array Properties = 
			[
				{
					string Name = "GraphicalPatches",
					string Type = "HashMap<HeightPatch,GraphicalHeightPatch>",
					string Description = "",
				},
				{
					string Name = "LocalAabb",
					string Type = "Aabb",
					string Description = "",
				},
				{
					string Name = "Map",
					string Type = "HeightMap",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddGraphicalPatchEntry",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Array<GraphicalEntry> entries, GraphicalHeightPatch graphicalPatch, PatchIndex index)",
					Array ParameterList = 
					[
						{
							string Name = "entries",
							string Type = "Array<GraphicalEntry>",
							string Description = "",
						},
						{
							string Name = "graphicalPatch",
							string Type = "GraphicalHeightPatch",
							string Description = "",
						},
						{
							string Name = "index",
							string Type = "PatchIndex",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateGraphicalPatchMesh",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HeightPatch heightPatch)",
					Array ParameterList = 
					[
						{
							string Name = "heightPatch",
							string Type = "HeightPatch",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ExtractFrameData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(FrameNode frameNode, FrameBlock frameBlock, Array<Mat4> matrixBuffer)",
					Array ParameterList = 
					[
						{
							string Name = "frameNode",
							string Type = "FrameNode",
							string Description = "",
						},
						{
							string Name = "frameBlock",
							string Type = "FrameBlock",
							string Description = "",
						},
						{
							string Name = "matrixBuffer",
							string Type = "Array<Mat4>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ExtractViewData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ViewNode viewNode, ViewBlock viewBlock, FrameBlock frameBlock)",
					Array ParameterList = 
					[
						{
							string Name = "viewNode",
							string Type = "ViewNode",
							string Description = "",
						},
						{
							string Name = "viewBlock",
							string Type = "ViewBlock",
							string Description = "",
						},
						{
							string Name = "frameBlock",
							string Type = "FrameBlock",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultMaterial",
					string Description = "",
					string ReturnType = "Material",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MidPhaseQuery",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Array<GraphicalEntry> entries, Camera camera, Frustum frustum)",
					Array ParameterList = 
					[
						{
							string Name = "entries",
							string Type = "Array<GraphicalEntry>",
							string Description = "",
						},
						{
							string Name = "camera",
							string Type = "Camera",
							string Description = "",
						},
						{
							string Name = "frustum",
							string Type = "Frustum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnPatchAdded",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HeightMapEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "HeightMapEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnPatchModified",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HeightMapEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "HeightMapEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnPatchRemoved",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HeightMapEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "HeightMapEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnSave",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HeightMapEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "HeightMapEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RebuildLocalAabb",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Attractive",
			string BaseClass = "Component",
			string Description = "Attracts objects with the Attractor component.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Active",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Strength",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "GraphicsSpace",
			string BaseClass = "Component",
			string Description = "",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Active",
					string Type = "Boolean",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddCamera",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Camera camera)",
					Array ParameterList = 
					[
						{
							string Name = "camera",
							string Type = "Camera",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddGraphical",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Graphical graphical)",
					Array ParameterList = 
					[
						{
							string Name = "graphical",
							string Type = "Graphical",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddToVisibleGraphicals",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Graphical graphical, Camera camera, Vec3 cameraPos, Vec3 cameraDir, Frustum frustum)",
					Array ParameterList = 
					[
						{
							string Name = "graphical",
							string Type = "Graphical",
							string Description = "",
						},
						{
							string Name = "camera",
							string Type = "Camera",
							string Description = "",
						},
						{
							string Name = "cameraPos",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "cameraDir",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "frustum",
							string Type = "Frustum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateDebugGraphicals",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnFrameUpdate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Real frameDt)",
					Array ParameterList = 
					[
						{
							string Name = "frameDt",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnLogicUpdate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(UpdateEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "UpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnSpaceDestroyed",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ObjectEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "ObjectEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "QueueVisibilityEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Graphical graphical)",
					Array ParameterList = 
					[
						{
							string Name = "graphical",
							string Type = "Graphical",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "QueueVisibilityEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(GraphicalList graphicals)",
					Array ParameterList = 
					[
						{
							string Name = "graphicals",
							string Type = "GraphicalList",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "QueueVisibilityEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(GraphicalList graphicals, Camera camera)",
					Array ParameterList = 
					[
						{
							string Name = "graphicals",
							string Type = "GraphicalList",
							string Description = "",
						},
						{
							string Name = "camera",
							string Type = "Camera",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RegisterVisibility",
					string Description = "Fills out the passed in vector with all objects inside the given Aabb.",
					string ReturnType = "void",
					string Parameters = "(Camera camera)",
					Array ParameterList = 
					[
						{
							string Name = "camera",
							string Type = "Camera",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveCamera",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Camera camera)",
					Array ParameterList = 
					[
						{
							string Name = "camera",
							string Type = "Camera",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveGraphical",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Graphical graphical)",
					Array ParameterList = 
					[
						{
							string Name = "graphical",
							string Type = "Graphical",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RenderQueuesUpdate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(RenderTasks renderTasks, RenderQueues renderQueues)",
					Array ParameterList = 
					[
						{
							string Name = "renderTasks",
							string Type = "RenderTasks",
							string Description = "",
						},
						{
							string Name = "renderQueues",
							string Type = "RenderQueues",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RenderTasksUpdate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(RenderTasks renderTasks)",
					Array ParameterList = 
					[
						{
							string Name = "renderTasks",
							string Type = "RenderTasks",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendVisibilityEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UnregisterVisibility",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Camera camera)",
					Array ParameterList = 
					[
						{
							string Name = "camera",
							string Type = "Camera",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator=",
					string Description = "",
					string ReturnType = "GraphicsSpace",
					string Parameters = "(const GraphicsSpace)",
					Array ParameterList = 
					[
						{
							string Name = "",
							string Type = "const GraphicsSpace",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "MainWindowConfig",
			string BaseClass = "Component",
			string Description = "Configuration component that Contains data for the main window. Used to control window size and placement. Also stores graphics context shared between graphics and the platform.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "DesktopIndex",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "Height",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "MaxSize",
					string Type = "bool",
					string Description = "",
				},
				{
					string Name = "Title",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "Width",
					string Type = "Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "JointSpring",
			string BaseClass = "Component",
			string Description = "A spring for a joint. Used to make a joint soft and therefore behave spring-like. A joint spring has a frequency in hertz at which to oscillate as well as a dampening ratio. The ratio should vary from 0 to 1 where 0 is no dampening and 1 is critical dampening. See each joint for a description of how it reacts to a spring.",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "Active",
					string Type = "Boolean",
					string Description = "Determines if this motor is currently active.",
				},
				{
					string Name = "AtomIds",
					string Type = "Integer",
					string Description = "Signifies what atoms on the joint this effects.",
				},
				{
					string Name = "DampRatio",
					string Type = "Real",
					string Description = "The dampening ratio of this spring. The value should range from 0 to 1 where 0 is no dampening and 1 is critical dampening.",
				},
				{
					string Name = "FrequencyHz",
					string Type = "Real",
					string Description = "The oscillation frequency of the spring in Hertz (cycles per second).",
				},
			],
			Array Methods = 
			[
				{
					string Name = "GetAtomIndexActive",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(Integer atomIndexMask)",
					Array ParameterList = 
					[
						{
							string Name = "atomIndexMask",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsValid",
					string Description = "Has this joint been initialized with a valid joint. Also used to deal with calling sets in serialize.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetGameStarted",
			string BaseClass = "",
			string Description = "Dispatched after fully joining or hosting a network game.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "GameSession",
					string Type = "GameSession",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "MouseCapture",
			string BaseClass = "Component",
			string Description = "",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Manipulation",
					string Type = "Handle<MouseManipulation>",
					string Description = "The manipulation object.",
				},
				{
					string Name = "PreventNextMouseUp",
					string Type = "bool",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Capture",
					string Description = "Starts the mouse manipulation. All mouse events will now only go to the owner of this Component . Returns whether or not the manipulation can be started.",
					string ReturnType = "bool",
					string Parameters = "(ViewportMouseEvent e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "ViewportMouseEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsCaptured",
					string Description = "Returns whether or not this has an active mouse capture.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "We need to release the mouse manipulation when we're destroyed.",
					string ReturnType = "void",
					string Parameters = "(u32 flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "u32",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReleaseCapture",
					string Description = "Releases the mouse manipulation.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Level",
			string BaseClass = "Resource",
			string Description = "A level is resource that stores a set of objects that can be loaded into a space. Level is different from most resource types in that it does not really store the level data on the object but always loads the data from the file system.",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "LoadPath",
					string Type = "string",
					string Description = "Path to level file.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "LoadSpace",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Space space)",
					Array ParameterList = 
					[
						{
							string Name = "space",
							string Type = "Space",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SaveSpace",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Space space)",
					Array ParameterList = 
					[
						{
							string Name = "space",
							string Type = "Space",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateContentItem",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ContentItem contentItem)",
					Array ParameterList = 
					[
						{
							string Name = "contentItem",
							string Type = "ContentItem",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetPeer",
			string BaseClass = "NetObject",
			string Description = "Network Peer Acts as a host on the network Manages network object state and event replication.",
			Array Tags = 
			[
				"Networking",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "AutomaticChannel",
					string Type = "NetChannelConfig",
					string Description = "",
				},
				{
					string Name = "BasicHostInfoTimeout",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "ExtraHostInfoTimeout",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "FrameFillSkip",
					string Type = "Real",
					string Description = "Controls when to skip change replication for the current frame because of remaining outgoing bandwidth utilization ratio on any given link.",
				},
				{
					string Name = "FrameFillWarning",
					string Type = "Real",
					string Description = "Controls when the user will be warned of their current frame's outgoing bandwidth utilization ratio on any given link.",
				},
				{
					string Name = "HostPingInterval",
					string Type = "Real",
					string Description = "Controls how often the peer sends a host ping message when discovering or refreshing hosts via ping messages.",
				},
				{
					string Name = "HostPortRangeEnd",
					string Type = "Integer",
					string Description = "Configures the inclusive range of ports used to host this game (Must be a valid port value within the range [0, 65535])",
				},
				{
					string Name = "HostPortRangeStart",
					string Type = "Integer",
					string Description = "Configures the inclusive range of ports used to host this game (Must be a valid port value within the range [0, 65535])",
				},
				{
					string Name = "InternetDiscoverable",
					string Type = "Boolean",
					string Description = "Configures the server peer to be discoverable on the internet (Requires master server subscriptions)",
				},
				{
					string Name = "InternetHostListTimeout",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "InternetHostPublishInterval",
					string Type = "Real",
					string Description = "Controls how often the internet discoverable peer sends a host record message to its master server subscriptions (Requires master server subscriptions)",
				},
				{
					string Name = "InternetHostRecordLifetime",
					string Type = "Real",
					string Description = "Controls the lifetime of every host record stored on the master server.",
				},
				{
					string Name = "InternetSameIpHostRecordLimit",
					string Type = "Integer",
					string Description = "Controls how many host records from the same IP address may be stored on the master server (used to prevent flood attacks)",
				},
				{
					string Name = "Ipv4Address",
					string Type = "IpAddress",
					string Description = "Returns the peer's local IPv4 address, else IpAddress() Set if the peer is open with an IPv4 socket.",
				},
				{
					string Name = "Ipv4Host",
					string Type = "string",
					string Description = "Returns the peer's local IPv4 address host as a numeric address string, else String()",
				},
				{
					string Name = "Ipv4Port",
					string Type = "Integer",
					string Description = "Returns the peer's local IPv4 address port, else String()",
				},
				{
					string Name = "Ipv6Address",
					string Type = "IpAddress",
					string Description = "Returns the peer's local IPv6 address, else IpAddress() Set if the peer is open with an IPv6 socket.",
				},
				{
					string Name = "Ipv6Host",
					string Type = "string",
					string Description = "Returns the peer's local IPv6 address host as a numeric address string, else String()",
				},
				{
					string Name = "Ipv6Port",
					string Type = "Integer",
					string Description = "Returns the peer's local IPv6 address port, else String()",
				},
				{
					string Name = "IsNapping",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "IsOnline",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "IsOpen",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "LanDiscoverable",
					string Type = "Boolean",
					string Description = "Configures the server peer to be discoverable on the local area network.",
				},
				{
					string Name = "LastChangeTimePassed",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "LastChangeTimestamp",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "LinkCount",
					string Type = "Integer",
					string Description = "[Client/Server] Returns the number of connected network links managed by this peer",
				},
				{
					string Name = "NetObjectCount",
					string Type = "Integer",
					string Description = "Returns the number of net objects in this game session (but not including the net peer itself)",
				},
				{
					string Name = "NetObjectId",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "NetPeerId",
					string Type = "Integer",
					string Description = "Returns the open peer's unique network identifier, else 0 [Server/Offline] This will always be zero [Client] This will be non-zero once connected to a server, else zero.",
				},
				{
					string Name = "NetSpaceCount",
					string Type = "Integer",
					string Description = "Returns the number of net spaces in this game session.",
				},
				{
					string Name = "NetUserCount",
					string Type = "Integer",
					string Description = "Returns the number of net users in this game session.",
				},
				{
					string Name = "OfflineTimePassed",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "OfflineTimestamp",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "OnlineTimePassed",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "OnlineTimestamp",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "UserCount",
					string Type = "Integer",
					string Description = "Returns the number of added network users.",
				},
				{
					string Name = "Users",
					string Type = "NetUserRange",
					string Description = "Returns all added network users.",
				},
				{
					string Name = "UsersAddedByMyPeer",
					string Type = "NetUserRange",
					string Description = "Returns the network users added by our local peer.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddNetObjectToFamilyTree",
					string Description = "[Client/Server] Adds a non-emplaced net object (ancestor or descendant) to it's appropriate family tree, creating the tree if doesn't exist These MUST be added in depth-first pre-order traversal order! Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(NetObject ancestor, NetObject netObject)",
					Array ParameterList = 
					[
						{
							string Name = "ancestor",
							string Type = "NetObject",
							string Description = "",
						},
						{
							string Name = "netObject",
							string Type = "NetObject",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddOrFindHost",
					string Description = "Adds or finds a host in the given network's host list.",
					string ReturnType = "NetHost",
					string Parameters = "(Network::Enum network, const IpAddress ipAddress)",
					Array ParameterList = 
					[
						{
							string Name = "network",
							string Type = "Network::Enum",
							string Description = "",
						},
						{
							string Name = "ipAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddUser",
					string Description = "Initiates a network user add request to add a new user belonging to our local peer (delayed until end of frame) Listen to the NetUser event interface to handle the results Returns true if the request was successfully initiated, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddUser",
					string Description = "Initiates a network user add request to add a new user belonging to our local peer (delayed until end of frame) Listen to the NetUser event interface to handle the results Returns true if the request was successfully initiated, else false.",
					string ReturnType = "bool",
					string Parameters = "(Event requestEvent)",
					Array ParameterList = 
					[
						{
							string Name = "requestEvent",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddUser",
					string Description = "Initiates a network user add request to add a new user belonging to our local peer (delayed until end of frame) Listen to the NetUser event interface to handle the results Returns true if the request was successfully initiated, else false.",
					string ReturnType = "bool",
					string Parameters = "(EventBundle requestBundle)",
					Array ParameterList = 
					[
						{
							string Name = "requestBundle",
							string Type = "EventBundle",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddUserInternal",
					string Description = "Adds the net user to internal lists and allows net object ownership.",
					string ReturnType = "void",
					string Parameters = "(Cog cog)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddingLink",
					string Description = "Called before a link is added.",
					string ReturnType = "void",
					string Parameters = "(PeerLink link)",
					Array ParameterList = 
					[
						{
							string Name = "link",
							string Type = "PeerLink",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AssignNetUserId",
					string Description = "[Server/Offline] Assigns a network user ID to the specified network user Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(NetUser user)",
					Array ParameterList = 
					[
						{
							string Name = "user",
							string Type = "NetUser",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CancelHostRequests",
					string Description = "Cancels all host discovery and refresh requests currently in progress (the operations will be considered unsuccessful) Listen to the NetHost event interface to handle the results.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ClaimActiveReplicaStream",
					string Description = "[Client] Claims the active replica stream belongs to the specified cog initializer Intended to be called redundantly by objects in the hierarchy to either make initial claim or confirm claim Returns true if successful, else false (could be another initializer has claim or there is currently no active replica stream)",
					string ReturnType = "bool",
					string Parameters = "(const CogInitializer cogInitializer)",
					Array ParameterList = 
					[
						{
							string Name = "cogInitializer",
							string Type = "const CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ClearHostList",
					string Description = "Clears the given network's host list.",
					string ReturnType = "void",
					string Parameters = "(Network::Enum network)",
					Array ParameterList = 
					[
						{
							string Name = "network",
							string Type = "Network::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ClearHostLists",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ClientOnConnectConfirmation",
					string Description = "[Client] Called after sending a connect confirmation",
					string ReturnType = "void",
					string Parameters = "(ReplicatorLink link, BitStream connectConfirmationData)",
					Array ParameterList = 
					[
						{
							string Name = "link",
							string Type = "ReplicatorLink",
							string Description = "",
						},
						{
							string Name = "connectConfirmationData",
							string Type = "BitStream",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ClientOnConnectRequest",
					string Description = "[Client] Called after sending a connect request",
					string ReturnType = "void",
					string Parameters = "(ReplicatorLink link, ConnectRequestData connectRequestData)",
					Array ParameterList = 
					[
						{
							string Name = "link",
							string Type = "ReplicatorLink",
							string Description = "",
						},
						{
							string Name = "connectRequestData",
							string Type = "ConnectRequestData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ClientOnConnectResponse",
					string Description = "[Client] Called after receiving a connect response If accepted, our replicator ID is set immediately before this and a connect confirmation is sent after this If denied, our replicator ID is cleared and link is destroyed immediately after this",
					string ReturnType = "BitStream",
					string Parameters = "(ReplicatorLink link, ConnectResponseData connectResponseData)",
					Array ParameterList = 
					[
						{
							string Name = "link",
							string Type = "ReplicatorLink",
							string Description = "",
						},
						{
							string Name = "connectResponseData",
							string Type = "ConnectResponseData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ClientOnDisconnectNotice",
					string Description = "[Client] Called after sending or receiving a disconnect notice Our replicator ID is cleared and link is destroyed immediately after this",
					string ReturnType = "void",
					string Parameters = "(ReplicatorLink link, DisconnectNoticeData disconnectNoticeData, TransmissionDirection::Enum direction)",
					Array ParameterList = 
					[
						{
							string Name = "link",
							string Type = "ReplicatorLink",
							string Description = "",
						},
						{
							string Name = "disconnectNoticeData",
							string Type = "DisconnectNoticeData",
							string Description = "",
						},
						{
							string Name = "direction",
							string Type = "TransmissionDirection::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CloneFamilyTree",
					string Description = "[Server] Clones all present, live net objects in the family tree locally and remotely along the route Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(FamilyTreeId familyTreeId, const Route route)",
					Array ParameterList = 
					[
						{
							string Name = "familyTreeId",
							string Type = "FamilyTreeId",
							string Description = "",
						},
						{
							string Name = "route",
							string Type = "const Route",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CloneNetGame",
					string Description = "[Server] Clones the entire network game on the specified link Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(NetPeerId netPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CloneNetLevel",
					string Description = "[Server] Clones the network space's current level and net objects on the specified link Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(Space space, bool isLevelTransition, NetPeerId netPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "space",
							string Type = "Space",
							string Description = "",
						},
						{
							string Name = "isLevelTransition",
							string Type = "bool",
							string Description = "",
						},
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CloneNetLevel",
					string Description = "[Server] Clones the network space's current level and net objects on all links Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(Space space, bool isLevelTransition)",
					Array ParameterList = 
					[
						{
							string Name = "space",
							string Type = "Space",
							string Description = "",
						},
						{
							string Name = "isLevelTransition",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CloneNetObject",
					string Description = "[Server] Clones the live net object locally and remotely along the route Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(Cog cog, const Route route)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "route",
							string Type = "const Route",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Close",
					string Description = "Closes the peer (safe to call multiple times)",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ConnectLink",
					string Description = "[Client] Initiates a connect attempt with the remote peer (delayed until end of frame) Listen to the NetLink event interface to handle the results Returns true if a connect request was successfully initiated, else false",
					string ReturnType = "bool",
					string Parameters = "(const IpAddress ipAddress, EventBundle requestBundle)",
					Array ParameterList = 
					[
						{
							string Name = "ipAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
						{
							string Name = "requestBundle",
							string Type = "EventBundle",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ConnectLink",
					string Description = "[Client] Initiates a connect attempt with the remote peer (delayed until end of frame) Listen to the NetLink event interface to handle the results Returns true if a connect request was successfully initiated, else false",
					string ReturnType = "bool",
					string Parameters = "(const IpAddress ipAddress)",
					Array ParameterList = 
					[
						{
							string Name = "ipAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ConnectLink",
					string Description = "[Client] Initiates a connect attempt with the remote peer (delayed until end of frame) Listen to the NetLink event interface to handle the results Returns true if a connect request was successfully initiated, else false",
					string ReturnType = "bool",
					string Parameters = "(const IpAddress ipAddress, Event requestEvent)",
					Array ParameterList = 
					[
						{
							string Name = "ipAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
						{
							string Name = "requestEvent",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateReplicas",
					string Description = "Creates replicas using the replica stream and creation info (create context and replica type) Gaps may be represented as null replicas Returns true if successful, else false.",
					string ReturnType = "bool",
					string Parameters = "(const CreateContext createContext, const ReplicaType replicaType, const ReplicaStream replicaStream, ReplicaArray replicas)",
					Array ParameterList = 
					[
						{
							string Name = "createContext",
							string Type = "const CreateContext",
							string Description = "",
						},
						{
							string Name = "replicaType",
							string Type = "const ReplicaType",
							string Description = "",
						},
						{
							string Name = "replicaStream",
							string Type = "const ReplicaStream",
							string Description = "",
						},
						{
							string Name = "replicas",
							string Type = "ReplicaArray",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DeserializeNetEvent",
					string Description = "Deserializes the net event Returns true if successful, else false.",
					string ReturnType = "bool",
					string Parameters = "(const BitStreamExtended bitStream, Event netEvent, Cog destination, NetPeerId netPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "bitStream",
							string Type = "const BitStreamExtended",
							string Description = "",
						},
						{
							string Name = "netEvent",
							string Type = "Event",
							string Description = "",
						},
						{
							string Name = "destination",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DeserializeReplicas",
					string Description = "Deserializes replicas from a replica stream Creates or finds replicas as necessary depending on replica info and the replica stream mode Gaps may be represented as null replicas and additional data may be deserialized as needed Returns true if successful, else false.",
					string ReturnType = "bool",
					string Parameters = "(const ReplicaStream replicaStream, ReplicaArray replicas)",
					Array ParameterList = 
					[
						{
							string Name = "replicaStream",
							string Type = "const ReplicaStream",
							string Description = "",
						},
						{
							string Name = "replicas",
							string Type = "ReplicaArray",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DestroyNetObject",
					string Description = "[Server] Destroys the live net object locally and remotely along the route Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(Cog cog, const Route route)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "route",
							string Type = "const Route",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DisconnectAllLinks",
					string Description = "[Client/Server] Disconnects by request from all remote peers Listen to the NetLink event interface to handle the results Returns the number of links disconnected",
					string ReturnType = "Integer",
					string Parameters = "(EventBundle requestBundle)",
					Array ParameterList = 
					[
						{
							string Name = "requestBundle",
							string Type = "EventBundle",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DisconnectAllLinks",
					string Description = "[Client/Server] Disconnects by request from all remote peers Listen to the NetLink event interface to handle the results Returns the number of links disconnected",
					string ReturnType = "Integer",
					string Parameters = "(Event requestEvent)",
					Array ParameterList = 
					[
						{
							string Name = "requestEvent",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DisconnectAllLinks",
					string Description = "[Client/Server] Disconnects by request from all remote peers Listen to the NetLink event interface to handle the results Returns the number of links disconnected",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DisconnectLink",
					string Description = "[Client/Server] Disconnects by request from the remote peer Listen to the NetLink event interface to handle the results Returns true if a disconnect notice was successfully initiated, else false",
					string ReturnType = "bool",
					string Parameters = "(NetPeerId netPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DisconnectLink",
					string Description = "[Client/Server] Disconnects by request from the remote peer Listen to the NetLink event interface to handle the results Returns true if a disconnect notice was successfully initiated, else false",
					string ReturnType = "bool",
					string Parameters = "(NetPeerId netPeerId, Event requestEvent)",
					Array ParameterList = 
					[
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
						{
							string Name = "requestEvent",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DisconnectLink",
					string Description = "[Client/Server] Disconnects by request from the remote peer Listen to the NetLink event interface to handle the results Returns true if a disconnect notice was successfully initiated, else false",
					string ReturnType = "bool",
					string Parameters = "(NetPeerId netPeerId, EventBundle requestBundle)",
					Array ParameterList = 
					[
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
						{
							string Name = "requestBundle",
							string Type = "EventBundle",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DisconnectLink",
					string Description = "[Client/Server] Disconnects by request from the remote peer Listen to the NetLink event interface to handle the results Returns true if a disconnect notice was successfully initiated, else false",
					string ReturnType = "bool",
					string Parameters = "(const IpAddress ipAddress)",
					Array ParameterList = 
					[
						{
							string Name = "ipAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DisconnectLink",
					string Description = "[Client/Server] Disconnects by request from the remote peer Listen to the NetLink event interface to handle the results Returns true if a disconnect notice was successfully initiated, else false",
					string ReturnType = "bool",
					string Parameters = "(const IpAddress ipAddress, Event requestEvent)",
					Array ParameterList = 
					[
						{
							string Name = "ipAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
						{
							string Name = "requestEvent",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DisconnectLink",
					string Description = "[Client/Server] Disconnects by request from the remote peer Listen to the NetLink event interface to handle the results Returns true if a disconnect notice was successfully initiated, else false",
					string ReturnType = "bool",
					string Parameters = "(const IpAddress ipAddress, EventBundle requestBundle)",
					Array ParameterList = 
					[
						{
							string Name = "ipAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
						{
							string Name = "requestBundle",
							string Type = "EventBundle",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DiscoverHostList",
					string Description = "Discovers the given network's host list. Listen to the NetHost event interface to handle the results Returns true if the discovery was successfully started, else false.",
					string ReturnType = "bool",
					string Parameters = "(Network::Enum network, bool removeStaleHosts)",
					Array ParameterList = 
					[
						{
							string Name = "network",
							string Type = "Network::Enum",
							string Description = "",
						},
						{
							string Name = "removeStaleHosts",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DispatchBroadcastInternal",
					string Description = "[Client/Server] Dispatches the net event on all remote peers Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(StringParam netEventId, Event netEvent, Cog destination)",
					Array ParameterList = 
					[
						{
							string Name = "netEventId",
							string Type = "StringParam",
							string Description = "",
						},
						{
							string Name = "netEvent",
							string Type = "Event",
							string Description = "",
						},
						{
							string Name = "destination",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DispatchLocalInternal",
					string Description = "[Client/Server/Offline] Dispatches the net event on the local peer Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(StringParam netEventId, Event netEvent, Cog destination)",
					Array ParameterList = 
					[
						{
							string Name = "netEventId",
							string Type = "StringParam",
							string Description = "",
						},
						{
							string Name = "netEvent",
							string Type = "Event",
							string Description = "",
						},
						{
							string Name = "destination",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DispatchRemoteInternal",
					string Description = "[Client/Server] Dispatches the net event on the remote peer Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(StringParam netEventId, Event netEvent, NetPeerId netPeerId, Cog destination)",
					Array ParameterList = 
					[
						{
							string Name = "netEventId",
							string Type = "StringParam",
							string Description = "",
						},
						{
							string Name = "netEvent",
							string Type = "Event",
							string Description = "",
						},
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
						{
							string Name = "destination",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "EmplaceNetObjectByGameSetup",
					string Description = "[Client/Server] Emplaces the invalid net object locally against the game setup Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(Cog cog)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "EmplaceNetObjectBySpaceAndLevel",
					string Description = "[Client/Server] Emplaces the invalid net object locally against the specified net space and level Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(Cog cog, Space space, StringParam levelResourceIdName)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "space",
							string Type = "Space",
							string Description = "",
						},
						{
							string Name = "levelResourceIdName",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ForgetNetObject",
					string Description = "[Client] Forgets the valid net object locally [Server] Forgets the live net object locally and remotely along the route Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(Cog cog, const Route route)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "route",
							string Type = "const Route",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetActiveReplicaStream",
					string Description = "[Client] Returns the active replica stream used while creating a net object hierarchy",
					string ReturnType = "const ReplicaStream",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetBasicNetHostInfo",
					string Description = "Acquires basic project-specific host information (limited to 480 bytes) as a bitstream.",
					string ReturnType = "BitStream",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetCreationDuration",
					string Description = "Returns the duration in milliseconds since the creation of this peer.",
					string ReturnType = "TimeMs",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetExtraNetHostInfo",
					string Description = "Acquires extra project-specific host information as a bitstream.",
					string ReturnType = "BitStream",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetFacilitateInternetConnections",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetGuid",
					string Description = "Returns the peer's permanent GUID This GUID will never change for the lifetime of this peer.",
					string ReturnType = "Guid",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetHostByAddress",
					string Description = "",
					string ReturnType = "NetHost",
					string Parameters = "(const IpAddress ipAddress)",
					Array ParameterList = 
					[
						{
							string Name = "ipAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetHostByAddress",
					string Description = "",
					string ReturnType = "NetHost",
					string Parameters = "(Network::Enum network, const IpAddress ipAddress)",
					Array ParameterList = 
					[
						{
							string Name = "network",
							string Type = "Network::Enum",
							string Description = "",
						},
						{
							string Name = "ipAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetHostByIndex",
					string Description = "Returns the first equivalent host found in the given network's host list, else nullptr.",
					string ReturnType = "NetHost",
					string Parameters = "(Network::Enum network, Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "network",
							string Type = "Network::Enum",
							string Description = "",
						},
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetHostList",
					string Description = "Returns the given network's host list.",
					string ReturnType = "NetHostRange",
					string Parameters = "(Network::Enum network)",
					Array ParameterList = 
					[
						{
							string Name = "network",
							string Type = "Network::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLink",
					string Description = "[Client/Server] Returns the connected network link with the specified peer ID, else nullptr",
					string ReturnType = "PeerLink",
					string Parameters = "(NetPeerId netPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLink",
					string Description = "[Client/Server] Returns the connected network link with the specified IP address, else nullptr",
					string ReturnType = "PeerLink",
					string Parameters = "(const IpAddress ipAddress)",
					Array ParameterList = 
					[
						{
							string Name = "ipAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLinkCreationDirection",
					string Description = "[Client/Server] Returns the direction in which the link was created (which peer initiated the connection), else TransmissionDirection::Unspecified",
					string ReturnType = "TransmissionDirection::Enum",
					string Parameters = "(NetPeerId netPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLinkCreationDuration",
					string Description = "[Client/Server] Returns the duration that the link has existed, else 0",
					string ReturnType = "TimeMs",
					string Parameters = "(NetPeerId netPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLinkGuid",
					string Description = "[Client/Server] Returns the remote peer's permanent GUID, else 0 (Available if the link is connected or incoming and attempting connection)",
					string ReturnType = "Guid",
					string Parameters = "(NetPeerId netPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLinkInternetProtocol",
					string Description = "[Client/Server] Returns the link's IP address protocol version, else InternetProtocol::Unspecified This IP address protocol will never change for the lifetime of this link",
					string ReturnType = "InternetProtocol::Enum",
					string Parameters = "(NetPeerId netPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLinkIpAddress",
					string Description = "[Client/Server] Returns the remote peer's IP address (as seen from our perspective), else IpAddress() For outgoing links this is the same IP address specified in our connect call This IP address will never change for the lifetime of this link",
					string ReturnType = "IpAddress",
					string Parameters = "(NetPeerId netPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLinkNetPeerId",
					string Description = "Returns the remote peer's unique network identifier, else 0 [Server] This will be non-zero if the client is connected, else zero [Client] This will always be zero.",
					string ReturnType = "NetPeerId",
					string Parameters = "(const IpAddress ipAddress)",
					Array ParameterList = 
					[
						{
							string Name = "ipAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLinkState",
					string Description = "[Client/Server] Returns the link's specific state, else LinkState::Unspecified",
					string ReturnType = "LinkState::Enum",
					string Parameters = "(NetPeerId netPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLinkStateDuration",
					string Description = "[Client/Server] Returns the link's specific state duration, else 0",
					string ReturnType = "TimeMs",
					string Parameters = "(NetPeerId netPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLinkStatus",
					string Description = "[Client/Server] Returns the link's overall status, else LinkStatus::Unspecified",
					string ReturnType = "LinkStatus::Enum",
					string Parameters = "(NetPeerId netPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLinks",
					string Description = "[Client/Server] Returns all connected network links",
					string ReturnType = "PeerLinkSet",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLinks",
					string Description = "[Client/Server] Returns the connected network links in the specified route",
					string ReturnType = "PeerLinkSet",
					string Parameters = "(const Route route)",
					Array ParameterList = 
					[
						{
							string Name = "route",
							string Type = "const Route",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNetObject",
					string Description = "Returns the live net object specified if it is known locally, else nullptr.",
					string ReturnType = "Cog",
					string Parameters = "(NetObjectId netObjectId)",
					Array ParameterList = 
					[
						{
							string Name = "netObjectId",
							string Type = "NetObjectId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNetObjectOfflineEventId",
					string Description = "Handles behavior when the net object is taken offline, dispatches events accordingly.",
					string ReturnType = "const string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNetObjectOnlineEventId",
					string Description = "Handles behavior when the net object is brought online, dispatches events accordingly.",
					string ReturnType = "const string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNetSpace",
					string Description = "Returns the live net space specified if it is known locally, else nullptr.",
					string ReturnType = "Space",
					string Parameters = "(NetObjectId netObjectId)",
					Array ParameterList = 
					[
						{
							string Name = "netObjectId",
							string Type = "NetObjectId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetOrAddReplicaChannelType",
					string Description = "Finds the specified net channel type or adds and configures it if it does not exist Returns the found or added net channel type with the specified name.",
					string ReturnType = "NetChannelType",
					string Parameters = "(const string netChannelTypeName, NetChannelConfig netChannelConfig)",
					Array ParameterList = 
					[
						{
							string Name = "netChannelTypeName",
							string Type = "const string",
							string Description = "",
						},
						{
							string Name = "netChannelConfig",
							string Type = "NetChannelConfig",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetOrAddReplicaPropertyType",
					string Description = "Finds the specified net property type or adds and configures it if it does not exist Returns the found or added net property type with the specified name.",
					string ReturnType = "NetPropertyType",
					string Parameters = "(const string netPropertyTypeName, MetaType metaType, SerializeValueFn serializeValueFn, GetValueFn getValueFn, SetValueFn setValueFn, NetPropertyConfig netPropertyConfig)",
					Array ParameterList = 
					[
						{
							string Name = "netPropertyTypeName",
							string Type = "const string",
							string Description = "",
						},
						{
							string Name = "metaType",
							string Type = "MetaType",
							string Description = "",
						},
						{
							string Name = "serializeValueFn",
							string Type = "SerializeValueFn",
							string Description = "",
						},
						{
							string Name = "getValueFn",
							string Type = "GetValueFn",
							string Description = "",
						},
						{
							string Name = "setValueFn",
							string Type = "SetValueFn",
							string Description = "",
						},
						{
							string Name = "netPropertyConfig",
							string Type = "NetPropertyConfig",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetOurIpAddressFromLink",
					string Description = "[Client/Server] Returns our peer's IP address (as seen from their perspective), else IpAddress() For incoming links this is the same IP address specified in their connect call (Available if the link is connected or incoming and attempting connection) It is absolutely possible that this does not match our local IP address",
					string ReturnType = "IpAddress",
					string Parameters = "(NetPeerId netPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetOurProjectGuid",
					string Description = "Returns our project's GUID.",
					string ReturnType = "uint64",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetProjectRecordsMap",
					string Description = "Gets a reference to the Project's HostRecord Map. If it doesn't exist, it creates it.",
					string ReturnType = "HostRecordsMap",
					string Parameters = "(Guidconst  projectGuid)",
					Array ParameterList = 
					[
						{
							string Name = "projectGuid",
							string Type = "Guidconst ",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetRole",
					string Description = "Returns the open peer's network role (client, server, offline), else Role::Unspecified.",
					string ReturnType = "Role::Enum",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetUser",
					string Description = "Returns the specified network user, else nullptr.",
					string ReturnType = "Cog",
					string Parameters = "(NetUserId netUserId)",
					Array ParameterList = 
					[
						{
							string Name = "netUserId",
							string Type = "NetUserId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetUsersAddedByPeer",
					string Description = "Returns the network users added by the specified peer.",
					string ReturnType = "NetUserRange",
					string Parameters = "(NetPeerId netPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleNetEventReceived",
					string Description = "Handles behavior when a received net event is dispatched.",
					string ReturnType = "void",
					string Parameters = "(Event netEvent, Cog destination, NetPeerId netPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "netEvent",
							string Type = "Event",
							string Description = "",
						},
						{
							string Name = "destination",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleNetEventSent",
					string Description = "Handles behavior when a dispatched net event is sent.",
					string ReturnType = "void",
					string Parameters = "(Event netEvent, Cog destination, NetPeerId netPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "netEvent",
							string Type = "Event",
							string Description = "",
						},
						{
							string Name = "destination",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleNetGameStarted",
					string Description = "Handles behavior when a network game is started.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleNetLevelStarted",
					string Description = "Handles behavior when a network level is started.",
					string ReturnType = "void",
					string Parameters = "(Space space)",
					Array ParameterList = 
					[
						{
							string Name = "space",
							string Type = "Space",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleNetLinkConnected",
					string Description = "Handles behavior when a net link is connected.",
					string ReturnType = "void",
					string Parameters = "(ReplicatorLink link, BitStream connectConfirmationData, TransmissionDirection::Enum direction)",
					Array ParameterList = 
					[
						{
							string Name = "link",
							string Type = "ReplicatorLink",
							string Description = "",
						},
						{
							string Name = "connectConfirmationData",
							string Type = "BitStream",
							string Description = "",
						},
						{
							string Name = "direction",
							string Type = "TransmissionDirection::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleNetLinkDisconnected",
					string Description = "Handles behavior when a net link is disconnected.",
					string ReturnType = "void",
					string Parameters = "(ReplicatorLink link, DisconnectNoticeData disconnectNoticeData, TransmissionDirection::Enum direction)",
					Array ParameterList = 
					[
						{
							string Name = "link",
							string Type = "ReplicatorLink",
							string Description = "",
						},
						{
							string Name = "disconnectNoticeData",
							string Type = "DisconnectNoticeData",
							string Description = "",
						},
						{
							string Name = "direction",
							string Type = "TransmissionDirection::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleNetPeerClosed",
					string Description = "Handles behavior before the peer is closed Returns true if successful, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleNetPeerOpened",
					string Description = "Handles behavior after the peer is opened Returns true if successful, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandlePendingRequests",
					string Description = "Handles pending net requests now.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandlePing",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(IpAddressconst  theirIpAddress, NetHostPingData netHostPingData)",
					Array ParameterList = 
					[
						{
							string Name = "theirIpAddress",
							string Type = "IpAddressconst ",
							string Description = "",
						},
						{
							string Name = "netHostPingData",
							string Type = "NetHostPingData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleReceivedUserAddRequest",
					string Description = "[Server/Offline] Handles behavior after receiving a network user add request Returns true to accept the request, else false to deny the request",
					string ReturnType = "NetUser",
					string Parameters = "(NetPeerId theirNetPeerId, const IpAddress theirIpAddress, EventBundle theirRequestBundle, EventBundle returnOurResponseBundle, NetUserId theirNetUserId)",
					Array ParameterList = 
					[
						{
							string Name = "theirNetPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
						{
							string Name = "theirIpAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
						{
							string Name = "theirRequestBundle",
							string Type = "EventBundle",
							string Description = "",
						},
						{
							string Name = "returnOurResponseBundle",
							string Type = "EventBundle",
							string Description = "",
						},
						{
							string Name = "theirNetUserId",
							string Type = "NetUserId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleReceivedUserAddResponse",
					string Description = "Handles behavior after receiving a network user add response.",
					string ReturnType = "void",
					string Parameters = "(NetPeerId theirNetPeerId, const IpAddress theirIpAddress, EventBundle ourRequestBundle, NetUserAddResponse::Enum theirAddResponse, EventBundle theirResponseBundle, NetUserId ourNetUserId)",
					Array ParameterList = 
					[
						{
							string Name = "theirNetPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
						{
							string Name = "theirIpAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
						{
							string Name = "ourRequestBundle",
							string Type = "EventBundle",
							string Description = "",
						},
						{
							string Name = "theirAddResponse",
							string Type = "NetUserAddResponse::Enum",
							string Description = "",
						},
						{
							string Name = "theirResponseBundle",
							string Type = "EventBundle",
							string Description = "",
						},
						{
							string Name = "ourNetUserId",
							string Type = "NetUserId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleSentUserAddRequest",
					string Description = "Handles behavior after sending a network user add request.",
					string ReturnType = "void",
					string Parameters = "(NetPeerId theirNetPeerId, const IpAddress theirIpAddress, EventBundle ourRequestBundle)",
					Array ParameterList = 
					[
						{
							string Name = "theirNetPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
						{
							string Name = "theirIpAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
						{
							string Name = "ourRequestBundle",
							string Type = "EventBundle",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleSentUserAddResponse",
					string Description = "[Server/Offline] Handles behavior after sending a network user add response",
					string ReturnType = "void",
					string Parameters = "(NetPeerId theirNetPeerId, const IpAddress theirIpAddress, EventBundle theirRequestBundle, NetUserAddResponse::Enum ourAddResponse, EventBundle ourResponseBundle, NetUser theirNetUser)",
					Array ParameterList = 
					[
						{
							string Name = "theirNetPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
						{
							string Name = "theirIpAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
						{
							string Name = "theirRequestBundle",
							string Type = "EventBundle",
							string Description = "",
						},
						{
							string Name = "ourAddResponse",
							string Type = "NetUserAddResponse::Enum",
							string Description = "",
						},
						{
							string Name = "ourResponseBundle",
							string Type = "EventBundle",
							string Description = "",
						},
						{
							string Name = "theirNetUser",
							string Type = "NetUser",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HasLink",
					string Description = "[Client/Server] Returns true if there is a connected network link with the specified IP address, else false",
					string ReturnType = "bool",
					string Parameters = "(const IpAddress ipAddress)",
					Array ParameterList = 
					[
						{
							string Name = "ipAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HasLink",
					string Description = "[Client/Server] Returns true if there is a connected network link with the specified peer ID, else false",
					string ReturnType = "bool",
					string Parameters = "(NetPeerId netPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HasLinks",
					string Description = "[Client/Server] Returns true if there are connected network links in the specified route, else false",
					string ReturnType = "bool",
					string Parameters = "(const Route route)",
					Array ParameterList = 
					[
						{
							string Name = "route",
							string Type = "const Route",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HasLinks",
					string Description = "[Client/Server] Returns true if there are connected network links, else false",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsOpen",
					string Description = "Returns true if the peer is open, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsSubscribedMasterServer",
					string Description = "Checks to see if the IP address is one of the clients subscribed master servers.",
					string ReturnType = "bool",
					string Parameters = "(IpAddressconst  ipAddress)",
					Array ParameterList = 
					[
						{
							string Name = "ipAddress",
							string Type = "IpAddressconst ",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MasterServerRecievePublish",
					string Description = "When a master receives a publishing from a server, it becomes stored.",
					string ReturnType = "void",
					string Parameters = "(const IpAddress theirIpAddress, EventBundle basicHostInfo, Guidconst  thierProjectGuid)",
					Array ParameterList = 
					[
						{
							string Name = "theirIpAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
						{
							string Name = "basicHostInfo",
							string Type = "EventBundle",
							string Description = "",
						},
						{
							string Name = "thierProjectGuid",
							string Type = "Guidconst ",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "Uninitializes the component (closes the peer if still open)",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnEngineUpdate",
					string Description = "Called on engine update (updates the peer)",
					string ReturnType = "void",
					string Parameters = "(UpdateEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "UpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnInvalidReplica",
					string Description = "Called before a replica is made invalid (unregistered with the replicator)",
					string ReturnType = "void",
					string Parameters = "(Replica replica, bool isForget)",
					Array ParameterList = 
					[
						{
							string Name = "replica",
							string Type = "Replica",
							string Description = "",
						},
						{
							string Name = "isForget",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnLiveReplica",
					string Description = "Called after a replica is made live (assigned a replica ID by the server replicator)",
					string ReturnType = "void",
					string Parameters = "(Replica replica)",
					Array ParameterList = 
					[
						{
							string Name = "replica",
							string Type = "Replica",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnNetLinkConnected",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(NetLinkConnected event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "NetLinkConnected",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnNetLinkDisconnected",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(NetLinkDisconnected event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "NetLinkDisconnected",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnNetPeerReceivedConnectResponse",
					string Description = "The client looks for link connect responses and handles them accordingly.",
					string ReturnType = "void",
					string Parameters = "(NetPeerReceivedConnectResponse event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "NetPeerReceivedConnectResponse",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnNetPeerSentConnectRequest",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(NetPeerSentConnectRequest event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "NetPeerSentConnectRequest",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnNetPeerSentConnectResponse",
					string Description = "When a master server receives a connection, it creates a message and sends it across the link.",
					string ReturnType = "void",
					string Parameters = "(NetPeerSentConnectResponse event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "NetPeerSentConnectResponse",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnReplicaChannelPropertyChange",
					string Description = "Called after a replica channel property has legitimately changed, determined using comparisons, in a particular replication phase.",
					string ReturnType = "void",
					string Parameters = "(TimeMs timestamp, ReplicationPhase::Enum replicationPhase, Replica replica, ReplicaChannel replicaChannel, ReplicaProperty replicaProperty, TransmissionDirection::Enum direction)",
					Array ParameterList = 
					[
						{
							string Name = "timestamp",
							string Type = "TimeMs",
							string Description = "",
						},
						{
							string Name = "replicationPhase",
							string Type = "ReplicationPhase::Enum",
							string Description = "",
						},
						{
							string Name = "replica",
							string Type = "Replica",
							string Description = "",
						},
						{
							string Name = "replicaChannel",
							string Type = "ReplicaChannel",
							string Description = "",
						},
						{
							string Name = "replicaProperty",
							string Type = "ReplicaProperty",
							string Description = "",
						},
						{
							string Name = "direction",
							string Type = "TransmissionDirection::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnValidReplica",
					string Description = "Called before a replica is made valid (registered with the replicator)",
					string ReturnType = "void",
					string Parameters = "(Replica replica)",
					Array ParameterList = 
					[
						{
							string Name = "replica",
							string Type = "Replica",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Open",
					string Description = "Opens the peer with the specified network role, port, and retry settings If the peer is opened in offline mode (Role::Offline), the API will act as a pass-through and simulate all applicable network events locally. Always succeeds. If binding is unsuccessful, the port increments and tries again for the given number of retries Specify port 0 to indicate any available port should be used Returns true if successful, else false.",
					string ReturnType = "bool",
					string Parameters = "(Role::Enum role, Integer port, Integer retries)",
					Array ParameterList = 
					[
						{
							string Name = "role",
							string Type = "Role::Enum",
							string Description = "",
						},
						{
							string Name = "port",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "retries",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Open",
					string Description = "Opens the peer with the specified network role, port, and retry settings If the peer is opened in offline mode (Role::Offline), the API will act as a pass-through and simulate all applicable network events locally. Always succeeds. If binding is unsuccessful, the port increments and tries again for the given number of retries Specify port 0 to indicate any available port should be used Returns true if successful, else false.",
					string ReturnType = "bool",
					string Parameters = "(Role::Enum role, Integer port)",
					Array ParameterList = 
					[
						{
							string Name = "role",
							string Type = "Role::Enum",
							string Description = "",
						},
						{
							string Name = "port",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Open",
					string Description = "Opens the peer with the specified network role, port, and retry settings If the peer is opened in offline mode (Role::Offline), the API will act as a pass-through and simulate all applicable network events locally. Always succeeds. If binding is unsuccessful, the port increments and tries again for the given number of retries Specify port 0 to indicate any available port should be used Returns true if successful, else false.",
					string ReturnType = "bool",
					string Parameters = "(Role::Enum role)",
					Array ParameterList = 
					[
						{
							string Name = "role",
							string Type = "Role::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OpenClient",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(Integer port, Integer retries)",
					Array ParameterList = 
					[
						{
							string Name = "port",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "retries",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OpenClient",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(Integer port)",
					Array ParameterList = 
					[
						{
							string Name = "port",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OpenClient",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OpenMasterServer",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(Integer port)",
					Array ParameterList = 
					[
						{
							string Name = "port",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OpenMasterServer",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OpenOffline",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OpenServer",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(Integer port)",
					Array ParameterList = 
					[
						{
							string Name = "port",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OpenServer",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ProcessReceivedCustomMessage",
					string Description = "Processes a custom message received by the link Return true to continue processing custom messages on this link, else false (will continue next update call)",
					string ReturnType = "bool",
					string Parameters = "(PeerLink link, Message message)",
					Array ParameterList = 
					[
						{
							string Name = "link",
							string Type = "PeerLink",
							string Description = "",
						},
						{
							string Name = "message",
							string Type = "Message",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ProcessReceivedCustomPacket",
					string Description = "Processes a custom packet received by the peer.",
					string ReturnType = "void",
					string Parameters = "(Peer peer, InPacket packet)",
					Array ParameterList = 
					[
						{
							string Name = "peer",
							string Type = "Peer",
							string Description = "",
						},
						{
							string Name = "packet",
							string Type = "InPacket",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReceiveGameLoadFinished",
					string Description = "[Client] Receives a network game load finished message Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(NetPeerId theirNetPeerId, const IpAddress theirIpAddress, const Message message)",
					Array ParameterList = 
					[
						{
							string Name = "theirNetPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
						{
							string Name = "theirIpAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
						{
							string Name = "message",
							string Type = "const Message",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReceiveGameLoadStarted",
					string Description = "[Client] Receives a network game load started message Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(NetPeerId theirNetPeerId, const IpAddress theirIpAddress, const Message message)",
					Array ParameterList = 
					[
						{
							string Name = "theirNetPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
						{
							string Name = "theirIpAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
						{
							string Name = "message",
							string Type = "const Message",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReceiveHostPublish",
					string Description = "When the master server receives a host publish message, it is handled here.",
					string ReturnType = "void",
					string Parameters = "(IpAddressconst  theirIpAddress, Message message)",
					Array ParameterList = 
					[
						{
							string Name = "theirIpAddress",
							string Type = "IpAddressconst ",
							string Description = "",
						},
						{
							string Name = "message",
							string Type = "Message",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReceiveLevelLoadFinished",
					string Description = "[Client] Receives a network level load finished message Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(NetPeerId theirNetPeerId, const IpAddress theirIpAddress, const Message message)",
					Array ParameterList = 
					[
						{
							string Name = "theirNetPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
						{
							string Name = "theirIpAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
						{
							string Name = "message",
							string Type = "const Message",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReceiveLevelLoadStarted",
					string Description = "[Client] Receives a network level load started message Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(NetPeerId theirNetPeerId, const IpAddress theirIpAddress, const Message message)",
					Array ParameterList = 
					[
						{
							string Name = "theirNetPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
						{
							string Name = "theirIpAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
						{
							string Name = "message",
							string Type = "const Message",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReceiveUserAddRequest",
					string Description = "[Server/Offline] Receives a network user add request Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(NetPeerId theirNetPeerId, const IpAddress theirIpAddress, const Message message)",
					Array ParameterList = 
					[
						{
							string Name = "theirNetPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
						{
							string Name = "theirIpAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
						{
							string Name = "message",
							string Type = "const Message",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReceiveUserAddResponse",
					string Description = "Receives a network user add response Returns true if successful, else false.",
					string ReturnType = "bool",
					string Parameters = "(NetPeerId theirNetPeerId, const IpAddress theirIpAddress, const Message message, EventBundle ourRequestBundle)",
					Array ParameterList = 
					[
						{
							string Name = "theirNetPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
						{
							string Name = "theirIpAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
						{
							string Name = "message",
							string Type = "const Message",
							string Description = "",
						},
						{
							string Name = "ourRequestBundle",
							string Type = "EventBundle",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReceiveUserRemoveRequest",
					string Description = "[Server/Offline] Receives a network user remove request Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(NetPeerId theirNetPeerId, const IpAddress theirIpAddress, const Message message)",
					Array ParameterList = 
					[
						{
							string Name = "theirNetPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
						{
							string Name = "theirIpAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
						{
							string Name = "message",
							string Type = "const Message",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RefreshHost",
					string Description = "Refreshes the specified host in the given network's host list. Allowing discovery will enable the host to be discovered if it is not an already known host. Listen to the NetHost event interface to handle the results Returns true if the host was found and the refresh successfully started, else false (the host could not be found)",
					string ReturnType = "bool",
					string Parameters = "(Network::Enum network, const IpAddress ipAddress, bool getExtraHostInfo, bool allowDiscovery, bool removeStaleHosts)",
					Array ParameterList = 
					[
						{
							string Name = "network",
							string Type = "Network::Enum",
							string Description = "",
						},
						{
							string Name = "ipAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
						{
							string Name = "getExtraHostInfo",
							string Type = "bool",
							string Description = "",
						},
						{
							string Name = "allowDiscovery",
							string Type = "bool",
							string Description = "",
						},
						{
							string Name = "removeStaleHosts",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RefreshHostList",
					string Description = "Refreshes all hosts in the given network's host list. Allowing discovery will enable new hosts to be discovered in the process of refreshing. Listen to the NetHost event interface to handle the results Returns true if the refresh was successfully started, else false.",
					string ReturnType = "bool",
					string Parameters = "(Network::Enum network, bool getExtraHostInfo, bool allowDiscovery, bool removeStaleHosts)",
					Array ParameterList = 
					[
						{
							string Name = "network",
							string Type = "Network::Enum",
							string Description = "",
						},
						{
							string Name = "getExtraHostInfo",
							string Type = "bool",
							string Description = "",
						},
						{
							string Name = "allowDiscovery",
							string Type = "bool",
							string Description = "",
						},
						{
							string Name = "removeStaleHosts",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReleaseNetUserId",
					string Description = "[Server/Offline] Releases a network user ID from the specified network user",
					string ReturnType = "void",
					string Parameters = "(NetUser user)",
					Array ParameterList = 
					[
						{
							string Name = "user",
							string Type = "NetUser",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReleaseReplicas",
					string Description = "Deletes invalid replicas (if they were originally spawned, otherwise do nothing) Gaps may be represented as null replicas Returns true if successful, else false.",
					string ReturnType = "bool",
					string Parameters = "(const ReplicaArray replicas)",
					Array ParameterList = 
					[
						{
							string Name = "replicas",
							string Type = "const ReplicaArray",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveHost",
					string Description = "Removes the specified host from the given network's host list Returns true if the host was found and removed, else false (the host could not be found)",
					string ReturnType = "bool",
					string Parameters = "(Network::Enum network, const IpAddress ipAddress)",
					Array ParameterList = 
					[
						{
							string Name = "network",
							string Type = "Network::Enum",
							string Description = "",
						},
						{
							string Name = "ipAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveHost",
					string Description = "Removes the specified host from the given network's host list Returns true if the host was found and removed, else false (the host could not be found)",
					string ReturnType = "bool",
					string Parameters = "(const IpAddress ipAddress)",
					Array ParameterList = 
					[
						{
							string Name = "ipAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveNetHostRecord",
					string Description = "Remove a NetHostRecord by Ip from a project record map. Intended to give users control over HostRecords in the master server.",
					string ReturnType = "void",
					string Parameters = "(Guidconst  projectGuid, IpAddressconst  netHostRecordIp)",
					Array ParameterList = 
					[
						{
							string Name = "projectGuid",
							string Type = "Guidconst ",
							string Description = "",
						},
						{
							string Name = "netHostRecordIp",
							string Type = "IpAddressconst ",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveNetObjectFromFamilyTree",
					string Description = "[Client/Server] Removes a non-emplaced net object (ancestor or descendant) from it's appropriate family tree, deleting the tree if it's empty These may be removed in any order! When removed the net object is actually just marked absent (pointer is cleared to null) Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(NetObject netObject)",
					Array ParameterList = 
					[
						{
							string Name = "netObject",
							string Type = "NetObject",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveUnresponsiveHosts",
					string Description = "Removes all hosts from the specified network's host list not found in the responding hosts list.",
					string ReturnType = "void",
					string Parameters = "(Network::Enum network, const ArraySet<NetHost> respondingHosts)",
					Array ParameterList = 
					[
						{
							string Name = "network",
							string Type = "Network::Enum",
							string Description = "",
						},
						{
							string Name = "respondingHosts",
							string Type = "const ArraySet<NetHost>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveUser",
					string Description = "[Server/Offline] Initiates a network user remove request to remove the specified user [Client] Initiates a network user remove request to remove the specified user added by our local peer Listen to the NetUser event interface to handle the results Returns true if the request was successfully initiated, else false",
					string ReturnType = "bool",
					string Parameters = "(Cog cog)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveUser",
					string Description = "[Server/Offline] Initiates a network user remove request to remove the specified user [Client] Initiates a network user remove request to remove the specified user added by our local peer Listen to the NetUser event interface to handle the results Returns true if the request was successfully initiated, else false",
					string ReturnType = "bool",
					string Parameters = "(Cog cog, Event requestEvent)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "requestEvent",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveUser",
					string Description = "[Server/Offline] Initiates a network user remove request to remove the specified user [Client] Initiates a network user remove request to remove the specified user added by our local peer Listen to the NetUser event interface to handle the results Returns true if the request was successfully initiated, else false",
					string ReturnType = "bool",
					string Parameters = "(Cog cog, EventBundle requestBundle)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "requestBundle",
							string Type = "EventBundle",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveUser",
					string Description = "[Server/Offline] Initiates a network user remove request to remove the specified user [Client] Initiates a network user remove request to remove the specified user added by our local peer Listen to the NetUser event interface to handle the results Returns true if the request was successfully initiated, else false",
					string ReturnType = "bool",
					string Parameters = "(NetUserId netUserId)",
					Array ParameterList = 
					[
						{
							string Name = "netUserId",
							string Type = "NetUserId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveUser",
					string Description = "[Server/Offline] Initiates a network user remove request to remove the specified user [Client] Initiates a network user remove request to remove the specified user added by our local peer Listen to the NetUser event interface to handle the results Returns true if the request was successfully initiated, else false",
					string ReturnType = "bool",
					string Parameters = "(NetUserId netUserId, Event requestEvent)",
					Array ParameterList = 
					[
						{
							string Name = "netUserId",
							string Type = "NetUserId",
							string Description = "",
						},
						{
							string Name = "requestEvent",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveUser",
					string Description = "[Server/Offline] Initiates a network user remove request to remove the specified user [Client] Initiates a network user remove request to remove the specified user added by our local peer Listen to the NetUser event interface to handle the results Returns true if the request was successfully initiated, else false",
					string ReturnType = "bool",
					string Parameters = "(NetUserId netUserId, EventBundle requestBundle)",
					Array ParameterList = 
					[
						{
							string Name = "netUserId",
							string Type = "NetUserId",
							string Description = "",
						},
						{
							string Name = "requestBundle",
							string Type = "EventBundle",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveUserInternal",
					string Description = "Removes the net user from internal lists and disallows net object ownership.",
					string ReturnType = "void",
					string Parameters = "(Cog cog)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemovingLink",
					string Description = "Called before a link is removed.",
					string ReturnType = "void",
					string Parameters = "(PeerLink link)",
					Array ParameterList = 
					[
						{
							string Name = "link",
							string Type = "PeerLink",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ResetConfig",
					string Description = "Resets all configuration settings.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendGameLoadFinished",
					string Description = "[Server] Sends a network game load finished message Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(NetPeerId theirNetPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "theirNetPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendGameLoadStarted",
					string Description = "[Server] Sends a network game load started message Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(NetPeerId theirNetPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "theirNetPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendLevelLoadFinished",
					string Description = "[Server] Sends a network level load finished message Tells the client that the level replication is now complete Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(NetPeerId theirNetPeerId, Space space)",
					Array ParameterList = 
					[
						{
							string Name = "theirNetPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
						{
							string Name = "space",
							string Type = "Space",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendLevelLoadStarted",
					string Description = "[Server] Sends a network level load started message Tells the client to start loading the specified level in the given space Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(NetPeerId theirNetPeerId, Space space, Level level)",
					Array ParameterList = 
					[
						{
							string Name = "theirNetPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
						{
							string Name = "space",
							string Type = "Space",
							string Description = "",
						},
						{
							string Name = "level",
							string Type = "Level",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendUserAddRequest",
					string Description = "Sends a network user add request Returns true if successful, else false.",
					string ReturnType = "bool",
					string Parameters = "(EventBundle ourRequestBundle)",
					Array ParameterList = 
					[
						{
							string Name = "ourRequestBundle",
							string Type = "EventBundle",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendUserAddResponse",
					string Description = "[Server/Offline] Sends a network user add response Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(NetPeerId theirNetPeerId, NetUser theirNetUser, EventBundle theirRequestBundle, EventBundle ourResponseBundle)",
					Array ParameterList = 
					[
						{
							string Name = "theirNetPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
						{
							string Name = "theirNetUser",
							string Type = "NetUser",
							string Description = "",
						},
						{
							string Name = "theirRequestBundle",
							string Type = "EventBundle",
							string Description = "",
						},
						{
							string Name = "ourResponseBundle",
							string Type = "EventBundle",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendUserRemoveRequest",
					string Description = "Sends a network user remove request Returns true if successful, else false.",
					string ReturnType = "bool",
					string Parameters = "(NetUserId netUserId, EventBundle ourRequestBundle)",
					Array ParameterList = 
					[
						{
							string Name = "netUserId",
							string Type = "NetUserId",
							string Description = "",
						},
						{
							string Name = "ourRequestBundle",
							string Type = "EventBundle",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Initializes the component.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SerializeNetEvent",
					string Description = "Serializes the net event Returns true if successful, else false.",
					string ReturnType = "bool",
					string Parameters = "(BitStreamExtended bitStream, Event netEvent, Cog destination)",
					Array ParameterList = 
					[
						{
							string Name = "bitStream",
							string Type = "BitStreamExtended",
							string Description = "",
						},
						{
							string Name = "netEvent",
							string Type = "Event",
							string Description = "",
						},
						{
							string Name = "destination",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SerializeReplicas",
					string Description = "Serializes replicas to a replica stream Gaps may be represented as null replicas and additional data may be serialized as needed Returns true if successful, else false.",
					string ReturnType = "bool",
					string Parameters = "(const ReplicaArray replicas, ReplicaStream replicaStream)",
					Array ParameterList = 
					[
						{
							string Name = "replicas",
							string Type = "const ReplicaArray",
							string Description = "",
						},
						{
							string Name = "replicaStream",
							string Type = "ReplicaStream",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ServerOnConnectConfirmation",
					string Description = "[Server] Called after receiving a connect confirmation",
					string ReturnType = "void",
					string Parameters = "(ReplicatorLink link, BitStream connectConfirmationData)",
					Array ParameterList = 
					[
						{
							string Name = "link",
							string Type = "ReplicatorLink",
							string Description = "",
						},
						{
							string Name = "connectConfirmationData",
							string Type = "BitStream",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ServerOnConnectRequest",
					string Description = "[Server] Called after receiving a connect request If accepted, their replicator ID is assigned immediately after this Return true to accept the connect request, else false",
					string ReturnType = "Pair<bool,BitStream>",
					string Parameters = "(ReplicatorLink link, ConnectRequestData connectRequestData)",
					Array ParameterList = 
					[
						{
							string Name = "link",
							string Type = "ReplicatorLink",
							string Description = "",
						},
						{
							string Name = "connectRequestData",
							string Type = "ConnectRequestData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ServerOnConnectResponse",
					string Description = "[Server] Called after sending a connect response If denied, their replicator ID is released and link is destroyed immediately after this",
					string ReturnType = "void",
					string Parameters = "(ReplicatorLink link, ConnectResponseData connectResponseData)",
					Array ParameterList = 
					[
						{
							string Name = "link",
							string Type = "ReplicatorLink",
							string Description = "",
						},
						{
							string Name = "connectResponseData",
							string Type = "ConnectResponseData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ServerOnDisconnectNotice",
					string Description = "[Server] Called after sending or receiving a disconnect notice Their replicator ID is released and link is destroyed immediately after this",
					string ReturnType = "void",
					string Parameters = "(ReplicatorLink link, DisconnectNoticeData disconnectNoticeData, TransmissionDirection::Enum direction)",
					Array ParameterList = 
					[
						{
							string Name = "link",
							string Type = "ReplicatorLink",
							string Description = "",
						},
						{
							string Name = "disconnectNoticeData",
							string Type = "DisconnectNoticeData",
							string Description = "",
						},
						{
							string Name = "direction",
							string Type = "TransmissionDirection::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetActiveReplicaStream",
					string Description = "[Client] Sets the active replica stream used while creating a net object hierarchy",
					string ReturnType = "void",
					string Parameters = "(const ReplicaStream replicaStream)",
					Array ParameterList = 
					[
						{
							string Name = "replicaStream",
							string Type = "const ReplicaStream",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetFacilitateInternetConnections",
					string Description = "Configures the peer to use connection facilitation (NAT punchthrough) when establishing a connection over the internet (Requires master server subscriptions)",
					string ReturnType = "void",
					string Parameters = "(bool facilitateInternetConnections)",
					Array ParameterList = 
					[
						{
							string Name = "facilitateInternetConnections",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SpawnFamilyTree",
					string Description = "[Server] Spawns all present, invalid net objects in the family tree locally and remotely along the route Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(FamilyTreeId familyTreeId, const Route route)",
					Array ParameterList = 
					[
						{
							string Name = "familyTreeId",
							string Type = "FamilyTreeId",
							string Description = "",
						},
						{
							string Name = "route",
							string Type = "const Route",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SpawnNetObject",
					string Description = "[Server] Spawns the invalid net object locally and remotely along the route Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "(Cog cog, const Route route)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "route",
							string Type = "const Route",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SubscribeToMasterServer",
					string Description = "Subscribes to the master server located at the specified IP address All internet host discovery, record publishing, connection facilitation (NAT punchthrough) requests are performed on these master server subscriptions in the order they were subscribed.",
					string ReturnType = "void",
					string Parameters = "(const IpAddress ipAddress)",
					Array ParameterList = 
					[
						{
							string Name = "ipAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TryMasterServerConnection",
					string Description = "Internal helper: Clients will try to connect to master servers in succession using this function.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UnsubscribeFromMasterServer",
					string Description = "Unsubscribes from the master server located at the specified IP address (if subscribed)",
					string ReturnType = "void",
					string Parameters = "(const IpAddress ipAddress)",
					Array ParameterList = 
					[
						{
							string Name = "ipAddress",
							string Type = "const IpAddress",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateHostRecords",
					string Description = "Increases lifetime of server records, removes old server records.",
					string ReturnType = "void",
					string Parameters = "(UpdateEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "UpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdatePublishInterval",
					string Description = "On servers that are internet discoverable, it will send out a host data to all its subscribed master servers on a periodic interval.",
					string ReturnType = "void",
					string Parameters = "(UpdateEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "UpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ValidateNetEvent",
					string Description = "Validates the net event Returns true if successful, else false.",
					string ReturnType = "bool",
					string Parameters = "(StringParam netEventId, Event netEvent, TransmissionDirection::Enum direction)",
					Array ParameterList = 
					[
						{
							string Name = "netEventId",
							string Type = "StringParam",
							string Description = "",
						},
						{
							string Name = "netEvent",
							string Type = "Event",
							string Description = "",
						},
						{
							string Name = "direction",
							string Type = "TransmissionDirection::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "RegisterCppNetProperties",
			string BaseClass = "",
			string Description = "Dispatched while adding C++ component net properties to a NetObject .",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ParticleEmitter",
			string BaseClass = "Component",
			string Description = "Particle emitters add new particles to the system and control where the particles will appear (sphere emitter, mesh emitter, etc)",
			Array Tags = 
			[
				"Particle",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "GraphicsSpace",
					string Type = "GraphicsSpace",
					string Description = "",
				},
				{
					string Name = "LastFramePosition",
					string Type = "Vec3",
					string Description = "",
				},
				{
					string Name = "Transform",
					string Type = "Transform",
					string Description = "",
				},
				{
					string Name = "link",
					string Type = "Link<ParticleEmitter>",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "EmitParticles",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(ParticleList particleList, Real dt, Mat4Ref transform, Vec3 velocity)",
					Array ParameterList = 
					[
						{
							string Name = "particleList",
							string Type = "ParticleList",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "transform",
							string Type = "Mat4Ref",
							string Description = "",
						},
						{
							string Name = "velocity",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateLastTranslation",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetObjectOffline",
			string BaseClass = "",
			string Description = "Dispatched before the net object is taken offline.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "GameSession",
					string Type = "GameSession",
					string Description = "",
				},
				{
					string Name = "IsEndOfLifespan",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Object",
					string Type = "Cog",
					string Description = "",
				},
				{
					string Name = "Space",
					string Type = "Space",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "KeyboardTextEvent",
			string BaseClass = "",
			string Description = "",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Character",
					string Type = "Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "BuilderEdge",
			string BaseClass = "BuilderElement",
			string Description = "",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EndPos",
					string Type = "BuilderVertex",
					string Description = "",
				},
				{
					string Name = "Face",
					string Type = "BuilderFace",
					string Description = "",
				},
				{
					string Name = "HalfEdgeLink",
					string Type = "Link<BuilderEdge>",
					string Description = "",
				},
				{
					string Name = "Next",
					string Type = "BuilderEdge",
					string Description = "",
				},
				{
					string Name = "Opposite",
					string Type = "BuilderEdge",
					string Description = "",
				},
				{
					string Name = "Proxy",
					string Type = "BroadPhaseProxy",
					string Description = "",
				},
				{
					string Name = "userData",
					string Type = "void",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "DrawDebug",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(unsigned space, Transform transform)",
					Array ParameterList = 
					[
						{
							string Name = "space",
							string Type = "unsigned",
							string Description = "",
						},
						{
							string Name = "transform",
							string Type = "Transform",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DrawSelected",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(unsigned space, Transform transform)",
					Array ParameterList = 
					[
						{
							string Name = "space",
							string Type = "unsigned",
							string Description = "",
						},
						{
							string Name = "transform",
							string Type = "Transform",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetValence",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Array<BuilderEdge> vOut)",
					Array ParameterList = 
					[
						{
							string Name = "vOut",
							string Type = "Array<BuilderEdge>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IntersectAdjacency",
					string Description = "",
					string ReturnType = "BuilderElement",
					string Parameters = "(Ray localRay)",
					Array ParameterList = 
					[
						{
							string Name = "localRay",
							string Type = "Ray",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Position",
					string Description = "",
					string ReturnType = "Vector3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Scale",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HEScaleOperation op)",
					Array ParameterList = 
					[
						{
							string Name = "op",
							string Type = "HEScaleOperation",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ScaleSoft",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HEScaleOperation op)",
					Array ParameterList = 
					[
						{
							string Name = "op",
							string Type = "HEScaleOperation",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Translate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HETranslationOperation op)",
					Array ParameterList = 
					[
						{
							string Name = "op",
							string Type = "HETranslationOperation",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TranslateSoft",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HETranslationOperation op)",
					Array ParameterList = 
					[
						{
							string Name = "op",
							string Type = "HETranslationOperation",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "HeightMapSource",
			string BaseClass = "Resource",
			string Description = "HeightMapSource stores data needed for height maps. Data is stored on PatchData which are indexed by x,y. Each PatchData stores layers that represent different data. The primary layer is height and paint values but additional layers can be added to store data like foliage or custom game data.",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "Data",
					string Type = "HashMap<PatchIndex,PatchData>",
					string Description = "",
				},
				{
					string Name = "Version",
					string Type = "Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "GetLayerData",
					string Description = "",
					string ReturnType = "PatchLayer",
					string Parameters = "(PatchIndex index, Integer layerIndex)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "PatchIndex",
							string Description = "",
						},
						{
							string Name = "layerIndex",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetPatchData",
					string Description = "",
					string ReturnType = "PatchData",
					string Parameters = "(PatchIndex index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "PatchIndex",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemovePatch",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(PatchIndex index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "PatchIndex",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Save",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(string filename)",
					Array ParameterList = 
					[
						{
							string Name = "filename",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "GeneratedSound",
			string BaseClass = "DataResource",
			string Description = "",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "Length",
					string Type = "Real",
					string Description = "The length in seconds of the generated sound wave.",
				},
				{
					string Name = "WaveFrequency",
					string Type = "Real",
					string Description = "The frequency of the generated sound wave.",
				},
				{
					string Name = "WaveType",
					string Type = "Integer",
					string Description = "The type of wave used to create the sound.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "CreateAsset",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReleaseAsset",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendAudioEvent",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Audio::AudioEventType eventType)",
					Array ParameterList = 
					[
						{
							string Name = "eventType",
							string Type = "Audio::AudioEventType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ObjectLinkPointChangedEvent",
			string BaseClass = "",
			string Description = "",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "EdgeId",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "NewLocalPoint",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "OldLocalPoint",
					string Type = "Real3",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Set",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer edgeIndex, Vec3 oldPoint, Vec3 newPoint)",
					Array ParameterList = 
					[
						{
							string Name = "edgeIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "oldPoint",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "newPoint",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "CustomPhysicsEffect",
			string BaseClass = "PhysicsEffect",
			string Description = "A physics effect that sends events out so users can apply custom logic for forces. This sends out the ApplyCustomPhysicsEffect event.",
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
			Array Properties = 
			[
			],
			Array Methods = 
			[
				{
					string Name = "ApplyEffect",
					string Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force).",
					string ReturnType = "void",
					string Parameters = "(RigidBody obj, real dt)",
					Array ParameterList = 
					[
						{
							string Name = "obj",
							string Type = "RigidBody",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PreCalculate",
					string Description = "Some values can be pre-calculated once per frame instead of per body/object (local to world space directions, etc...)",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LightningFragment",
			string BaseClass = "DocumentResource",
			string Description = "Lightning script file Resource .",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "Inspector",
					string Type = "LightningFragmentCodeInspector",
					string Description = "The library used to compile just this file (for now all lightning fragments are isolated since they can't reference each other)",
				},
				{
					string Name = "Text",
					string Type = "string",
					string Description = "The contents of the fragment.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "GetCodeInspector",
					string Description = "Gets a code inspector which is used for code completion and other code editing features.",
					string ReturnType = "ICodeInspector",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetFormat",
					string Description = "What syntax editor is used for this text.",
					string ReturnType = "string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "LoadTextData",
					string Description = "Get all the text.",
					string ReturnType = "StringRange",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReloadData",
					string Description = "Save the text.",
					string ReturnType = "void",
					string Parameters = "(StringRange data)",
					Array ParameterList = 
					[
						{
							string Name = "data",
							string Type = "StringRange",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetObject",
			string BaseClass = "Component",
			string Description = "Network Object Manages the replication of a single object on the network.",
			Array Tags = 
			[
				"Networking",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "AcceptIncomingChanges",
					string Type = "Boolean",
					string Description = "Controls whether or not net channels on this net object may accept incoming changes.",
				},
				{
					string Name = "AccurateTimestampOnChange",
					string Type = "Boolean",
					string Description = "Controls whether or not the net object will serialize an accurate timestamp value when changed (on any net channel), or will instead accept an estimated timestamp value (Enabling this will override the corresponding net channel type setting for all net channels added to this net object)",
				},
				{
					string Name = "AccurateTimestampOnOffline",
					string Type = "Boolean",
					string Description = "Controls whether or not the net object will serialize an accurate timestamp value when taken offline, or will instead accept an estimated timestamp value.",
				},
				{
					string Name = "AccurateTimestampOnOnline",
					string Type = "Boolean",
					string Description = "Controls whether or not the net object will serialize an accurate timestamp value when brought online, or will instead accept an estimated timestamp value.",
				},
				{
					string Name = "AllowNapping",
					string Type = "Boolean",
					string Description = "Controls whether or not net channels on this net object may nap (perform change detection on longer intervals) if they haven't changed in a while.",
				},
				{
					string Name = "AutomaticChannel",
					string Type = "NetChannelConfig",
					string Description = "Returns the automatic net channel configuration resource (assigned to net properties unless another channel is specified)",
				},
				{
					string Name = "DetectOutgoingChanges",
					string Type = "Boolean",
					string Description = "Controls whether or not net channels on this net object may detect outgoing changes.",
				},
				{
					string Name = "IsClient",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "IsClientAndMine",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "IsClientButNotMine",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "IsClientOrOffline",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "IsClientOrServer",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "IsMine",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "IsNapping",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "IsNotMine",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "IsNotOwnedByAUser",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "IsOffline",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "IsOfflineAndMine",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "IsOfflineButNotMine",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "IsOnline",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "IsOwnedByAUser",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "IsServer",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "IsServerAndMine",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "IsServerButNotMine",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "IsServerOrOffline",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "LastChangeTimePassed",
					string Type = "Real",
					string Description = "Elapsed time passed since this net object was last changed, else 0.",
				},
				{
					string Name = "LastChangeTimestamp",
					string Type = "Real",
					string Description = "Timestamp indicating when this net object was last changed, else 0.",
				},
				{
					string Name = "NetObjectId",
					string Type = "Integer",
					string Description = "Returns the net object ID (set if the net object is live), else 0.",
				},
				{
					string Name = "NetUserOwner",
					string Type = "Cog",
					string Description = "Returns the network user this object conceptually belongs to, else nullptr.",
				},
				{
					string Name = "NetUserOwnerPeerId",
					string Type = "Integer",
					string Description = "Returns the network peer identifier of the peer who added the user this object conceptually belongs to, else 0.",
				},
				{
					string Name = "NetUserOwnerUserId",
					string Type = "Integer",
					string Description = "Returns the network user identifier of the user this object conceptually belongs to, else 0.",
				},
				{
					string Name = "OfflineTimePassed",
					string Type = "Real",
					string Description = "Elapsed time passed since this net object was taken offline, else 0.",
				},
				{
					string Name = "OfflineTimestamp",
					string Type = "Real",
					string Description = "Timestamp indicating when this net object was taken offline, else 0.",
				},
				{
					string Name = "OnlineTimePassed",
					string Type = "Real",
					string Description = "Elapsed time passed since this net object was brought online, else 0.",
				},
				{
					string Name = "OnlineTimestamp",
					string Type = "Real",
					string Description = "Timestamp indicating when this net object was brought online, else 0.",
				},
				{
					string Name = "Role",
					string Type = "NetRole",
					string Description = "Returns our open peer's network role (client, server, offline), else Role::Unspecified.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddConfiguredNetProperties",
					string Description = "Adds configured (property grid) component net properties to this net object.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddCppNetProperties",
					string Description = "Adds C++ component net properties to this net object.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddDownFamilyTree",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(NetObject ancestor)",
					Array ParameterList = 
					[
						{
							string Name = "ancestor",
							string Type = "NetObject",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddNetChannel",
					string Description = "[Client/Server] Adds the net channel (Cannot be modified after net object component initialization) (Must not differ between client/server peers!) Returns the net channel if successful, else nullptr (a net channel of that name already exists)",
					string ReturnType = "NetChannel",
					string Parameters = "(const string netChannelName, NetChannelConfig netChannelConfig)",
					Array ParameterList = 
					[
						{
							string Name = "netChannelName",
							string Type = "const string",
							string Description = "",
						},
						{
							string Name = "netChannelConfig",
							string Type = "NetChannelConfig",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddNetChannelAuthorityNetProperties",
					string Description = "Adds net channel authority net properties to this net object.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddNetPropertyInfo",
					string Description = "Adds a net property info Must specify a supported property by name defined in the given component Returns the added net property info, else nullptr.",
					string ReturnType = "NetPropertyInfo",
					string Parameters = "(MetaType componentType, StringParam propertyName)",
					Array ParameterList = 
					[
						{
							string Name = "componentType",
							string Type = "MetaType",
							string Description = "",
						},
						{
							string Name = "propertyName",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddNetPropertyToChannel",
					string Description = "[Client/Server] Adds the net property to the specified net channel (will be added if it does not already exist) (Cannot be modified after net object component initialization) (Must not differ between client/server peers!) Returns true if successful, else false (a net property of that name already exists on the specified net channel)",
					string ReturnType = "bool",
					string Parameters = "(Component component, MetaProperty metaProperty, NetPropertyConfig netPropertyConfig, NetChannelConfig netChannelConfig)",
					Array ParameterList = 
					[
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
						{
							string Name = "metaProperty",
							string Type = "MetaProperty",
							string Description = "",
						},
						{
							string Name = "netPropertyConfig",
							string Type = "NetPropertyConfig",
							string Description = "",
						},
						{
							string Name = "netChannelConfig",
							string Type = "NetChannelConfig",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddNetPropertyToChannel",
					string Description = "[Client/Server] Adds the net property to the specified net channel (will be added if it does not already exist) (Cannot be modified after net object component initialization) (Must not differ between client/server peers!) Returns true if successful, else false (a net property of that name already exists on the specified net channel)",
					string ReturnType = "bool",
					string Parameters = "(Component component, MetaProperty metaProperty, const string netPropertyTypeName, NetPropertyConfig netPropertyConfig, const string netChannelName, NetChannelConfig netChannelConfig)",
					Array ParameterList = 
					[
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
						{
							string Name = "metaProperty",
							string Type = "MetaProperty",
							string Description = "",
						},
						{
							string Name = "netPropertyTypeName",
							string Type = "const string",
							string Description = "",
						},
						{
							string Name = "netPropertyConfig",
							string Type = "NetPropertyConfig",
							string Description = "",
						},
						{
							string Name = "netChannelName",
							string Type = "const string",
							string Description = "",
						},
						{
							string Name = "netChannelConfig",
							string Type = "NetChannelConfig",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddScriptNetProperties",
					string Description = "Adds script component net properties to this net object.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "BringNetObjectOnline",
					string Description = "Brings the net object online (may be frame-delayed depending on role) Appropriately calls Emplace/Spawn/Emplace-Clone and HandleNetObjectOnline depending on role.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ClearNetChannels",
					string Description = "[Client/Server] Removes all net channels (Cannot be modified after net object component initialization) (Must not differ between client/server peers!)",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DispatchBroadcast",
					string Description = "Dispatches the net event on the net object for all remote peers In Offline mode, this calls DispatchLocal only.",
					string ReturnType = "void",
					string Parameters = "(StringParam eventId, Event event)",
					Array ParameterList = 
					[
						{
							string Name = "eventId",
							string Type = "StringParam",
							string Description = "",
						},
						{
							string Name = "event",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DispatchLocal",
					string Description = "Dispatches the net event on the net object for the local peer.",
					string ReturnType = "void",
					string Parameters = "(StringParam eventId, Event event)",
					Array ParameterList = 
					[
						{
							string Name = "eventId",
							string Type = "StringParam",
							string Description = "",
						},
						{
							string Name = "event",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DispatchLocalAndBroadcast",
					string Description = "Dispatches the net event on the net object for the local peer and for all remote peers In Offline mode, this calls DispatchLocal only.",
					string ReturnType = "void",
					string Parameters = "(StringParam eventId, Event event)",
					Array ParameterList = 
					[
						{
							string Name = "eventId",
							string Type = "StringParam",
							string Description = "",
						},
						{
							string Name = "event",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DispatchLocalAndRemote",
					string Description = "Dispatches the net event on the net object for the local peer and for the remote peer In Offline mode, this calls DispatchLocal only.",
					string ReturnType = "void",
					string Parameters = "(StringParam eventId, Event event, NetPeerId netPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "eventId",
							string Type = "StringParam",
							string Description = "",
						},
						{
							string Name = "event",
							string Type = "Event",
							string Description = "",
						},
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DispatchRemote",
					string Description = "Dispatches the net event on the net object for the remote peer In Offline mode, this calls DispatchLocal only.",
					string ReturnType = "void",
					string Parameters = "(StringParam eventId, Event event, NetPeerId netPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "eventId",
							string Type = "StringParam",
							string Description = "",
						},
						{
							string Name = "event",
							string Type = "Event",
							string Description = "",
						},
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DoesThisNetPropertyAlreadyBelongToAChannel",
					string Description = "[Client/Server] Returns true if the specified net property already belongs to a net channel, else false",
					string ReturnType = "bool",
					string Parameters = "(Component component, StringParam propertyName)",
					Array ParameterList = 
					[
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
						{
							string Name = "propertyName",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Forget",
					string Description = "[Client] Forgets the online net object locally [Server] Forgets the online net object locally and remotely for all relevant peers Effectively removes the net object from the network system without destroying it Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetFamilyTreeId",
					string Description = "(Only applies to non-emplaced net objects) [Client/Server] Returns the family tree ID this net object belongs to (either as an ancestor or descendant), else 0",
					string ReturnType = "FamilyTreeId",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetInitializationLevelResourceIdName",
					string Description = "Returns the initialization level resource ID name (if created as part of a level initialization), else String()",
					string ReturnType = "const string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNetChannel",
					string Description = "[Client/Server] Returns the specified net channel, else nullptr",
					string ReturnType = "NetChannel",
					string Parameters = "(const string netChannelName)",
					Array ParameterList = 
					[
						{
							string Name = "netChannelName",
							string Type = "const string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNetObjectOfflineEventId",
					string Description = "",
					string ReturnType = "const string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNetObjectOnlineEventId",
					string Description = "",
					string ReturnType = "const string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNetPeer",
					string Description = "Returns the operating net peer (which may or may not be this net object)",
					string ReturnType = "NetPeer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNetPropertyInfo",
					string Description = "Returns the net property info if it has been added, else nullptr.",
					string ReturnType = "NetPropertyInfo",
					string Parameters = "(MetaType componentType, StringParam propertyName)",
					Array ParameterList = 
					[
						{
							string Name = "componentType",
							string Type = "MetaType",
							string Description = "",
						},
						{
							string Name = "propertyName",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNetSpace",
					string Description = "Returns the operating net space (which may or may not be this net object)",
					string ReturnType = "NetSpace",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleNetObjectOffline",
					string Description = "Handles behavior when the net object is taken offline, dispatches events accordingly.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleNetObjectOfflinePostDispatch",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(NetObjectOffline event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "NetObjectOffline",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleNetObjectOnline",
					string Description = "Handles behavior when the net object is brought online, dispatches events accordingly.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleNetObjectOnlinePreDispatch",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(NetObjectOnline event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "NetObjectOnline",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleNetUserOwnerChanged",
					string Description = "Handles a change in network ownership, dispatches events accordingly.",
					string ReturnType = "void",
					string Parameters = "(NetUserId previousNetUserOwnerUserId)",
					Array ParameterList = 
					[
						{
							string Name = "previousNetUserOwnerUserId",
							string Type = "NetUserId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HasNetChannel",
					string Description = "[Client/Server] Returns true if the net object has the specified net channel, else false",
					string ReturnType = "bool",
					string Parameters = "(const string netChannelName)",
					Array ParameterList = 
					[
						{
							string Name = "netChannelName",
							string Type = "const string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HasNetPropertyInfo",
					string Description = "Returns true if the specified net property info has been added, else false.",
					string ReturnType = "bool",
					string Parameters = "(MetaType componentType, StringParam propertyName)",
					Array ParameterList = 
					[
						{
							string Name = "componentType",
							string Type = "MetaType",
							string Description = "",
						},
						{
							string Name = "propertyName",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeCreateContext",
					string Description = "Sets the create context (space net object ID)",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeFamilyTree",
					string Description = "[Client/Server] Creates the complete family tree representing this net object as the ancestor and all of it's net object children recursively as descendants",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeIsAncestor",
					string Description = "Sets the is-ancestor flag (only applies to non-emplaced net objects)",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeReplicaType",
					string Description = "Sets the replica type (archetype resource ID)",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsAncestor",
					string Description = "(Only applies to non-emplaced net objects) Returns true if the net object is an ancestor (original network object archetype hierarchy root), else false",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsClient",
					string Description = "Returns true if our open peer's network role is client, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsClientAndMine",
					string Description = "Returns true if our open peer's network role is client and the net object is conceptually owned by a user added by our local peer, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsClientButNotMine",
					string Description = "Returns true if our open peer's network role is client and the net object is not conceptually owned by a user added by our local peer, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsClientOrOffline",
					string Description = "Returns true if our open peer's network role is client or offline, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsClientOrServer",
					string Description = "Returns true if our open peer's network role is client or server, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsDescendant",
					string Description = "(Only applies to non-emplaced net objects) Returns true if the net object is a descendant (original network object archetype hierarchy child), else false",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsInvalid",
					string Description = "Returns true if the net object is invalid, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsLive",
					string Description = "Returns true if the net object is live, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsMine",
					string Description = "Returns true if the net object is conceptually owned by a user added by our local peer, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsNapping",
					string Description = "Returns true if all net channels on this net object are napping (performing change detection on longer intervals), else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsNetPeer",
					string Description = "Returns true if the net object is a net peer, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsNetSpace",
					string Description = "Returns true if the net object is a net space, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsNetUser",
					string Description = "Returns true if the net object is a net user, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsNotMine",
					string Description = "Returns true if the net object is not conceptually owned by a user added by our local peer, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsNotOwnedByAUser",
					string Description = "Returns true if the net object is not conceptually owned by a user, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsOffline",
					string Description = "Returns true if our open peer's network role is offline, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsOfflineAndMine",
					string Description = "Returns true if our open peer's network role is offline and the net object is conceptually owned by a user added by our local peer, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsOfflineButNotMine",
					string Description = "Returns true if our open peer's network role is offline and the net object is not conceptually owned by a user added by our local peer, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsOnline",
					string Description = "Returns true if the net object is online, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsOwnedByAUser",
					string Description = "Returns true if the net object is conceptually owned by a user, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsOwnedByPeer",
					string Description = "Returns true if the net object is conceptually owned by a user added by the specified peer, else false.",
					string ReturnType = "bool",
					string Parameters = "(NetPeerId netPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsOwnedByUser",
					string Description = "Returns true if the net object is conceptually owned by the specified user, else false.",
					string ReturnType = "bool",
					string Parameters = "(Cog cog)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsOwnedByUserId",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(NetUserId netUserId)",
					Array ParameterList = 
					[
						{
							string Name = "netUserId",
							string Type = "NetUserId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsServer",
					string Description = "Returns true if our open peer's network role is server, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsServerAndMine",
					string Description = "Returns true if our open peer's network role is server and the net object is conceptually owned by a user added by our local peer, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsServerButNotMine",
					string Description = "Returns true if our open peer's network role is server and the net object is not conceptually owned by a user added by our local peer, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsServerOrOffline",
					string Description = "Returns true if our open peer's network role is server or offline, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsValid",
					string Description = "Returns true if the net object is valid, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAllObjectsCreated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAttached",
					string Description = "Called when attached to another object.",
					string ReturnType = "void",
					string Parameters = "(HierarchyEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "HierarchyEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "Uninitializes the component.",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDetached",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HierarchyEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "HierarchyEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnRegisterCppNetProperties",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(RegisterCppNetProperties event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "RegisterCppNetProperties",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReadChannelData",
					string Description = "Reads channel data (such as forward and reverse ReplicaChannels) from the replica stream.",
					string ReturnType = "void",
					string Parameters = "(const ReplicaStream replicaStream)",
					Array ParameterList = 
					[
						{
							string Name = "replicaStream",
							string Type = "const ReplicaStream",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReadIdentificationInfo",
					string Description = "Reads identification information (such as IsAbsent, ReplicaId, IsCloned, IsEmplaced, EmplaceContext, and EmplaceId) from the replica stream.",
					string ReturnType = "void",
					string Parameters = "(const ReplicaStream replicaStream, bool isAbsent)",
					Array ParameterList = 
					[
						{
							string Name = "replicaStream",
							string Type = "const ReplicaStream",
							string Description = "",
						},
						{
							string Name = "isAbsent",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveNetChannel",
					string Description = "[Client/Server] Removes the specified net channel (Cannot be modified after net object component initialization) (Must not differ between client/server peers!) Returns true if successful, else false (a net channel of that name could not be found)",
					string ReturnType = "bool",
					string Parameters = "(const string netChannelName)",
					Array ParameterList = 
					[
						{
							string Name = "netChannelName",
							string Type = "const string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveNetPropertyInfo",
					string Description = "Removes a net property info if it was added.",
					string ReturnType = "void",
					string Parameters = "(MetaType componentType, StringParam propertyName)",
					Array ParameterList = 
					[
						{
							string Name = "componentType",
							string Type = "MetaType",
							string Description = "",
						},
						{
							string Name = "propertyName",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReplicateNow",
					string Description = "[Client/Server] Replicates all net channels' property changes immediately (only where changes are detected) Will also update nap state as configured Returns true if changes were replicated, else false",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ResetConfig",
					string Description = "Resets all configuration settings.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SelectRemote",
					string Description = "[Client/Server] Selects the remote net object on the first opposite-role peer found running in another game session instance on the engine Will fail if the net object is not online, or not found remotely Returns true if successful, else false",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Initializes the component.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetFamilyTreeId",
					string Description = "(Only applies to non-emplaced net objects) [Client/Server] Sets the family tree ID this net object belongs to (either as an ancestor or descendant)",
					string ReturnType = "void",
					string Parameters = "(FamilyTreeId familyTreeId)",
					Array ParameterList = 
					[
						{
							string Name = "familyTreeId",
							string Type = "FamilyTreeId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetInitializationLevelResourceIdName",
					string Description = "Sets the initialization level resource ID name.",
					string ReturnType = "void",
					string Parameters = "(const string initLevelResourceIdName)",
					Array ParameterList = 
					[
						{
							string Name = "initLevelResourceIdName",
							string Type = "const string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetNetUserOwnerDown",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Cog cog)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetNetUserOwnerDownById",
					string Description = "[Server/Offline] Sets the owning network user on this object and down the tree on all children recursively (pre-order traversal)",
					string ReturnType = "void",
					string Parameters = "(NetUserId netUserId)",
					Array ParameterList = 
					[
						{
							string Name = "netUserId",
							string Type = "NetUserId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetNetUserOwnerUp",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Cog cog)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetNetUserOwnerUpById",
					string Description = "[Server/Offline] Sets the owning network user on this object and up the tree on each parent recursively (pre-order traversal)",
					string ReturnType = "void",
					string Parameters = "(NetUserId netUserId)",
					Array ParameterList = 
					[
						{
							string Name = "netUserId",
							string Type = "NetUserId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TakeNap",
					string Description = "Forces all net channels on this net object to start napping immediately.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TakeNetObjectOffline",
					string Description = "Takes the net object offline (but is not responsible for destroying the cog itself locally) Appropriately calls Forget/Destroy and HandleNetObjectOffline depending on role.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WakeUp",
					string Description = "Forces all net channels on this net object to stop napping immediately.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WasCogInitialized",
					string Description = "Returns true if the net object was created as part of a cog initialization (not a level initialization), else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WasLevelInitialized",
					string Description = "Returns true if the net object was created as part of a level initialization, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "SimpleAnimation",
			string BaseClass = "Component",
			string Description = "Plays a single animation on Initialize.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Animation",
					string Type = "Animation",
					string Description = "Animation getter/setter.",
				},
				{
					string Name = "PlayMode",
					string Type = "AnimPlayMode",
					string Description = "Play mode getter/setter.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ChainAnimation",
					string Description = "",
					string ReturnType = "AnimationNode",
					string Parameters = "(Animation animation, AnimPlayMode::Enum playMode)",
					Array ParameterList = 
					[
						{
							string Name = "animation",
							string Type = "Animation",
							string Description = "",
						},
						{
							string Name = "playMode",
							string Type = "AnimPlayMode::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CrossBlend",
					string Description = "",
					string ReturnType = "AnimationNode",
					string Parameters = "(Animation animation, Real transitionTime, AnimPlayMode::Enum playMode)",
					Array ParameterList = 
					[
						{
							string Name = "animation",
							string Type = "Animation",
							string Description = "",
						},
						{
							string Name = "transitionTime",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "playMode",
							string Type = "AnimPlayMode::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DirectBlend",
					string Description = "",
					string ReturnType = "AnimationNode",
					string Parameters = "(Animation animation, Real transitionTime, AnimPlayMode::Enum playMode)",
					Array ParameterList = 
					[
						{
							string Name = "animation",
							string Type = "Animation",
							string Description = "",
						},
						{
							string Name = "transitionTime",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "playMode",
							string Type = "AnimPlayMode::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PlayIsolatedAnimation",
					string Description = "",
					string ReturnType = "AnimationNode",
					string Parameters = "(Animation animation, Cog rootBone, AnimPlayMode::Enum playMode)",
					Array ParameterList = 
					[
						{
							string Name = "animation",
							string Type = "Animation",
							string Description = "",
						},
						{
							string Name = "rootBone",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "playMode",
							string Type = "AnimPlayMode::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PlaySingle",
					string Description = "Play animations directly.",
					string ReturnType = "AnimationNode",
					string Parameters = "(Animation animation, AnimPlayMode::Enum playMode)",
					Array ParameterList = 
					[
						{
							string Name = "animation",
							string Type = "Animation",
							string Description = "",
						},
						{
							string Name = "playMode",
							string Type = "AnimPlayMode::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetUserAcquiredObjectOwnership",
			string BaseClass = "",
			string Description = "Dispatched after the net user acquires network ownership of a net object.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "AcquiredObject",
					string Type = "Cog",
					string Description = "",
				},
				{
					string Name = "PreviousNetUserOwner",
					string Type = "Cog",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "GearJoint",
			string BaseClass = "Joint",
			string Description = "A gear connects two joints on two objects together. Either joint can be a prismatic or a revolute. A gear ratio is used to bind the two joints together. Limits, motors and springs should most likely not be used on this.",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "Constant",
					string Type = "Real",
					string Description = "The initial offset of the gear ratio.",
				},
				{
					string Name = "JointA",
					string Type = "Cog",
					string Description = "",
				},
				{
					string Name = "JointAPath",
					string Type = "CogPath",
					string Description = "",
				},
				{
					string Name = "JointB",
					string Type = "Cog",
					string Description = "",
				},
				{
					string Name = "JointBPath",
					string Type = "CogPath",
					string Description = "",
				},
				{
					string Name = "Ratio",
					string Type = "Real",
					string Description = "The gear ratio that the two constraints are bound with.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "BatchEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Commit",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMoleculeData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeData moleculeData)",
					Array ParameterList = 
					[
						{
							string Name = "moleculeData",
							string Type = "MoleculeData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePositionMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindAndSetJoint",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(Collider collider, Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "collider",
							string Type = "Collider",
							string Description = "",
						},
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAtomIndexFilter",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Integer atomIndex, real desiredConstraintValue)",
					Array ParameterList = 
					[
						{
							string Name = "atomIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "desiredConstraintValue",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultLimitIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultMotorIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultSpringIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetValidJointOnCog",
					string Description = "",
					string ReturnType = "Joint",
					string Parameters = "(Cog cog)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAllObjectsCreated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PositionMoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RelinkJoint",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer index, Cog cog)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Solve",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SpecificJointRelink",
					string Description = "Used for a specific joint type (eg PulleyJoint ) to reject a relink. This is the last step that happens when relinking, after the joint has set valid to true/false.",
					string ReturnType = "void",
					string Parameters = "(Integer index, Collider collider)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "collider",
							string Type = "Collider",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAtoms",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ValidateJoint",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ValidateJoints",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WarmStart",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "FocusEvent",
			string BaseClass = "",
			string Description = "",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "LostFocus",
					string Type = "Widget",
					string Description = "",
				},
				{
					string Name = "ReceivedFocus",
					string Type = "Widget",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ObjectTransformGizmo",
			string BaseClass = "Component",
			string Description = "",
			Array Tags = 
			[
				"Component",
				"Gizmo",
			],
			Array Properties = 
			[
				{
					string Name = "Basis",
					string Type = "GizmoBasis",
					string Description = "Setters / Getters.",
				},
				{
					string Name = "ObjectCount",
					string Type = "Integer",
					string Description = "Object getters.",
				},
				{
					string Name = "Pivot",
					string Type = "GizmoPivot",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddObject",
					string Description = "Adds an object to be modified by this gizmo.",
					string ReturnType = "void",
					string Parameters = "(MetaHandle meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaHandle",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ClearObjects",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetObjectAtIndex",
					string Description = "",
					string ReturnType = "MetaHandle",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnFrameUpdate",
					string Description = "We want to update the gizmo basis every frame to reflect any changes made to the objects we're modifying.",
					string ReturnType = "void",
					string Parameters = "(UpdateEvent e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "UpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnGizmoModified",
					string Description = "As the gizmo is being dragged, we want to update all objects.",
					string ReturnType = "void",
					string Parameters = "(GizmoUpdateEvent e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "GizmoUpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnMouseDragEnd",
					string Description = "Queue the final changes to the objects in the given operation queue.",
					string ReturnType = "void",
					string Parameters = "(Event e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnMouseDragStart",
					string Description = "Store the state of every object.",
					string ReturnType = "void",
					string Parameters = "(ViewportMouseEvent e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "ViewportMouseEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveObject",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaHandle meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaHandle",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetOperationQueue",
					string Description = "If set, this Gizmo will add operations for all modifications to cogs.",
					string ReturnType = "void",
					string Parameters = "(OperationQueue opQueue)",
					Array ParameterList = 
					[
						{
							string Name = "opQueue",
							string Type = "OperationQueue",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ToggleCoordinateMode",
					string Description = "Toggle between local / world.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateGizmoBasis",
					string Description = "Updates the position of the gizmo based on the current list of objects.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "HeightMapEvent",
			string BaseClass = "",
			string Description = "Used by any height map event.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Map",
					string Type = "HeightMap",
					string Description = "The height map.",
				},
				{
					string Name = "Patch",
					string Type = "HeightPatch",
					string Description = "The associated patch (if it applies)",
				},
				{
					string Name = "Source",
					string Type = "HeightMapSource",
					string Description = "The height Map source to save to.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "SampleCurve",
			string BaseClass = "DataResource",
			string Description = "",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "HeightMax",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "WidthMax",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddControlPoint",
					string Description = "Adds a control point.",
					string ReturnType = "Integer",
					string Parameters = "(Vec2 pos, Vec2 tanIn, Integer editorFlags)",
					Array ParameterList = 
					[
						{
							string Name = "pos",
							string Type = "Vec2",
							string Description = "",
						},
						{
							string Name = "tanIn",
							string Type = "Vec2",
							string Description = "",
						},
						{
							string Name = "editorFlags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddControlPoint",
					string Description = "Adds a control point.",
					string ReturnType = "Integer",
					string Parameters = "(Vec2 pos, Vec2 tanIn, Vec2 tanOut, Integer editorFlags)",
					Array ParameterList = 
					[
						{
							string Name = "pos",
							string Type = "Vec2",
							string Description = "",
						},
						{
							string Name = "tanIn",
							string Type = "Vec2",
							string Description = "",
						},
						{
							string Name = "tanOut",
							string Type = "Vec2",
							string Description = "",
						},
						{
							string Name = "editorFlags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Bake",
					string Description = "Bakes out the curve so that it doesn't have to when the first sample is requested.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Clear",
					string Description = "Clears all control points in the curve.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugSample",
					string Description = "",
					string ReturnType = "Real",
					string Parameters = "(Real t, StringParam id, Vec4 color)",
					Array ParameterList = 
					[
						{
							string Name = "t",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "id",
							string Type = "StringParam",
							string Description = "",
						},
						{
							string Name = "color",
							string Type = "Vec4",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetControlPoints",
					string Description = "Returns the control points of the curve.",
					string ReturnType = "ControlPointArray",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetCurve",
					string Description = "Fills out the given array with the curve.",
					string ReturnType = "void",
					string Parameters = "(Vec3Array curve)",
					Array ParameterList = 
					[
						{
							string Name = "curve",
							string Type = "Vec3Array",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetHeightMin",
					string Description = "",
					string ReturnType = "Real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetHeightRange",
					string Description = "",
					string ReturnType = "Vec2",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetRange",
					string Description = "Returns the range.",
					string ReturnType = "Vec2",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWidthMin",
					string Description = "",
					string ReturnType = "Real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWidthRange",
					string Description = "",
					string ReturnType = "Vec2",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initializes the curve.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "Meta object initialization.",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InsertControlPoint",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(ControlPoint cp)",
					Array ParameterList = 
					[
						{
							string Name = "cp",
							string Type = "ControlPoint",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsBaked",
					string Description = "Returns whether or not that curve is already baked.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Sample",
					string Description = "Sample the curve at the given t.",
					string ReturnType = "Real",
					string Parameters = "(Real t)",
					Array ParameterList = 
					[
						{
							string Name = "t",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serialize the curve to/from a file.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "Set default data.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetHeightMin",
					string Description = "Set / get the height range of the graph.",
					string ReturnType = "void",
					string Parameters = "(Real min)",
					Array ParameterList = 
					[
						{
							string Name = "min",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetHeightRange",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Real min, Real max)",
					Array ParameterList = 
					[
						{
							string Name = "min",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "max",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetWidthMin",
					string Description = "Set / get the width range of the graph.",
					string ReturnType = "void",
					string Parameters = "(Real min)",
					Array ParameterList = 
					[
						{
							string Name = "min",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetWidthRange",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Real min, Real max)",
					Array ParameterList = 
					[
						{
							string Name = "min",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "max",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateRange",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetSpace",
			string BaseClass = "NetObject",
			string Description = "Network Space Manages the replication of a single space on the network.",
			Array Tags = 
			[
				"Networking",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "AutomaticChannel",
					string Type = "NetChannelConfig",
					string Description = "",
				},
				{
					string Name = "IsNapping",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "IsOnline",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "LastChangeTimePassed",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "LastChangeTimestamp",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "NetObjectCount",
					string Type = "Integer",
					string Description = "Returns the number of net objects in this space (but not including the net space itself)",
				},
				{
					string Name = "NetObjectId",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "NetUserCount",
					string Type = "Integer",
					string Description = "Returns the number of net users in this space.",
				},
				{
					string Name = "OfflineTimePassed",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "OfflineTimestamp",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "OnlineTimePassed",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "OnlineTimestamp",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ClientOnEngineUpdate",
					string Description = "[Client] Called on engine update",
					string ReturnType = "void",
					string Parameters = "(UpdateEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "UpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNetObjectOfflineEventId",
					string Description = "Handles behavior when the net object is taken offline, dispatches events accordingly.",
					string ReturnType = "const string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNetObjectOnlineEventId",
					string Description = "Handles behavior when the net object is brought online, dispatches events accordingly.",
					string ReturnType = "const string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleNetObjectOfflinePostDispatch",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(NetObjectOffline event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "NetObjectOffline",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleNetObjectOnlinePreDispatch",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(NetObjectOnline event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "NetObjectOnline",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initializes the component.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OfflineOnEngineUpdate",
					string Description = "[Offline] Called on engine update",
					string ReturnType = "void",
					string Parameters = "(UpdateEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "UpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnEngineUpdate",
					string Description = "Called on engine update.",
					string ReturnType = "void",
					string Parameters = "(UpdateEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "UpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PerformNetLevelStarted",
					string Description = "[Server/Offline] Dispatches the network level started event and clones the current level state to clients",
					string ReturnType = "void",
					string Parameters = "(bool isLevelTransition)",
					Array ParameterList = 
					[
						{
							string Name = "isLevelTransition",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ServerOnEngineUpdate",
					string Description = "[Server] Called on engine update",
					string ReturnType = "void",
					string Parameters = "(UpdateEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "UpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ServerOrOfflineOnLevelStarted",
					string Description = "[Server/Offline] Called on level started",
					string ReturnType = "void",
					string Parameters = "(GameEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "GameEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "InputDeviceEvent",
			string BaseClass = "",
			string Description = "An event that informs us which input device is being used by the user.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Device",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "LastDevice",
					string Type = "Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "SizerGizmoEvent",
			string BaseClass = "GizmoUpdateEvent",
			string Description = "",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "NewExtents",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "NewPosition",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "StartExtents",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "StartPosition",
					string Type = "Real3",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LockStepMouse",
			string BaseClass = "Component",
			string Description = "Provides synced mouse input across lock step.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "InputCameraViewport",
					string Type = "Cog",
					string Description = "Set the viewport that will handle our input When mouse input comes in through lockstep, it will be in the world relative to this viewport.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnGameStarted",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(GameEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "GameEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnLocalMouseLeftDown",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MouseEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "MouseEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnLocalMouseLeftUp",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MouseEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "MouseEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnLocalMouseMiddleDown",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MouseEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "MouseEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnLocalMouseMiddleUp",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MouseEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "MouseEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnLocalMouseMove",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MouseEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "MouseEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnLocalMouseRightDown",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MouseEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "MouseEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnLocalMouseRightUp",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MouseEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "MouseEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnLocalMouseScroll",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MouseEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "MouseEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendMouseButtonEvent",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MouseButtons::Enum button, string eventId, MouseEvent mouseEvent)",
					Array ParameterList = 
					[
						{
							string Name = "button",
							string Type = "MouseButtons::Enum",
							string Description = "",
						},
						{
							string Name = "eventId",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "mouseEvent",
							string Type = "MouseEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetupMouseEvent",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(LockStepMouseEvent syncedEvent, MouseEvent mouseEvent)",
					Array ParameterList = 
					[
						{
							string Name = "syncedEvent",
							string Type = "LockStepMouseEvent",
							string Description = "",
						},
						{
							string Name = "mouseEvent",
							string Type = "MouseEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "TextBlock",
			string BaseClass = "DocumentResource",
			string Description = "A Text resource is a generic resource for simple text data for game logic.",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "Text",
					string Type = "string",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "GetFormat",
					string Description = "What syntax editor is used for this text.",
					string ReturnType = "string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "LoadTextData",
					string Description = "Get all the text.",
					string ReturnType = "StringRange",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReloadData",
					string Description = "Save the text.",
					string ReturnType = "void",
					string Parameters = "(StringRange data)",
					Array ParameterList = 
					[
						{
							string Name = "data",
							string Type = "StringRange",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Save",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(string filename)",
					Array ParameterList = 
					[
						{
							string Name = "filename",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetPeerSentConnectResponse",
			string BaseClass = "",
			string Description = "Dispatched after sending a connect response If denied, their net peer ID is released and link is destroyed immediately after this.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "OurConnectResponse",
					string Type = "ConnectResponse",
					string Description = "",
				},
				{
					string Name = "OurIpAddress",
					string Type = "IpAddress",
					string Description = "",
				},
				{
					string Name = "OurResponseBundle",
					string Type = "EventBundle",
					string Description = "",
				},
				{
					string Name = "TheirIpAddress",
					string Type = "IpAddress",
					string Description = "",
				},
				{
					string Name = "TheirNetPeerId",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "TheirPendingUserAddRequestCount",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "TheirRequestBundle",
					string Type = "EventBundle",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LightningScript",
			string BaseClass = "DocumentResource",
			string Description = "Lightning script file Resource .",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "Inspector",
					string Type = "LightningCodeInspector",
					string Description = "",
				},
				{
					string Name = "Text",
					string Type = "string",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "GetCodeInspector",
					string Description = "Gets a code inspector which is used for code completion and other code editing features.",
					string ReturnType = "ICodeInspector",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetFormat",
					string Description = "What syntax editor is used for this text.",
					string ReturnType = "string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "LoadTextData",
					string Description = "Get all the text.",
					string ReturnType = "StringRange",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReloadData",
					string Description = "Save the text.",
					string ReturnType = "void",
					string Parameters = "(StringRange data)",
					Array ParameterList = 
					[
						{
							string Name = "data",
							string Type = "StringRange",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "DynamicMotor",
			string BaseClass = "Component",
			string Description = "A controller to move an object with physics. This gives the controller realistic reactions to the physics world for free.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "MaxMoveForce",
					string Type = "Real",
					string Description = "Max movement force.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Activate",
					string Description = "Activates all functionality of the dynamic controller.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateJoint",
					string Description = "",
					string ReturnType = "RelativeVelocityJoint",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Deactivate",
					string Description = "Deactivates all functionality of the dynamic controller.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetJoint",
					string Description = "",
					string ReturnType = "RelativeVelocityJoint",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MoveInDirection",
					string Description = "Attempts to move the character in the given direction.",
					string ReturnType = "void",
					string Parameters = "(Vec3 direction, Vec3 up)",
					Array ParameterList = 
					[
						{
							string Name = "direction",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "up",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetReferenceFrameToObject",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Cog object)",
					Array ParameterList = 
					[
						{
							string Name = "object",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetReferenceFrameToWorld",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LockStepSyncChecker",
			string BaseClass = "Component",
			string Description = "Ensures that particular objects never fall out of sync.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "IncludeHierarchy",
					string Type = "Boolean",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "GetSyncedData",
					string Description = "Get the synced data for the object in some serialized form.",
					string ReturnType = "string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Component Interface.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "GeometryBuilderSpace",
			string BaseClass = "Component",
			string Description = "",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "BroadPhase",
					string Type = "GeometryBroadPhase",
					string Description = "",
				},
				{
					string Name = "GeometryObjects",
					string Type = "GeometryList",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddGeometry",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(GeometryBuilder geometry)",
					Array ParameterList = 
					[
						{
							string Name = "geometry",
							string Type = "GeometryBuilder",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FrustumCast",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Frustum frustum, Array<GeometryBuilder> builders)",
					Array ParameterList = 
					[
						{
							string Name = "frustum",
							string Type = "Frustum",
							string Description = "",
						},
						{
							string Name = "builders",
							string Type = "Array<GeometryBuilder>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FrustumCast",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Frustum frustum, GeometryBuilder geometry, Array<BuilderElement> features)",
					Array ParameterList = 
					[
						{
							string Name = "frustum",
							string Type = "Frustum",
							string Description = "",
						},
						{
							string Name = "geometry",
							string Type = "GeometryBuilder",
							string Description = "",
						},
						{
							string Name = "features",
							string Type = "Array<BuilderElement>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnSpaceDestroyed",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ObjectEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "ObjectEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RayCast",
					string Description = "",
					string ReturnType = "BuilderElement",
					string Parameters = "(Ray ray)",
					Array ParameterList = 
					[
						{
							string Name = "ray",
							string Type = "Ray",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveGeometry",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(GeometryBuilder geometry)",
					Array ParameterList = 
					[
						{
							string Name = "geometry",
							string Type = "GeometryBuilder",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateGeometry",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(GeometryBuilder geometry)",
					Array ParameterList = 
					[
						{
							string Name = "geometry",
							string Type = "GeometryBuilder",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator=",
					string Description = "",
					string ReturnType = "GeometryBuilderSpace",
					string Parameters = "(const GeometryBuilderSpace)",
					Array ParameterList = 
					[
						{
							string Name = "",
							string Type = "const GeometryBuilderSpace",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "TouchEvent",
			string BaseClass = "",
			string Description = "",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Delta",
					string Type = "Vec2",
					string Description = "",
				},
				{
					string Name = "Id",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "Position",
					string Type = "Vec2",
					string Description = "",
				},
				{
					string Name = "Rotation",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "Size",
					string Type = "Vec2",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "JointMotor",
			string BaseClass = "Component",
			string Description = "A motor for a joint. Used to add a constant pull or push to a joint. A motor defines a desired speed to move at as well as a max force that can be applied to reach that force at any timestep. See each joint for a description of how it reacts to a motor.",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "Active",
					string Type = "Boolean",
					string Description = "Determines if this motor is currently active.",
				},
				{
					string Name = "AtomIds",
					string Type = "Integer",
					string Description = "Signifies what atoms on the joint this effects.",
				},
				{
					string Name = "MaxForce",
					string Type = "Real",
					string Description = "The maximum force that the motor can apply each frame to reach the target speed.",
				},
				{
					string Name = "Reverse",
					string Type = "Boolean",
					string Description = "Determines if this motor should move in reverse. This is a quick hand instead of setting the speed to negative.",
				},
				{
					string Name = "Speed",
					string Type = "Real",
					string Description = "The desired speed for this motor. See wiki for each joint's details.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "GetAtomIndexActive",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(Integer atomIndexMask)",
					Array ParameterList = 
					[
						{
							string Name = "atomIndexMask",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsValid",
					string Description = "Has this joint been initialized with a valid joint. Also used to deal with calling sets in serialize.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Mouse",
			string BaseClass = "EventObject",
			string Description = "Mouse object for Display System .",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "Cursor",
					string Type = "Cursor",
					string Description = "Set the cursor of the mouse.",
				},
				{
					string Name = "RawMovement",
					string Type = "Real2",
					string Description = "",
				},
				{
					string Name = "ScreenMovement",
					string Type = "Real2",
					string Description = "World Movement of the mouse.",
				},
				{
					string Name = "ScreenPosition",
					string Type = "Real2",
					string Description = "World Position of the mouse.",
				},
				{
					string Name = "Trapped",
					string Type = "Boolean",
					string Description = "Trapping.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Clear",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsButtonDown",
					string Description = "Is a mouse button currently down?",
					string ReturnType = "bool",
					string Parameters = "(MouseButtons::Enum button)",
					Array ParameterList = 
					[
						{
							string Name = "button",
							string Type = "MouseButtons::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ToggleTrapped",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LockStepKeyboard",
			string BaseClass = "Component",
			string Description = "Provides synced keyboard input across lock step.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "LockStep",
					string Type = "LockStepGame",
					string Description = "Store a pointer to the lock step space component.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnGameStarted",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(GameEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "GameEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnLocalKeyDown",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(KeyboardEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "KeyboardEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnLocalKeyUp",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(KeyboardEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "KeyboardEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "BoxParticleEmitter",
			string BaseClass = "ParticleEmitterShared",
			string Description = "Emits particles inside a box.",
			Array Tags = 
			[
				"Particle",
				"Component",
			],
			Array Properties = 
			[
			],
			Array Methods = 
			[
				{
					string Name = "EmitParticles",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(ParticleList particleList, Real dt, Mat4Ref transform, Vec3 velocity)",
					Array ParameterList = 
					[
						{
							string Name = "particleList",
							string Type = "ParticleList",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "transform",
							string Type = "Mat4Ref",
							string Description = "",
						},
						{
							string Name = "velocity",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ObjectLinkEvent",
			string BaseClass = "",
			string Description = "An event sent when an object link changes one of its link edges.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "EdgeId",
					string Type = "Integer",
					string Description = "The index on the edge that is being overridden.",
				},
				{
					string Name = "NewCog",
					string Type = "Cog",
					string Description = "The new cog being set.",
				},
				{
					string Name = "OldCog",
					string Type = "Cog",
					string Description = "The old cog being overridden.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Set",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer edgeIndex, Cog oldCog, Cog newCog)",
					Array ParameterList = 
					[
						{
							string Name = "edgeIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "oldCog",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "newCog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "WindEffect",
			string BaseClass = "PhysicsEffect",
			string Description = "Applies a wind force to an object in a given direction. A wind force approximates the surface area of the object in the direction of the force to determine how large the force should be.",
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "WindDirection",
					string Type = "Real3",
					string Description = "The direction that the wind is blowing.",
				},
				{
					string Name = "WindSpeed",
					string Type = "Real",
					string Description = "The speed that the wind is blowing.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ApplyEffect",
					string Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force).",
					string ReturnType = "void",
					string Parameters = "(RigidBody obj, real dt)",
					Array ParameterList = 
					[
						{
							string Name = "obj",
							string Type = "RigidBody",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplyEffect",
					string Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force).",
					string ReturnType = "void",
					string Parameters = "(SpringSystem obj, real dt)",
					Array ParameterList = 
					[
						{
							string Name = "obj",
							string Type = "SpringSystem",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplyEffect",
					string Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force).",
					string ReturnType = "void",
					string Parameters = "(Collider collider, RigidBody obj, real dt)",
					Array ParameterList = 
					[
						{
							string Name = "collider",
							string Type = "Collider",
							string Description = "",
						},
						{
							string Name = "obj",
							string Type = "RigidBody",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWindVelocity",
					string Description = "Calculates and returns the wind velocity.",
					string ReturnType = "Vec3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetUser",
			string BaseClass = "NetObject",
			string Description = "Network User Manages the replication of a single negotiated user on the network.",
			Array Tags = 
			[
				"Networking",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "AddedByMyPeer",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "NetPeerId",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "NetUserId",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "OwnedNetObjectCount",
					string Type = "Integer",
					string Description = "Returns the number of net objects owned by this user in all spaces.",
				},
				{
					string Name = "OwnedNetObjects",
					string Type = "CogHashSetRange",
					string Description = "Returns all net objects owned by this user in all spaces.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddedByMyPeer",
					string Description = "Returns true if the user was added by our local peer, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddedByPeer",
					string Description = "Returns true if the user was added by the specified peer, else false.",
					string ReturnType = "bool",
					string Parameters = "(NetPeerId netPeerId)",
					Array ParameterList = 
					[
						{
							string Name = "netPeerId",
							string Type = "NetPeerId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindOwnedNetObjectByName",
					string Description = "Finds a net object with the given name owned by this user in any space, else nullptr.",
					string ReturnType = "Cog",
					string Parameters = "(StringParam name)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindOwnedNetObjectByNameInSpace",
					string Description = "Finds a net object with the given name owned by this user in the specified space, else nullptr.",
					string ReturnType = "Cog",
					string Parameters = "(StringParam name, Space space)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "StringParam",
							string Description = "",
						},
						{
							string Name = "space",
							string Type = "Space",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNetObjectOfflineEventId",
					string Description = "Handles behavior when the net object is taken offline, dispatches events accordingly.",
					string ReturnType = "const string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetNetObjectOnlineEventId",
					string Description = "Handles behavior when the net object is brought online, dispatches events accordingly.",
					string ReturnType = "const string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleNetObjectOfflinePostDispatch",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(NetObjectOffline event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "NetObjectOffline",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "HandleNetObjectOnlinePreDispatch",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(NetObjectOnline event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "NetObjectOnline",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initializes the component.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAllObjectsCreated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "Uninitializes the component.",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnRegisterCppNetProperties",
					string Description = "Adds C++ component net properties to this net object.",
					string ReturnType = "void",
					string Parameters = "(RegisterCppNetProperties event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "RegisterCppNetProperties",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReleaseOwnedNetObjects",
					string Description = "[Server/Offline] Releases ownership of all net objects owned by this user in all spaces",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator!=",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(const NetUser rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const NetUser",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator!=",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(const NetUserId rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const NetUserId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator<",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(const NetUser rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const NetUser",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator<",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(const NetUserId rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const NetUserId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator==",
					string Description = "Comparison Operators (compares network user IDs)",
					string ReturnType = "bool",
					string Parameters = "(const NetUser rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const NetUser",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator==",
					string Description = "Comparison Operators (compares network user IDs)",
					string ReturnType = "bool",
					string Parameters = "(const NetUserId rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const NetUserId",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "WheelJoint",
			string BaseClass = "Joint",
			string Description = "A joint that models a wheel with shocks. A wheel aligns the two local axes together and allows free rotation about this axis. The specified shock axis is turned into a soft constraint to model the shocks. Note: object 0 should be the root object as the shock axis rotates with this object. If object 0 is the wheel, then the shock axis will rotate with the wheel, causing the shocks to not stay aligned. Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Motor: A motor will turn the objects about the motor axis. Spring: A spring will make the shock axis springy. A spring is attached by default to a wheel.",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "LocalAngleA",
					string Type = "Quaternion",
					string Description = "",
				},
				{
					string Name = "LocalAngleB",
					string Type = "Quaternion",
					string Description = "",
				},
				{
					string Name = "LocalAxisA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "LocalAxisB",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "LocalPointA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "LocalPointB",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "ShockAxis",
					string Type = "Real3",
					string Description = "The shock axis in the local space of body A.",
				},
				{
					string Name = "WorldAxis",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldPointA",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldPointB",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "WorldShockAxis",
					string Type = "Real3",
					string Description = "The shock axis after it has been translated into world coordinates.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "BatchEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Commit",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComponentAdded",
					string Description = "Used to detect when motors/limits/springs are added dynamically.",
					string ReturnType = "void",
					string Parameters = "(TypeIdType typeId, Component component)",
					Array ParameterList = 
					[
						{
							string Name = "typeId",
							string Type = "TypeIdType",
							string Description = "",
						},
						{
							string Name = "component",
							string Type = "Component",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeInitialConfiguration",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMoleculeData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeData moleculeData)",
					Array ParameterList = 
					[
						{
							string Name = "moleculeData",
							string Type = "MoleculeData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePositionMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAtomIndexFilter",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Integer atomIndex, real desiredConstraintValue)",
					Array ParameterList = 
					[
						{
							string Name = "atomIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "desiredConstraintValue",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultLimitIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultMotorIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultSpringIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAllObjectsCreated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PositionMoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Solve",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAtoms",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WarmStart",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "DefinitionSet",
			string BaseClass = "BaseDefinition",
			string Description = "Base Definition Collection.",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "DefinitionMap",
					string Type = "DefinitionMapType",
					string Description = "",
				},
				{
					string Name = "Parent",
					string Type = "DefinitionSet",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddToSet",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(string id, BaseDefinition definition)",
					Array ParameterList = 
					[
						{
							string Name = "id",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "definition",
							string Type = "BaseDefinition",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Append",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(DefinitionSet child)",
					Array ParameterList = 
					[
						{
							string Name = "child",
							string Type = "DefinitionSet",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefinition",
					string Description = "",
					string ReturnType = "BaseDefinition",
					string Parameters = "(string id)",
					Array ParameterList = 
					[
						{
							string Name = "id",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefinitionOrNull",
					string Description = "",
					string ReturnType = "BaseDefinition",
					string Parameters = "(string id)",
					Array ParameterList = 
					[
						{
							string Name = "id",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefinitionSet",
					string Description = "",
					string ReturnType = "DefinitionSet",
					string Parameters = "(string id)",
					Array ParameterList = 
					[
						{
							string Name = "id",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "MeshBenderTool",
			string BaseClass = "Tool",
			string Description = "An efficient way to make per instance modifications to meshes (eg. bending level geometry)",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "EditingMeshBender",
					string Type = "CogId",
					string Description = "",
				},
				{
					string Name = "HoverControlPoint",
					string Type = "Integer",
					string Description = "An index into the mControlPoints on the MeshBender (or -1 for invalid)",
				},
				{
					string Name = "ProxyControlPoints",
					string Type = "Array<CogId>",
					string Description = "",
				},
				{
					string Name = "SelectedControlPoints",
					string Type = "HashSet<Integer>",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Activate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ClearEditingMeshBender",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateProxyControlPoints",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MeshBender meshBender)",
					Array ParameterList = 
					[
						{
							string Name = "meshBender",
							string Type = "MeshBender",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Deactivate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Draw",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "EndDrag",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Viewport viewport)",
					Array ParameterList = 
					[
						{
							string Name = "viewport",
							string Type = "Viewport",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "KeyDown",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(Viewport viewport, KeyboardEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "viewport",
							string Type = "Viewport",
							string Description = "",
						},
						{
							string Name = "event",
							string Type = "KeyboardEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MouseDragMovement",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(Viewport viewport, Vec2 mouseStart, Vec2 newPosition)",
					Array ParameterList = 
					[
						{
							string Name = "viewport",
							string Type = "Viewport",
							string Description = "",
						},
						{
							string Name = "mouseStart",
							string Type = "Vec2",
							string Description = "",
						},
						{
							string Name = "newPosition",
							string Type = "Vec2",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MouseMoveOnViewport",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Viewport viewport, MouseEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "viewport",
							string Type = "Viewport",
							string Description = "",
						},
						{
							string Name = "event",
							string Type = "MouseEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MouseUp",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(Viewport viewport, MouseEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "viewport",
							string Type = "Viewport",
							string Description = "",
						},
						{
							string Name = "event",
							string Type = "MouseEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnSelectionChanged",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(SelectionChangedEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "SelectionChangedEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LightningPluginLibrary",
			string BaseClass = "Resource",
			string Description = "",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "SharedLibraryPath",
					string Type = "string",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Material",
			string BaseClass = "DataResource",
			string Description = "Material resource class. The material resource Contains the data and resources needed to render a model.",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "CachedInputRange",
					string Type = "IndexRange",
					string Description = "",
				},
				{
					string Name = "CompositeName",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "CompositionChanged",
					string Type = "bool",
					string Description = "",
				},
				{
					string Name = "FragmentNames",
					string Type = "Array<string>",
					string Description = "",
				},
				{
					string Name = "InputRangeVersion",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "MaterialBlocks",
					string Type = "MaterialBlockArray",
					string Description = "",
				},
				{
					string Name = "PropertiesChanged",
					string Type = "bool",
					string Description = "",
				},
				{
					string Name = "RenderData",
					string Type = "void",
					string Description = "",
				},
				{
					string Name = "RenderGroups",
					string Type = "RenderGroupArray",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Add",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MaterialBlock block, Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "block",
							string Type = "MaterialBlock",
							string Description = "",
						},
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddRenderGroup",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(RenderGroup renderGroup)",
					Array ParameterList = 
					[
						{
							string Name = "renderGroup",
							string Type = "RenderGroup",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddShaderInputs",
					string Description = "",
					string ReturnType = "IndexRange",
					string Parameters = "(Array<ShaderInput> shaderInputs, Integer version)",
					Array ParameterList = 
					[
						{
							string Name = "shaderInputs",
							string Type = "Array<ShaderInput>",
							string Description = "",
						},
						{
							string Name = "version",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetBlockAt",
					string Description = "",
					string ReturnType = "MaterialBlock",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetBlockIndex",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(TypeIdType typeId)",
					Array ParameterList = 
					[
						{
							string Name = "typeId",
							string Type = "TypeIdType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetById",
					string Description = "",
					string ReturnType = "MaterialBlock",
					string Parameters = "(TypeIdType typeId)",
					Array ParameterList = 
					[
						{
							string Name = "typeId",
							string Type = "TypeIdType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetSize",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Remove",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(MaterialBlock block)",
					Array ParameterList = 
					[
						{
							string Name = "block",
							string Type = "MaterialBlock",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveRenderGroup",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(RenderGroup renderGroup)",
					Array ParameterList = 
					[
						{
							string Name = "renderGroup",
							string Type = "RenderGroup",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ResourceModified",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnType = "Resource",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateClones",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateCompositeName",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(LightningShaderLibraryRef fragmentsLibrary)",
					Array ParameterList = 
					[
						{
							string Name = "fragmentsLibrary",
							string Type = "LightningShaderLibraryRef",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetHost",
			string BaseClass = "",
			string Description = "Describes a network host.",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "BasicHostInfo",
					string Type = "EventBundle",
					string Description = "",
				},
				{
					string Name = "ExtraHostInfo",
					string Type = "EventBundle",
					string Description = "",
				},
				{
					string Name = "IpAddress",
					string Type = "IpAddress",
					string Description = "",
				},
				{
					string Name = "Latency",
					string Type = "Integer",
					string Description = "Returns the estimated latency ((RTT/2)) in milliseconds from our peer to this host.",
				},
				{
					string Name = "Network",
					string Type = "Network",
					string Description = "",
				},
				{
					string Name = "RoundTripTime",
					string Type = "Integer",
					string Description = "Returns the round-trip time (RTT) in milliseconds from our peer to this host.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator!=",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(const NetHost rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const NetHost",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator!=",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(const IpAddress rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const IpAddress",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator<",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(const NetHost rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const NetHost",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator<",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(const IpAddress rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const IpAddress",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator==",
					string Description = "Comparison Operators (compares IP addresses)",
					string ReturnType = "bool",
					string Parameters = "(const NetHost rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const NetHost",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator==",
					string Description = "Comparison Operators (compares IP addresses)",
					string ReturnType = "bool",
					string Parameters = "(const IpAddress rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const IpAddress",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetPropertyConfig",
			string BaseClass = "DataResource",
			string Description = "Network Property Configuration Defines a configuration for the replication of a single property on the network.",
			Array Tags = 
			[
				"Resource",
				"Networking",
			],
			Array Properties = 
			[
				{
					string Name = "ActiveConvergenceWeight",
					string Type = "Real",
					string Description = "Controls the weight of an actively changing net property's sampled authoritative values when performing active convergence, applied every convergence interval (Setting this to 0 will effectively never converge, and setting this to 1 will effectively always snap)",
				},
				{
					string Name = "ConvergenceInterval",
					string Type = "Integer",
					string Description = "Controls the frame interval in which a net property's locally simulated values are converged with sampled authoritative values (Increase to spread out convergence-related property setter calls which reduces CPU impact at the expense of convergence smoothness)",
				},
				{
					string Name = "DeltaThresholdDoubleInteger",
					string Type = "DoubleInteger",
					string Description = "",
				},
				{
					string Name = "DeltaThresholdDoubleReal",
					string Type = "DoubleReal",
					string Description = "",
				},
				{
					string Name = "DeltaThresholdInteger",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "DeltaThresholdInteger2",
					string Type = "Integer2",
					string Description = "",
				},
				{
					string Name = "DeltaThresholdInteger3",
					string Type = "Integer3",
					string Description = "",
				},
				{
					string Name = "DeltaThresholdInteger4",
					string Type = "Integer4",
					string Description = "",
				},
				{
					string Name = "DeltaThresholdQuaternion",
					string Type = "Quaternion",
					string Description = "",
				},
				{
					string Name = "DeltaThresholdReal",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "DeltaThresholdReal2",
					string Type = "Real2",
					string Description = "",
				},
				{
					string Name = "DeltaThresholdReal3",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "DeltaThresholdReal4",
					string Type = "Real4",
					string Description = "",
				},
				{
					string Name = "EventOnConvergenceStateChange",
					string Type = "Boolean",
					string Description = "Controls whether or not net properties should dispatch NetChannelPropertyConvergenceStateChange when its convergence state changes.",
				},
				{
					string Name = "ExtrapolationLimit",
					string Type = "Real",
					string Description = "Controls the maximum amount of time to extrapolate beyond a net property's last received authoritative value When sampling beyond this extrapolation limit, the sampled value will remain unchanged until the next authoritative value is received (Helps minimize the negative effects of missing changes or sparse change detection intervals when applied to non-deterministic property data)",
				},
				{
					string Name = "InterpolationCurve",
					string Type = "CurveType",
					string Description = "Controls the type of curve to use when interpolating a net property's authoritative values to be sampled later locally.",
				},
				{
					string Name = "NetType",
					string Type = "NetType",
					string Description = "Controls the target network property type.",
				},
				{
					string Name = "QuantizationRangeMaxDoubleInteger",
					string Type = "DoubleInteger",
					string Description = "",
				},
				{
					string Name = "QuantizationRangeMaxDoubleReal",
					string Type = "DoubleReal",
					string Description = "",
				},
				{
					string Name = "QuantizationRangeMaxInteger",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "QuantizationRangeMaxInteger2",
					string Type = "Integer2",
					string Description = "",
				},
				{
					string Name = "QuantizationRangeMaxInteger3",
					string Type = "Integer3",
					string Description = "",
				},
				{
					string Name = "QuantizationRangeMaxInteger4",
					string Type = "Integer4",
					string Description = "",
				},
				{
					string Name = "QuantizationRangeMaxQuaternion",
					string Type = "Quaternion",
					string Description = "",
				},
				{
					string Name = "QuantizationRangeMaxReal",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "QuantizationRangeMaxReal2",
					string Type = "Real2",
					string Description = "",
				},
				{
					string Name = "QuantizationRangeMaxReal3",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "QuantizationRangeMaxReal4",
					string Type = "Real4",
					string Description = "",
				},
				{
					string Name = "QuantizationRangeMinDoubleInteger",
					string Type = "DoubleInteger",
					string Description = "",
				},
				{
					string Name = "QuantizationRangeMinDoubleReal",
					string Type = "DoubleReal",
					string Description = "",
				},
				{
					string Name = "QuantizationRangeMinInteger",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "QuantizationRangeMinInteger2",
					string Type = "Integer2",
					string Description = "",
				},
				{
					string Name = "QuantizationRangeMinInteger3",
					string Type = "Integer3",
					string Description = "",
				},
				{
					string Name = "QuantizationRangeMinInteger4",
					string Type = "Integer4",
					string Description = "",
				},
				{
					string Name = "QuantizationRangeMinQuaternion",
					string Type = "Quaternion",
					string Description = "",
				},
				{
					string Name = "QuantizationRangeMinReal",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "QuantizationRangeMinReal2",
					string Type = "Real2",
					string Description = "",
				},
				{
					string Name = "QuantizationRangeMinReal3",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "QuantizationRangeMinReal4",
					string Type = "Real4",
					string Description = "",
				},
				{
					string Name = "RestingConvergenceDuration",
					string Type = "Real",
					string Description = "Controls the elapsed duration in which a resting net property will be fully converged with the last received authoritative value, applied every convergence interval (Setting this to 0 will effectively snap to the last received property value immediately on rest)",
				},
				{
					string Name = "SampleTimeOffset",
					string Type = "Real",
					string Description = "Controls the time offset from now to sample a net property's interpolated authoritative values (This is effectively how ""forward"" or ""backward"" in time we are sampling interpolated authority values)",
				},
				{
					string Name = "SerializationMode",
					string Type = "SerializationMode",
					string Description = "Controls how net properties are serialized.",
				},
				{
					string Name = "SnapThresholdDoubleInteger",
					string Type = "DoubleInteger",
					string Description = "",
				},
				{
					string Name = "SnapThresholdDoubleReal",
					string Type = "DoubleReal",
					string Description = "",
				},
				{
					string Name = "SnapThresholdInteger",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "SnapThresholdInteger2",
					string Type = "Integer2",
					string Description = "",
				},
				{
					string Name = "SnapThresholdInteger3",
					string Type = "Integer3",
					string Description = "",
				},
				{
					string Name = "SnapThresholdInteger4",
					string Type = "Integer4",
					string Description = "",
				},
				{
					string Name = "SnapThresholdQuaternion",
					string Type = "Quaternion",
					string Description = "",
				},
				{
					string Name = "SnapThresholdReal",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "SnapThresholdReal2",
					string Type = "Real2",
					string Description = "",
				},
				{
					string Name = "SnapThresholdReal3",
					string Type = "Real3",
					string Description = "",
				},
				{
					string Name = "SnapThresholdReal4",
					string Type = "Real4",
					string Description = "",
				},
				{
					string Name = "UseConvergence",
					string Type = "Boolean",
					string Description = "Controls whether or not to gradually converge a net property's locally simulated values with received authoritative values (Enable to improve changing value smoothness, at the expense of some small CPU and memory impact)",
				},
				{
					string Name = "UseDeltaThreshold",
					string Type = "Boolean",
					string Description = "Controls whether or not to use a delta threshold at which a net property's primitive-components are considered changed during change detection.",
				},
				{
					string Name = "UseHalfFloats",
					string Type = "Boolean",
					string Description = "Controls whether or not a floating-point net property's primitive-components are converted to half floats during serialization (Using half floats is mutually exclusive with using quantization)",
				},
				{
					string Name = "UseInterpolation",
					string Type = "Boolean",
					string Description = "Controls whether or not to interpolate a net property's received authoritative values before sampling them locally (Enable to improve changing value smoothness, at the expense of some small CPU and memory impact)",
				},
				{
					string Name = "UseQuantization",
					string Type = "Boolean",
					string Description = "Controls whether or not a net property's primitive-components are quantized (bit-packed to use only the bits necessary to represent all possible values) during serialization (Quantization uses the specified delta threshold as a quantum interval value) (Quantization is mutually exclusive with using half floats)",
				},
			],
			Array Methods = 
			[
				{
					string Name = "GetName",
					string Description = "Net property configuration name.",
					string ReturnType = "const string",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serializes the net property configuration resource.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TranslateVariantProperties",
					string Description = "Translates our variant properties into the target network property type (where possible, else defaults)",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "Unloads the net property configuration resource.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Animation",
			string BaseClass = "Resource",
			string Description = "The Animation resource class is used to store animations of game objects and their properties.",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "Duration",
					string Type = "Real",
					string Description = "Duration of the animation in seconds.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "GetObjectTrack",
					string Description = "",
					string ReturnType = "ObjectTrack",
					string Parameters = "(string fullPath)",
					Array ParameterList = 
					[
						{
							string Name = "fullPath",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Save",
					string Description = "Resource Interface.",
					string ReturnType = "void",
					string Parameters = "(string filename)",
					Array ParameterList = 
					[
						{
							string Name = "filename",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateFrame",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(PlayData playData, TrackParams params, AnimationFrame frame)",
					Array ParameterList = 
					[
						{
							string Name = "playData",
							string Type = "PlayData",
							string Description = "",
						},
						{
							string Name = "params",
							string Type = "TrackParams",
							string Description = "",
						},
						{
							string Name = "frame",
							string Type = "AnimationFrame",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "EventBundle",
			string BaseClass = "",
			string Description = "Event Bundle Serialized event storage container.",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "IsEmpty",
					string Type = "Boolean",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddEvent",
					string Description = "Adds the event to back of the event bundle Returns true if successful, else false (an event of that type has already been added)",
					string ReturnType = "bool",
					string Parameters = "(Event event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Clear",
					string Description = "Clears the event bundle.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DeserializeBitStreamToEvents",
					string Description = "Deserialize our bitstream to our events Returns true if successful, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetBitStream",
					string Description = "Returns the event bundle as bitstream.",
					string ReturnType = "BitStream",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetEventByIndex",
					string Description = "",
					string ReturnType = "Event",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetEventByTypeId",
					string Description = "",
					string ReturnType = "Event",
					string Parameters = "(TypeIdType eventTypeId)",
					Array ParameterList = 
					[
						{
							string Name = "eventTypeId",
							string Type = "TypeIdType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetEventByTypeName",
					string Description = "Returns the event specified if it has been added to the event bundle, else nullptr.",
					string ReturnType = "Event",
					string Parameters = "(StringParam eventTypeName)",
					Array ParameterList = 
					[
						{
							string Name = "eventTypeName",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetEventCount",
					string Description = "Returns the number of events that have been added to the event bundle.",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetEventIndexByTypeId",
					string Description = "Returns the event index specified if it has been added to the event bundle, else nullptr.",
					string ReturnType = "Integer",
					string Parameters = "(TypeIdType eventTypeId)",
					Array ParameterList = 
					[
						{
							string Name = "eventTypeId",
							string Type = "TypeIdType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetEvents",
					string Description = "Returns all the events that have been added to the event bundle.",
					string ReturnType = "EventRange",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetGameSession",
					string Description = "Returns the game session.",
					string ReturnType = "GameSession",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsEmpty",
					string Description = "Returns true if the event bundle is empty (doesn't contain any events), else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveEvent",
					string Description = "Removes the event specified from the event bundle Returns true if successful, else false (an event of that type has already been added)",
					string ReturnType = "bool",
					string Parameters = "(Event event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveEventByIndex",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveEventByTypeId",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(TypeIdType eventTypeId)",
					Array ParameterList = 
					[
						{
							string Name = "eventTypeId",
							string Type = "TypeIdType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveEventByTypeName",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(StringParam eventTypeName)",
					Array ParameterList = 
					[
						{
							string Name = "eventTypeName",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SerializeEventsToBitStream",
					string Description = "Serialize our events to our bitstream Returns true if successful, else false.",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetGameSession",
					string Description = "Sets the game session.",
					string ReturnType = "void",
					string Parameters = "(GameSession gameSession)",
					Array ParameterList = 
					[
						{
							string Name = "gameSession",
							string Type = "GameSession",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator=",
					string Description = "Assignment Operators.",
					string ReturnType = "EventBundle",
					string Parameters = "(const EventBundle rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const EventBundle",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator=",
					string Description = "Assignment Operators.",
					string ReturnType = "EventBundle",
					string Parameters = "(const BitStream rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "const BitStream",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "operator=",
					string Description = "Assignment Operators.",
					string ReturnType = "EventBundle",
					string Parameters = "(MoveReference<BitStream> rhs)",
					Array ParameterList = 
					[
						{
							string Name = "rhs",
							string Type = "MoveReference<BitStream>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Model",
			string BaseClass = "Graphical",
			string Description = "3D Model component. Basic 3D model made of a 3D polygonal mesh. Uses Transform component position, rotation, and scale.",
			Array Tags = 
			[
				"Component",
				"Graphical",
			],
			Array Properties = 
			[
				{
					string Name = "Mesh",
					string Type = "Mesh",
					string Description = "Mesh used for this Model .",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ExtractFrameData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(FrameNode frameNode, FrameBlock frameBlock, Array<Mat4> matrixBuffer)",
					Array ParameterList = 
					[
						{
							string Name = "frameNode",
							string Type = "FrameNode",
							string Description = "",
						},
						{
							string Name = "frameBlock",
							string Type = "FrameBlock",
							string Description = "",
						},
						{
							string Name = "matrixBuffer",
							string Type = "Array<Mat4>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ExtractViewData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ViewNode viewNode, ViewBlock viewBlock, FrameBlock frameBlock)",
					Array ParameterList = 
					[
						{
							string Name = "viewNode",
							string Type = "ViewNode",
							string Description = "",
						},
						{
							string Name = "viewBlock",
							string Type = "ViewBlock",
							string Description = "",
						},
						{
							string Name = "frameBlock",
							string Type = "FrameBlock",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLocalAabb",
					string Description = "",
					string ReturnType = "Aabb",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TestFrustum",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(const Frustum frustum)",
					Array ParameterList = 
					[
						{
							string Name = "frustum",
							string Type = "const Frustum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TestRay",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(GraphicsRayCast rayCast)",
					Array ParameterList = 
					[
						{
							string Name = "rayCast",
							string Type = "GraphicsRayCast",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "PathFinderSettings",
			string BaseClass = "",
			string Description = "",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "CurveType",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "Heuristic",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "HeuristicWeight",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "PathResolution",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "RemoveCoLinearPoints",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "Rubberbanding",
					string Type = "Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "Meta initialization.",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serialize the data to the given stream.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetPeerReceivedUserAddResponse",
			string BaseClass = "",
			string Description = "Dispatched after receiving a net user add response.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "OurNetUserId",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "OurRequestBundle",
					string Type = "EventBundle",
					string Description = "",
				},
				{
					string Name = "TheirAddResponse",
					string Type = "NetUserAddResponse",
					string Description = "",
				},
				{
					string Name = "TheirIpAddress",
					string Type = "IpAddress",
					string Description = "",
				},
				{
					string Name = "TheirNetPeerId",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "TheirResponseBundle",
					string Type = "EventBundle",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "ReactiveSpace",
			string BaseClass = "Component",
			string Description = "",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Over",
					string Type = "Cog",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Camera",
			string BaseClass = "Component",
			string Description = "3D Camera class. The camera uses the position and rotation of the Transform component.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Facing",
					string Type = "Facing",
					string Description = "",
				},
				{
					string Name = "FarPlane",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "FieldOfView",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "NearPlane",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "PerspectiveMode",
					string Type = "PerspectiveMode",
					string Description = "",
				},
				{
					string Name = "Size",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetApiPerspectiveTransform",
					string Description = "",
					string ReturnType = "Mat4",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAspectRatio",
					string Description = "",
					string ReturnType = "Real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetCameraViewportCog",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetFrustum",
					string Description = "",
					string ReturnType = "Frustum",
					string Parameters = "(Real aspect)",
					Array ParameterList = 
					[
						{
							string Name = "aspect",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetPerspectiveTransform",
					string Description = "",
					string ReturnType = "Mat4",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetViewData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ViewBlock block)",
					Array ParameterList = 
					[
						{
							string Name = "block",
							string Type = "ViewBlock",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetViewTransform",
					string Description = "",
					string ReturnType = "Mat4",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetAspectRatio",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Real aspectRatio)",
					Array ParameterList = 
					[
						{
							string Name = "aspectRatio",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "TransformUpdate",
					string Description = "Special function for transform updating from editor.",
					string ReturnType = "void",
					string Parameters = "(TransformUpdateInfo info)",
					Array ParameterList = 
					[
						{
							string Name = "info",
							string Type = "TransformUpdateInfo",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "PhysicsSolverConfig",
			string BaseClass = "DataResource",
			string Description = "Defines various configuration values used by physics to solve constraints. This resource defines a tiered set of properties that can be override global or per constraint type.",
			Array Tags = 
			[
				"Resource",
			],
			Array Properties = 
			[
				{
					string Name = "CacheContacts",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "PositionCorrectionType",
					string Type = "PositionCorrection",
					string Description = "What method should be used to fix errors in joints. Baumgarte fixes errors by adding extra velocity but results in a more spongy behavior. Post Stabilization.",
				},
				{
					string Name = "PositionIterationCount",
					string Type = "Integer",
					string Description = "The number of iterations used for position correction (if position correction is used).",
				},
				{
					string Name = "SolverIterationCount",
					string Type = "Integer",
					string Description = "The number of iterations used in the constraint solver. Affects how stiff joints will be.",
				},
				{
					string Name = "SolverType",
					string Type = "SolverType",
					string Description = "The kind of solver used. For the most part this is internal and should only affect performance.",
				},
				{
					string Name = "SubCorrectionType",
					string Type = "SolverSubType",
					string Description = "What kind of solver to use for post stabilization. Mostly for testing.",
				},
				{
					string Name = "VelocityRestitutionThreshold",
					string Type = "Real",
					string Description = "To prevent numerical issues, restitution is only applied if the relative velocity between the two objects is above this value.",
				},
				{
					string Name = "WarmStart",
					string Type = "Boolean",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "Add",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ConstraintConfigBlock block, Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "block",
							string Type = "ConstraintConfigBlock",
							string Description = "",
						},
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CopyTo",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(PhysicsSolverConfig destination)",
					Array ParameterList = 
					[
						{
							string Name = "destination",
							string Type = "PhysicsSolverConfig",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetBlockAt",
					string Description = "",
					string ReturnType = "ConstraintConfigBlock",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetById",
					string Description = "",
					string ReturnType = "ConstraintConfigBlock",
					string Parameters = "(TypeIdType typeId)",
					Array ParameterList = 
					[
						{
							string Name = "typeId",
							string Type = "TypeIdType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetSize",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RebuildConstraintBlockValues",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Remove",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(ConstraintConfigBlock block)",
					Array ParameterList = 
					[
						{
							string Name = "block",
							string Type = "ConstraintConfigBlock",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ResourceModified",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RuntimeClone",
					string Description = "Clone a resource for runtime modification.",
					string ReturnType = "Resource",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Unload",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetPeerReceivedUserAddRequest",
			string BaseClass = "",
			string Description = "Dispatched after receiving a net user add request.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "ReturnOurAddResponse",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "ReturnOurResponseBundle",
					string Type = "EventBundle",
					string Description = "",
				},
				{
					string Name = "ReturnTheirNetUser",
					string Type = "Cog",
					string Description = "",
				},
				{
					string Name = "TheirIpAddress",
					string Type = "IpAddress",
					string Description = "",
				},
				{
					string Name = "TheirNetPeerId",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "TheirNetUserId",
					string Type = "Integer",
					string Description = "",
				},
				{
					string Name = "TheirRequestBundle",
					string Type = "EventBundle",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LockStepGamepadEvent",
			string BaseClass = "",
			string Description = "A synced gamepad event.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "Index",
					string Type = "Integer",
					string Description = "The index of the gamepad that was activated or deactivated.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serialization of the event.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Attractor",
			string BaseClass = "MovementBase",
			string Description = "Orients the object towards other objects with the Attractive component.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "AttractiveMustBeVisible",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "CheckRadius",
					string Type = "Real",
					string Description = "",
				},
				{
					string Name = "IgnoreStaticObjects",
					string Type = "Boolean",
					string Description = "",
				},
				{
					string Name = "MaxObjects",
					string Type = "Integer",
					string Description = "The maximum amount of objects to look for at a time.",
				},
				{
					string Name = "TimeBetweenChecks",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ComputeAngleChangeRadians",
					string Description = "",
					string ReturnType = "Real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Draw the object.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindAttractiveObjects",
					string Description = "Finds all nearby attractive objects and adds them to mAttractiveObjects.",
					string ReturnType = "void",
					string Parameters = "(Vec3 myPos)",
					Array ParameterList = 
					[
						{
							string Name = "myPos",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetObject",
					string Description = "Returns the object at the given index.",
					string ReturnType = "Cog",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the object.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsVisible",
					string Description = "Casts a ray to the object to determine if it's visible.",
					string ReturnType = "bool",
					string Parameters = "(Vec3 myPos, Cog object)",
					Array ParameterList = 
					[
						{
							string Name = "myPos",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "object",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ObjectsAttractedTo",
					string Description = "Returns the amount of objects it is currently being attracted to.",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "PulleyJoint",
			string BaseClass = "Joint",
			string Description = "A PulleyJoint turn two StickJoints into a pulley via a pulley ratio. A PulleyJoint connects the two free objects of two different stick joints. These two objects will then be bound to move together via the formula length0 + ratio * length1 = 0. Limits, motors and springs should not be used on a pulley.",
			Array Tags = 
			[
				"Physics",
				"Component",
				"Joint",
			],
			Array Properties = 
			[
				{
					string Name = "JointA",
					string Type = "Cog",
					string Description = "",
				},
				{
					string Name = "JointAPath",
					string Type = "CogPath",
					string Description = "",
				},
				{
					string Name = "JointB",
					string Type = "Cog",
					string Description = "",
				},
				{
					string Name = "JointBPath",
					string Type = "CogPath",
					string Description = "",
				},
				{
					string Name = "Ratio",
					string Type = "Real",
					string Description = "The ratio between the two stick joints. The ratio is used in the formula length0 + ratio * length1 = 0.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "BatchEvents",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Commit",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMoleculeData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeData moleculeData)",
					Array ParameterList = 
					[
						{
							string Name = "moleculeData",
							string Type = "MoleculeData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePositionMolecules",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Draws the debug info associated with this joint.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindAndSetJoint",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(Collider collider, Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "collider",
							string Type = "Collider",
							string Description = "",
						},
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAtomIndexFilter",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "(Integer atomIndex, real desiredConstraintValue)",
					Array ParameterList = 
					[
						{
							string Name = "atomIndex",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "desiredConstraintValue",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultLimitIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultMotorIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetDefaultSpringIds",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAllObjectsCreated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PositionMoleculeCount",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RelinkJoint",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer index, Cog cog)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Solve",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SpecificJointRelink",
					string Description = "Used for a specific joint type (eg PulleyJoint ) to reject a relink. This is the last step that happens when relinking, after the joint has set valid to true/false.",
					string ReturnType = "void",
					string Parameters = "(Integer index, Collider collider)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
						{
							string Name = "collider",
							string Type = "Collider",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAtoms",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ValidateJoints",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WarmStart",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MoleculeWalker molecules)",
					Array ParameterList = 
					[
						{
							string Name = "molecules",
							string Type = "MoleculeWalker",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LockStepUpdateEvent",
			string BaseClass = "UpdateEvent",
			string Description = "A frame update event that is expected to be synced.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "CurrentFrame",
					string Type = "Frame",
					string Description = "The current synced frame (it is ok to reply upon this value)",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "HeightMap",
			string BaseClass = "Component",
			string Description = "A common class that represents height map data.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Source",
					string Type = "HeightMapSource",
					string Description = "Get source for height map.",
				},
				{
					string Name = "UnitsPerPatch",
					string Type = "Real",
					string Description = "Gets/sets the number of units per patch.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ApplyNoiseToPatch",
					string Description = "Apply a noise function to a patch (generate terrain)",
					string ReturnType = "void",
					string Parameters = "(HeightPatch patch, Real baseHeight, Real frequency, Real amplitude)",
					Array ParameterList = 
					[
						{
							string Name = "patch",
							string Type = "HeightPatch",
							string Description = "",
						},
						{
							string Name = "baseHeight",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "frequency",
							string Type = "Real",
							string Description = "",
						},
						{
							string Name = "amplitude",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CastLocalRay",
					string Description = "",
					string ReturnType = "HeightMapRayRange",
					string Parameters = "(const Ray ray, Real maxT)",
					Array ParameterList = 
					[
						{
							string Name = "ray",
							string Type = "const Ray",
							string Description = "",
						},
						{
							string Name = "maxT",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CastWorldRay",
					string Description = "",
					string ReturnType = "HeightMapRayRange",
					string Parameters = "(const Ray ray, Real maxT)",
					Array ParameterList = 
					[
						{
							string Name = "ray",
							string Type = "const Ray",
							string Description = "",
						},
						{
							string Name = "maxT",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputePaddedHeightPatchVertices",
					string Description = "Computes the patch's vertex data and stores it in outVertices outVertices must already be the correct size, it is assumed that not all vertices always need to be computed.",
					string ReturnType = "void",
					string Parameters = "(HeightPatch patch, Array<Vec3> outVertices, CellIndex min, CellIndex max)",
					Array ParameterList = 
					[
						{
							string Name = "patch",
							string Type = "HeightPatch",
							string Description = "",
						},
						{
							string Name = "outVertices",
							string Type = "Array<Vec3>",
							string Description = "",
						},
						{
							string Name = "min",
							string Type = "CellIndex",
							string Description = "",
						},
						{
							string Name = "max",
							string Type = "CellIndex",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreatePatchAtIndex",
					string Description = "Create a patch at a particular index.",
					string ReturnType = "HeightPatch",
					string Parameters = "(PatchIndexParam index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "PatchIndexParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DestroyPatchAtIndex",
					string Description = "Destroy a patch at a given index.",
					string ReturnType = "void",
					string Parameters = "(PatchIndexParam index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "PatchIndexParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GenerateIndices",
					string Description = "Generate the indices for a particular lod set.",
					string ReturnType = "void",
					string Parameters = "(Array<Integer> outIndices, Integer lod)",
					Array ParameterList = 
					[
						{
							string Name = "outIndices",
							string Type = "Array<Integer>",
							string Description = "",
						},
						{
							string Name = "lod",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAbsoluteIndex",
					string Description = "Converts the patch and cell index to an absolute index.",
					string ReturnType = "AbsoluteIndex",
					string Parameters = "(PatchIndex patchIndex, CellIndex cellIndex)",
					Array ParameterList = 
					[
						{
							string Name = "patchIndex",
							string Type = "PatchIndex",
							string Description = "",
						},
						{
							string Name = "cellIndex",
							string Type = "CellIndex",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAbsoluteIndexFromLocal",
					string Description = "Get the absolute index for a particular local position.",
					string ReturnType = "AbsoluteIndex",
					string Parameters = "(Vec2 localPosition)",
					Array ParameterList = 
					[
						{
							string Name = "localPosition",
							string Type = "Vec2",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAbsoluteIndexFromWorld",
					string Description = "Get the absolute index for a particular world position.",
					string ReturnType = "AbsoluteIndex",
					string Parameters = "(Vec3 worldPosition)",
					Array ParameterList = 
					[
						{
							string Name = "worldPosition",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetAllPatches",
					string Description = "Get all of the patches.",
					string ReturnType = "PatchMap::valuerange",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetHeightPatchVertices",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HeightPatch patch, Array<Vec3> outVertices)",
					Array ParameterList = 
					[
						{
							string Name = "patch",
							string Type = "HeightPatch",
							string Description = "",
						},
						{
							string Name = "outVertices",
							string Type = "Array<Vec3>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLocalAabbRange",
					string Description = "",
					string ReturnType = "HeightMapAabbRange",
					string Parameters = "(const Aabb aabb, real thickness)",
					Array ParameterList = 
					[
						{
							string Name = "aabb",
							string Type = "const Aabb",
							string Description = "",
						},
						{
							string Name = "thickness",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLocalPosition",
					string Description = "Get the local position.",
					string ReturnType = "Vec2",
					string Parameters = "(PatchIndexParam index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "PatchIndexParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetLocalPosition",
					string Description = "Get the local position from a world position.",
					string ReturnType = "Vec2",
					string Parameters = "(Vec3 worldPosition)",
					Array ParameterList = 
					[
						{
							string Name = "worldPosition",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetPaddedHeightPatchVertices",
					string Description = "Populates the given array with the vertex data that represents the patch Will generate the vertex data if it is not cached Adjacent vertices are padded on all sides for gradient calculations.",
					string ReturnType = "void",
					string Parameters = "(HeightPatch patch, Array<Vec3> outVertices)",
					Array ParameterList = 
					[
						{
							string Name = "patch",
							string Type = "HeightPatch",
							string Description = "",
						},
						{
							string Name = "outVertices",
							string Type = "Array<Vec3>",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetPatchAabb",
					string Description = "",
					string ReturnType = "Aabb",
					string Parameters = "(HeightPatch patch)",
					Array ParameterList = 
					[
						{
							string Name = "patch",
							string Type = "HeightPatch",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetPatchAndCellIndex",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(AbsoluteIndexParam absoluteIndex, PatchIndex patchIndex, CellIndex cellIndex)",
					Array ParameterList = 
					[
						{
							string Name = "absoluteIndex",
							string Type = "AbsoluteIndexParam",
							string Description = "",
						},
						{
							string Name = "patchIndex",
							string Type = "PatchIndex",
							string Description = "",
						},
						{
							string Name = "cellIndex",
							string Type = "CellIndex",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetPatchAtIndex",
					string Description = "Get a patch at a particular index.",
					string ReturnType = "HeightPatch",
					string Parameters = "(PatchIndexParam index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "PatchIndexParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetPatchIndexFromLocal",
					string Description = "Get the index for a particular local position.",
					string ReturnType = "PatchIndex",
					string Parameters = "(Vec2 localPosition)",
					Array ParameterList = 
					[
						{
							string Name = "localPosition",
							string Type = "Vec2",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetPatchIndexFromWorld",
					string Description = "Get the index for a particular world position.",
					string ReturnType = "PatchIndex",
					string Parameters = "(Vec3 worldPosition)",
					Array ParameterList = 
					[
						{
							string Name = "worldPosition",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetPatchLocalAabb",
					string Description = "",
					string ReturnType = "Aabb",
					string Parameters = "(HeightPatch patch)",
					Array ParameterList = 
					[
						{
							string Name = "patch",
							string Type = "HeightPatch",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetQuadAtIndex",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(AbsoluteIndex index, Triangle triangles, Integer count)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "AbsoluteIndex",
							string Description = "",
						},
						{
							string Name = "triangles",
							string Type = "Triangle",
							string Description = "",
						},
						{
							string Name = "count",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldAabbRange",
					string Description = "",
					string ReturnType = "HeightMapAabbRange",
					string Parameters = "(const Aabb aabb, real thickness)",
					Array ParameterList = 
					[
						{
							string Name = "aabb",
							string Type = "const Aabb",
							string Description = "",
						},
						{
							string Name = "thickness",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldPointHeight",
					string Description = "Get the height of a given point relative to the height map Note that this function does NOT sample the heightmap.",
					string ReturnType = "Real",
					string Parameters = "(Vec3 worldPosition)",
					Array ParameterList = 
					[
						{
							string Name = "worldPosition",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldPosition",
					string Description = "Get the world position.",
					string ReturnType = "Vec3",
					string Parameters = "(PatchIndexParam index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "PatchIndexParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldPosition",
					string Description = "Get the world position from a local position.",
					string ReturnType = "Vec3",
					string Parameters = "(Vec2 localPosition)",
					Array ParameterList = 
					[
						{
							string Name = "localPosition",
							string Type = "Vec2",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetWorldUp",
					string Description = "Get the world space up vector.",
					string ReturnType = "Vec3",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "LoadFromHeightMapSource",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MakePaddedHeightBuffer",
					string Description = "Pre-fetches all patch and adjacent patch heights that are needed to compute tangents and bitangents for this patch to prevent any hashes or branching when computing vertices.",
					string ReturnType = "void",
					string Parameters = "(HeightPatch patch, real heights)",
					Array ParameterList = 
					[
						{
							string Name = "patch",
							string Type = "HeightPatch",
							string Description = "",
						},
						{
							string Name = "heights",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Modified",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnLevelLoaded",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ObjectEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "ObjectEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SampleHeight",
					string Description = "Sample the height using a world space position.",
					string ReturnType = "Real",
					string Parameters = "(Vec3 worldPosition, Real defaultValue)",
					Array ParameterList = 
					[
						{
							string Name = "worldPosition",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "defaultValue",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SampleHeight",
					string Description = "Sample the height using a local space position.",
					string ReturnType = "Real",
					string Parameters = "(Vec2 localPosition, Real defaultValue)",
					Array ParameterList = 
					[
						{
							string Name = "localPosition",
							string Type = "Vec2",
							string Description = "",
						},
						{
							string Name = "defaultValue",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SampleHeight",
					string Description = "Sample a height given an absolute index Absolute indices are determined using the PatchIndex * HeightPatch::Size + CellIndex.",
					string ReturnType = "Real",
					string Parameters = "(AbsoluteIndexParam absoluteIndex, Real defaultValue)",
					Array ParameterList = 
					[
						{
							string Name = "absoluteIndex",
							string Type = "AbsoluteIndexParam",
							string Description = "",
						},
						{
							string Name = "defaultValue",
							string Type = "Real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SaveToHeightMapSource",
					string Description = "Save and load from SaveToHeightMapSource.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SaveToObj",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(StringParam fileName, HeightMap heightMap)",
					Array ParameterList = 
					[
						{
							string Name = "fileName",
							string Type = "StringParam",
							string Description = "",
						},
						{
							string Name = "heightMap",
							string Type = "HeightMap",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendPatchEvent",
					string Description = "Sends out a patch event.",
					string ReturnType = "void",
					string Parameters = "(StringParam eventType, HeightPatch patch)",
					Array ParameterList = 
					[
						{
							string Name = "eventType",
							string Type = "StringParam",
							string Description = "",
						},
						{
							string Name = "patch",
							string Type = "HeightPatch",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SignalAllPatchesModified",
					string Description = "Updates all patches.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SignalPatchModified",
					string Description = "Signal that a particular patch was modified (typically updates physics, graphics, etc)",
					string ReturnType = "void",
					string Parameters = "(HeightPatch patch)",
					Array ParameterList = 
					[
						{
							string Name = "patch",
							string Type = "HeightPatch",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SignalPatchModified",
					string Description = "Signal that a particular patch was modified (typically updates physics, graphics, etc)",
					string ReturnType = "void",
					string Parameters = "(HeightPatch patch, Vec2 min, Vec2 max)",
					Array ParameterList = 
					[
						{
							string Name = "patch",
							string Type = "HeightPatch",
							string Description = "",
						},
						{
							string Name = "min",
							string Type = "Vec2",
							string Description = "",
						},
						{
							string Name = "max",
							string Type = "Vec2",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdateAdjacentPatches",
					string Description = "Updates adjacent patch vertices.",
					string ReturnType = "void",
					string Parameters = "(HeightPatch patch)",
					Array ParameterList = 
					[
						{
							string Name = "patch",
							string Type = "HeightPatch",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdatePatch",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(HeightPatch patch)",
					Array ParameterList = 
					[
						{
							string Name = "patch",
							string Type = "HeightPatch",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdatePatchVertices",
					string Description = "Computes vertices for the whole patch.",
					string ReturnType = "void",
					string Parameters = "(HeightPatch patch)",
					Array ParameterList = 
					[
						{
							string Name = "patch",
							string Type = "HeightPatch",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "UpdatePatchVertices",
					string Description = "Computes only the vertices in the bound given by min/max.",
					string ReturnType = "void",
					string Parameters = "(HeightPatch patch, Vec2 min, Vec2 max)",
					Array ParameterList = 
					[
						{
							string Name = "patch",
							string Type = "HeightPatch",
							string Description = "",
						},
						{
							string Name = "min",
							string Type = "Vec2",
							string Description = "",
						},
						{
							string Name = "max",
							string Type = "Vec2",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "NetChannelPropertyChange",
			string BaseClass = "",
			string Description = "Dispatched after an outgoing/incoming net channel property change is detected during a particular replication phase.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "ChannelName",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "ComponentName",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "Direction",
					string Type = "TransmissionDirection",
					string Description = "",
				},
				{
					string Name = "Object",
					string Type = "Cog",
					string Description = "",
				},
				{
					string Name = "PropertyName",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "ReplicationPhase",
					string Type = "ReplicationPhase",
					string Description = "",
				},
				{
					string Name = "Timestamp",
					string Type = "Real",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LockStepSyncIgnore",
			string BaseClass = "Component",
			string Description = "Sometimes when doing sync checking, we need to ignore specific components because we know that they will not be in sync. For example, player specific components such as the Microphone or the Camera .",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "IgnoreAllComponents",
					string Type = "bool",
					string Description = "Should we ignore all components (or just ones set in the array)",
				},
				{
					string Name = "IgnoreComponent0",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "IgnoreComponent1",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "IgnoreComponent2",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "IgnoreComponent3",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "IgnoreComponent4",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "IgnoreComponent5",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "IgnoreComponent6",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "IgnoreComponent7",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "IgnoreComponent8",
					string Type = "string",
					string Description = "",
				},
				{
					string Name = "IgnoreComponent9",
					string Type = "string",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "BaseCollisionEvent",
			string BaseClass = "",
			string Description = "Common interface for all collision events. Contains the core functionality of inspecting the contained manifold.",
			Array Tags = 
			[
				"Event",
			],
			Array Properties = 
			[
				{
					string Name = "ContactPointCount",
					string Type = "Integer",
					string Description = "Returns how many points of contact there are.",
				},
				{
					string Name = "ContactPoints",
					string Type = "ContactPointRange",
					string Description = "Returns a range to iterate through all of the contact points.",
				},
				{
					string Name = "IsGhost",
					string Type = "Boolean",
					string Description = "Returns whether or not this was a ghost collision.",
				},
				{
					string Name = "Object",
					string Type = "Cog",
					string Description = "The object that this event was sent to.",
				},
				{
					string Name = "OtherObject",
					string Type = "Cog",
					string Description = "The other object in this event. There were two objects A and B, we sent to A so this is B.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "GetCollider",
					string Description = "",
					string ReturnType = "Collider",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetFirstPoint",
					string Description = "Returns the point that caused the being/end to happen.",
					string ReturnType = "ContactPoint",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetOtherCollider",
					string Description = "",
					string ReturnType = "Collider",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetPoint",
					string Description = "Returns the manifold point at the given index. This is for C++ use and only for those who know what they are doing.",
					string ReturnType = "const Physics::ManifoldPoint",
					string Parameters = "(Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "MatchCollisionFilterOrder",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CollisionFilter filter)",
					Array ParameterList = 
					[
						{
							string Name = "filter",
							string Type = "CollisionFilter",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Set",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(const Physics::Manifold manifold, string eventType)",
					Array ParameterList = 
					[
						{
							string Name = "manifold",
							string Type = "const Physics::Manifold",
							string Description = "",
						},
						{
							string Name = "eventType",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "PointGravityEffect",
			string BaseClass = "BasicPointEffect",
			string Description = "A force effect that pulls an object towards a central point. This effect is identical to the PointForceEffect except it ignores the mass of the object. This means that all objects will accelerate at the same speed irrespective of their mass (just like gravity). This is useful to make planetary gravity or other similar effects.",
			Array Tags = 
			[
				"PhysicsEffect",
				"Physics",
				"Component",
			],
			Array Properties = 
			[
			],
			Array Methods = 
			[
				{
					string Name = "ApplyEffect",
					string Description = "Apply the desired forces to the given body. Dt is provided for effects that actually want to apply an acceleration (masked as a force).",
					string ReturnType = "void",
					string Parameters = "(RigidBody obj, real dt)",
					Array ParameterList = 
					[
						{
							string Name = "obj",
							string Type = "RigidBody",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "LockStepGamepads",
			string BaseClass = "Component",
			string Description = "Provides synced gamepads input across lock step.",
			Array Tags = 
			[
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "MaxGamepadsPerPeer",
					string Type = "Integer",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "FilterGamepadEventPerIndex",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(LockStepGamepadEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "LockStepGamepadEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetGamepad",
					string Description = "",
					string ReturnType = "LockStepGamepad",
					string Parameters = "(LockStepPeer peer, Integer index)",
					Array ParameterList = 
					[
						{
							string Name = "peer",
							string Type = "LockStepPeer",
							string Description = "",
						},
						{
							string Name = "index",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnGamepadsUpdated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(ObjectEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "ObjectEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnLocalGamepadDown",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(GamepadEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "GamepadEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnLocalGamepadUp",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(GamepadEvent event)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "GamepadEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SendButtonEvent",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(GamepadEvent event, string eventId, bool isDown)",
					Array ParameterList = 
					[
						{
							string Name = "event",
							string Type = "GamepadEvent",
							string Description = "",
						},
						{
							string Name = "eventId",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "isDown",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetupGamepadEvent",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(LockStepGamepadUpdateEvent syncedEvent, Gamepad gamepad)",
					Array ParameterList = 
					[
						{
							string Name = "syncedEvent",
							string Type = "LockStepGamepadUpdateEvent",
							string Description = "",
						},
						{
							string Name = "gamepad",
							string Type = "Gamepad",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "EllipsoidCollider",
			string BaseClass = "Collider",
			string Description = "Ellipsoid Collider is a basic collision primitive of a ellipsoid.",
			Array Tags = 
			[
				"Physics",
				"Collider",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "Radii",
					string Type = "Real3",
					string Description = "The x, y and z radius of the ellipsoid.",
				},
				{
					string Name = "WorldRadii",
					string Type = "Real3",
					string Description = "The radii of the ellipsoid after transform is applied (scale and rotation)",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ComputeLocalInverseInertiaTensor",
					string Description = "Computes the local space (as in not rotated, the scale is still necessary but the translation is assumed to be zero) inertia tensor from the passed in mass.",
					string ReturnType = "void",
					string Parameters = "(real mass, Mat3Ref localInvInertia)",
					Array ParameterList = 
					[
						{
							string Name = "mass",
							string Type = "real",
							string Description = "",
						},
						{
							string Name = "localInvInertia",
							string Type = "Mat3Ref",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldAabbInternal",
					string Description = "Computes the world-space aabb. This is always called after CacheWorldValues has been called. This must be implemented on each collider type. The helper function 'SetWorldAabbFromHalfExtents' exists to compute the aabb from the current rotation and translation with the given world scale half-extent of an aabb.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldBoundingSphereInternal",
					string Description = "Compute the world-space bounding sphere. See ComputeWorldAabb for a description of when and why this is called (but for a sphere). The default behavior is to take the sphere centered at the object's translation with a radius to the furthest away point.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ComputeWorldVolumeInternal",
					string Description = "Compute the volume of this collider in world space. This must be calculated in world space as there's no generic way to scale volume after-the-fact. All colliders that contain a volume should implement this. Some colliders (e.g. HeightMap or Mesh ) don't as they aren't meant to work with rigid bodies. This is an internal function, meaning that it assumes the transform data is already up-to-date (should rarely be called by the outside).",
					string ReturnType = "real",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DebugDraw",
					string Description = "Base debug draw for a component. Special for the each type of component.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Support",
					string Description = "Returns the point on the volume furthest in the given direction.",
					string ReturnType = "void",
					string Parameters = "(Vec3 direction, Vec3Ptr support)",
					Array ParameterList = 
					[
						{
							string Name = "direction",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "support",
							string Type = "Vec3Ptr",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Space",
			string BaseClass = "Cog",
			string Description = "A space is a near boundless, three-dimensional extent in which objects and events occur and have relative position, direction, and time. Essentially a world of objects that exist together. Used to divide objects between UI, World, Editor, and others. The two most Common spaces are the 'World' for the game world and the 'Ui' for the HUD and menus.",
			Array Tags = 
			[
			],
			Array Properties = 
			[
				{
					string Name = "CurrentLevel",
					string Type = "Level",
					string Description = "Last level loaded.",
				},
				{
					string Name = "ObjectCount",
					string Type = "Integer",
					string Description = "Number of objects in the space.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddObject",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Cog cog)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddObjectsFromLevel",
					string Description = "Add all objects from a level.",
					string ReturnType = "Level",
					string Parameters = "(Level levelName)",
					Array ParameterList = 
					[
						{
							string Name = "levelName",
							string Type = "Level",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddObjectsFromStream",
					string Description = "Add objects from serializer stream.",
					string ReturnType = "range",
					string Parameters = "(string source, Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "source",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AddToNameMap",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Cog cog, StringParam name)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "name",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AllObjects",
					string Description = "All objects in the space.",
					string ReturnType = "range",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "AllRootObjects",
					string Description = "",
					string ReturnType = "HierarchyList::range",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ChangedObjects",
					string Description = "Changed objects this implies implies Modified so it is also set.",
					string ReturnType = "void",
					string Parameters = "(bool transientChange)",
					Array ParameterList = 
					[
						{
							string Name = "transientChange",
							string Type = "bool",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CheckForChangedObjects",
					string Description = "Any change to the count / structure of the objects.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Clone",
					string Description = "Clones this cog.",
					string ReturnType = "Cog",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Create",
					string Description = "Create an object in the space.",
					string ReturnType = "Cog",
					string Parameters = "(Archetype archetype)",
					Array ParameterList = 
					[
						{
							string Name = "archetype",
							string Type = "Archetype",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateAt",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "(string source, Vec3 position, QuatParam rotation, Vec3 scale)",
					Array ParameterList = 
					[
						{
							string Name = "source",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "position",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "rotation",
							string Type = "QuatParam",
							string Description = "",
						},
						{
							string Name = "scale",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateAt",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "(string source, Transform transform)",
					Array ParameterList = 
					[
						{
							string Name = "source",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "transform",
							string Type = "Transform",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateAt",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "(string source, Vec3 position)",
					Array ParameterList = 
					[
						{
							string Name = "source",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "position",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateAt",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "(string source, Vec3 position, QuatParam rotation)",
					Array ParameterList = 
					[
						{
							string Name = "source",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "position",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "rotation",
							string Type = "QuatParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateAt",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "(string source, Vec3 position, Vec3 scale)",
					Array ParameterList = 
					[
						{
							string Name = "source",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "position",
							string Type = "Vec3",
							string Description = "",
						},
						{
							string Name = "scale",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateAtPosition",
					string Description = "Create a object at a position in the space.",
					string ReturnType = "Cog",
					string Parameters = "(Archetype archetype, Vec3 position)",
					Array ParameterList = 
					[
						{
							string Name = "archetype",
							string Type = "Archetype",
							string Description = "",
						},
						{
							string Name = "position",
							string Type = "Vec3",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateLink",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "(Archetype archetype, Cog objectA, Cog objectB)",
					Array ParameterList = 
					[
						{
							string Name = "archetype",
							string Type = "Archetype",
							string Description = "",
						},
						{
							string Name = "objectA",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "objectB",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateNamed",
					string Description = "Create an object from an archetype.",
					string ReturnType = "Cog",
					string Parameters = "(string archetypeName, string name)",
					Array ParameterList = 
					[
						{
							string Name = "archetypeName",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "name",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateNamedLink",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "(string archetypeName, Cog objectA, Cog objectB)",
					Array ParameterList = 
					[
						{
							string Name = "archetypeName",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "objectA",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "objectB",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Destroy",
					string Description = "Destroy the space and all objects inside it.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DestroyAll",
					string Description = "Destroy all objects in space.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DestroyAllFromLevel",
					string Description = "Destroy all objects created from level.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindAllObjectsByName",
					string Description = "Find an object in the space with a given name.",
					string ReturnType = "CogNameRange",
					string Parameters = "(StringParam name)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindFirstObjectByName",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "(StringParam name)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindFirstRootObjectByName",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "(StringParam name)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindLastObjectByName",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "(StringParam name)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindLastRootObjectByName",
					string Description = "",
					string ReturnType = "Cog",
					string Parameters = "(StringParam name)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "FindObjectByName",
					string Description = "Find an object in the space with a given name.",
					string ReturnType = "Cog",
					string Parameters = "(StringParam name)",
					Array ParameterList = 
					[
						{
							string Name = "name",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ForceDestroy",
					string Description = "Internal Destroy.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetCreationFlags",
					string Description = "",
					string ReturnType = "Integer",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetGameSession",
					string Description = "Get the GameSession that owns us and our space.",
					string ReturnType = "GameSession",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetModified",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "GetSpace",
					string Description = "",
					string ReturnType = "Space",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize all the components on the composition. The order of initialize is as follows: 1. Initialize 2. OnAllObjectsCreated 3. ScriptInitialize 4. The event 'AllObjectsInitialized' is sent out on the CogInitializer Generally script Initialize comes after ALL C++ initialization because it makes scripts safer and easier to debug (knowing all C++ components have been fully setup, can't access anything bad)",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsEditorMode",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsEditorOrPreviewMode",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsPreviewMode",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "LoadLevel",
					string Description = "Load new level replace the current level.",
					string ReturnType = "void",
					string Parameters = "(Level levelName)",
					Array ParameterList = 
					[
						{
							string Name = "levelName",
							string Type = "Level",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "LoadLevelAdditive",
					string Description = "Do no destroy current objects, add objects from level and change loaded level.",
					string ReturnType = "void",
					string Parameters = "(Level levelName)",
					Array ParameterList = 
					[
						{
							string Name = "levelName",
							string Type = "Level",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "LoadLevelFile",
					string Description = "Load the level file.",
					string ReturnType = "void",
					string Parameters = "(string filePath)",
					Array ParameterList = 
					[
						{
							string Name = "filePath",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "LoadPendingLevel",
					string Description = "Load the pending level. Called before update.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Modified",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "NotModified",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ReloadLevel",
					string Description = "Reload the current level.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveFromNameMap",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Cog cog, StringParam name)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
						{
							string Name = "name",
							string Type = "StringParam",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveObject",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Cog cog)",
					Array ParameterList = 
					[
						{
							string Name = "cog",
							string Type = "Cog",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SaveLevelFile",
					string Description = "Save a level file.",
					string ReturnType = "void",
					string Parameters = "(string levelName)",
					Array ParameterList = 
					[
						{
							string Name = "levelName",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Serialize a components data.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SerializeObjectsToSpace",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer, CreationContext context, Serializer loader)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
						{
							string Name = "context",
							string Type = "CreationContext",
							string Description = "",
						},
						{
							string Name = "loader",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetName",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(string newName)",
					Array ParameterList = 
					[
						{
							string Name = "newName",
							string Type = "string",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "Region",
			string BaseClass = "Component",
			string Description = "Regions are used to logically turn collision volumes (a collider) into trigger volume or a region for physics effects. Any effects attached to a cog with a Region will be applied to whatever is in contact with this region.",
			Array Tags = 
			[
				"Physics",
				"Component",
			],
			Array Properties = 
			[
				{
					string Name = "WakeUpOnEffectChange",
					string Type = "Boolean",
					string Description = "",
				},
			],
			Array Methods = 
			[
				{
					string Name = "AddEffect",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(PhysicsEffect effect)",
					Array ParameterList = 
					[
						{
							string Name = "effect",
							string Type = "PhysicsEffect",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "All",
					string Description = "",
					string ReturnType = "RegionContactRange",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ApplyEffects",
					string Description = "Helper to apply effects to a body.",
					string ReturnType = "void",
					string Parameters = "(RigidBody body, real dt)",
					Array ParameterList = 
					[
						{
							string Name = "body",
							string Type = "RigidBody",
							string Description = "",
						},
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "DispatchEvent",
					string Description = "Dispatches an event to all objects in the region.",
					string ReturnType = "void",
					string Parameters = "(string eventId, Event toSend)",
					Array ParameterList = 
					[
						{
							string Name = "eventId",
							string Type = "string",
							string Description = "",
						},
						{
							string Name = "toSend",
							string Type = "Event",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Initialize the component. Activating it in the space.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnDestroy",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Integer flags)",
					Array ParameterList = 
					[
						{
							string Name = "flags",
							string Type = "Integer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "RemoveEffect",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(PhysicsEffect effect)",
					Array ParameterList = 
					[
						{
							string Name = "effect",
							string Type = "PhysicsEffect",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Update",
					string Description = "Applies effects to all of the objects in the region.",
					string ReturnType = "void",
					string Parameters = "(real dt)",
					Array ParameterList = 
					[
						{
							string Name = "dt",
							string Type = "real",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "WakeUpAll",
					string Description = "Wakes up all bodies in contact with this region (so effects will take affect)",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
		{
			string Name = "AnimationGraph",
			string BaseClass = "Component",
			string Description = "The AnimationGraph component controls animation for an individual game object. It stores all needed per instance (vs what is shared in the animation resource) manages the current time and enumerates the animation sets. The AnimationGraph can animate multiple child objects and properties enabling bone animation, and other hierarchical animations.",
			Array Tags = 
			[
				"Component",
				"Core",
			],
			Array Properties = 
			[
				{
					string Name = "Active",
					string Type = "Boolean",
					string Description = "Is the animGraph animating?",
				},
				{
					string Name = "ActiveNode",
					string Type = "AnimationNode",
					string Description = "",
				},
				{
					string Name = "TimeScale",
					string Type = "Real",
					string Description = "Rate at that the active animations plays relative to space time.",
				},
			],
			Array Methods = 
			[
				{
					string Name = "ApplyFrame",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(AnimationFrame frame)",
					Array ParameterList = 
					[
						{
							string Name = "frame",
							string Type = "AnimationFrame",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateBasicNode",
					string Description = "Node creation functions.",
					string ReturnType = "BasicAnimation",
					string Parameters = "(Animation animation, AnimPlayMode::Enum mode)",
					Array ParameterList = 
					[
						{
							string Name = "animation",
							string Type = "Animation",
							string Description = "",
						},
						{
							string Name = "mode",
							string Type = "AnimPlayMode::Enum",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateChainNode",
					string Description = "",
					string ReturnType = "ChainNode",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateCrossBlendNode",
					string Description = "",
					string ReturnType = "CrossBlend",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateDirectBlendNode",
					string Description = "",
					string ReturnType = "DirectBlend",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "CreateSelectiveNode",
					string Description = "",
					string ReturnType = "SelectiveNode",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ForceUpdate",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Initialize",
					string Description = "Component Interface.",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "InitializeMeta",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(MetaType meta)",
					Array ParameterList = 
					[
						{
							string Name = "meta",
							string Type = "MetaType",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "IsPlayingInGraph",
					string Description = "",
					string ReturnType = "bool",
					string Parameters = "(Animation animation)",
					Array ParameterList = 
					[
						{
							string Name = "animation",
							string Type = "Animation",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnAllObjectsCreated",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(CogInitializer initializer)",
					Array ParameterList = 
					[
						{
							string Name = "initializer",
							string Type = "CogInitializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnMetaModified",
					string Description = "We need to re-link all objects whenever the meta database has been modified. This should only ever happen if this object is in the editor.",
					string ReturnType = "void",
					string Parameters = "(MetaTypeEvent e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "MetaTypeEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "OnUpdate",
					string Description = "Updates the root node on each from and applies it to the object tree.",
					string ReturnType = "void",
					string Parameters = "(UpdateEvent e)",
					Array ParameterList = 
					[
						{
							string Name = "e",
							string Type = "UpdateEvent",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PreviewGraph",
					string Description = "Editor preview functionality.",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "PrintGraph",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "ResetAnimationNode",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "Serialize",
					string Description = "Component Serialization Interface.",
					string ReturnType = "void",
					string Parameters = "(Serializer stream)",
					Array ParameterList = 
					[
						{
							string Name = "stream",
							string Type = "Serializer",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetDefaults",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "()",
					Array ParameterList = 
					[
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
				{
					string Name = "SetUpPlayData",
					string Description = "",
					string ReturnType = "void",
					string Parameters = "(Animation animation, PlayData playData)",
					Array ParameterList = 
					[
						{
							string Name = "animation",
							string Type = "Animation",
							string Description = "",
						},
						{
							string Name = "playData",
							string Type = "PlayData",
							string Description = "",
						},
					],
					Array PossibleExceptionThrows = 
					[
					],
				},
			],
			Array EventsSent = 
			[
			],
		},
	],
},
